
main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003474  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000840  40000000  00003474  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000ec  40000840  00003cb4  00010840  2**2
                  ALLOC
  3 .stack        00000b00  40000930  40000930  00010840  2**3
                  CONTENTS
  4 .ARM.attributes 00000030  00000000  00000000  00011340  2**0
                  CONTENTS, READONLY
  5 .comment      0000002a  00000000  00000000  00011370  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000280  00000000  00000000  000113a0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 000003a5  00000000  00000000  00011620  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00001ade  00000000  00000000  000119c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000813  00000000  00000000  000134a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000009e3  00000000  00000000  00013cb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000b5c  00000000  00000000  0001469c  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000865  00000000  00000000  000151f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00000a3b  00000000  00000000  00015a5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000208  00000000  00000000  00016498  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_pubtypes 00000229  00000000  00000000  000166a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <Trap-0x3c>:
@-----------------------------------------------------------@

.section .VECTOR, "ax"
.arm

	LDR	PC, [PC, #24]	@ Reset entry, jump to reset handler
       0:	e59ff018 	ldr	pc, [pc, #24]	; 20 <B_Thumb>
	LDR	PC, [PC, #24]	@ Undef entry, trap
       4:	e59ff018 	ldr	pc, [pc, #24]	; 24 <VIC_SWPriorityMask>
	LDR	PC, [PC, #24]	@ SWI entry, jump to SWI handler
       8:	e59ff018 	ldr	pc, [pc, #24]	; 28 <VIC_SWPriorityMask+0x4>
	LDR	PC, [PC, #24]	@ PAbt entry, trap
       c:	e59ff018 	ldr	pc, [pc, #24]	; 2c <VIC_SWPriorityMask+0x8>
	LDR	PC, [PC, #24]	@ DAbt entry, trap
      10:	e59ff018 	ldr	pc, [pc, #24]	; 30 <VIC_SWPriorityMask+0xc>
      14:	00000000 	.word	0x00000000
	.word	0		@ Reserved
	LDR	PC, [PC, #20]	@ IRQ entry, jump to IRQ handler
      18:	e59ff014 	ldr	pc, [pc, #20]	; 34 <VIC_SWPriorityMask+0x10>
	LDR     PC, [PC, #20]	@ FIQ entry, trap
      1c:	e59ff014 	ldr	pc, [pc, #20]	; 38 <VIC_SWPriorityMask+0x14>
      20:	00000040 	.word	0x00000040
      24:	0000003c 	.word	0x0000003c
      28:	00000254 	.word	0x00000254
      2c:	0000003c 	.word	0x0000003c
      30:	0000003c 	.word	0x0000003c
      34:	000000e0 	.word	0x000000e0
      38:	0000021c 	.word	0x0000021c

0000003c <Trap>:
	.word	Trap		@ Prefetch Abort handler
	.word	Trap		@ Data Abort handler
	.word	IRQ_Handler	@ IRQ handler
	.word	FIQ_Handler	@ FIQ handler

Trap:	B	Trap		@ Unused exception trap (infinite loop)
      3c:	eafffffe 	b	3c <Trap>

00000040 <Reset_Handler>:
@	LDR	R0, =TargetResetInit
@	MOV	LR, PC
@	BX	R0

@ Setup Stack for each mode
	LDR	R0, =Stack_Top
      40:	e59f0428 	ldr	r0, [pc, #1064]	; 470 <sb_align+0x18>

@ Enter Undefined Instruction Mode and set its Stack Pointer
	MSR	CPSR_c, #M_UND | B_Irq | B_Fiq
      44:	e321f0db 	msr	CPSR_c, #219	; 0xdb
	MOV	SP, R0
      48:	e1a0d000 	mov	sp, r0
	SUB	R0, R0, #UND_Stack_Size
      4c:	e2400000 	sub	r0, r0, #0

@ Enter Abort Mode and set its Stack Pointer
	MSR	CPSR_c, #M_ABT | B_Irq | B_Fiq
      50:	e321f0d7 	msr	CPSR_c, #215	; 0xd7
	MOV	SP, R0
      54:	e1a0d000 	mov	sp, r0
	SUB	R0, R0, #ABT_Stack_Size
      58:	e2400000 	sub	r0, r0, #0

@ Enter FIQ Mode and set its Stack Pointer
	MSR	CPSR_c, #M_FIQ | B_Irq | B_Fiq
      5c:	e321f0d1 	msr	CPSR_c, #209	; 0xd1
	MOV	SP, R0
      60:	e1a0d000 	mov	sp, r0
	SUB	R0, R0, #FIQ_Stack_Size
      64:	e2400c01 	sub	r0, r0, #256	; 0x100

@ Enter IRQ Mode and set its Stack Pointer
	MSR	CPSR_c, #M_IRQ | B_Irq | B_Fiq
      68:	e321f0d2 	msr	CPSR_c, #210	; 0xd2
	MOV	SP, R0
      6c:	e1a0d000 	mov	sp, r0
	SUB	R0, R0, #IRQ_Stack_Size
      70:	e2400c01 	sub	r0, r0, #256	; 0x100

@ Enter Supervisor Mode and set its Stack Pointer
	MSR	CPSR_c, #M_SVC | B_Irq | B_Fiq
      74:	e321f0d3 	msr	CPSR_c, #211	; 0xd3
	MOV	SP, R0
      78:	e1a0d000 	mov	sp, r0
	SUB	R0, R0, #SVC_Stack_Size
      7c:	e2400c01 	sub	r0, r0, #256	; 0x100

@ Enter User Mode and set its Stack Pointer
	MSR	CPSR_c, #M_USR | B_Irq | B_Fiq
      80:	e321f0d0 	msr	CPSR_c, #208	; 0xd0
	MOV	SP, R0
      84:	e1a0d000 	mov	sp, r0
	SUB	SL, SP, #USR_Stack_Size
      88:	e24dab02 	sub	sl, sp, #2048	; 0x800

@ Relocate .data section (Initialize with ROM data)
	LDR	R1, =_etext
      8c:	e59f13e0 	ldr	r1, [pc, #992]	; 474 <sb_align+0x1c>
	LDR	R2, =_data
      90:	e59f23e0 	ldr	r2, [pc, #992]	; 478 <sb_align+0x20>
	LDR	R3, =_edata
      94:	e59f33e0 	ldr	r3, [pc, #992]	; 47c <sb_align+0x24>
	CMP	R2, R3
      98:	e1520003 	cmp	r2, r3
	BEQ	DataIsEmpty
      9c:	0a000003 	beq	b0 <DataIsEmpty>

000000a0 <LoopRel>:
LoopRel:CMP	R2, R3
      a0:	e1520003 	cmp	r2, r3
	LDRLO	R0, [R1], #4
      a4:	34910004 	ldrcc	r0, [r1], #4
	STRLO	R0, [R2], #4
      a8:	34820004 	strcc	r0, [r2], #4
	BLO	LoopRel
      ac:	3afffffb 	bcc	a0 <LoopRel>

000000b0 <DataIsEmpty>:
DataIsEmpty:

@ Clear .bss section (Initialize with 0)
	MOV	R0, #0
      b0:	e3a00000 	mov	r0, #0
	LDR	R1, =__bss_start__
      b4:	e59f13c4 	ldr	r1, [pc, #964]	; 480 <sb_align+0x28>
	LDR	R2, =__bss_end__
      b8:	e59f23c4 	ldr	r2, [pc, #964]	; 484 <sb_align+0x2c>
	CMP	R1,R2
      bc:	e1510002 	cmp	r1, r2
	BEQ	BSSIsEmpty
      c0:	0a000002 	beq	d0 <BSSIsEmpty>

000000c4 <LoopZI>:
LoopZI:	CMP	R1, R2
      c4:	e1510002 	cmp	r1, r2
	STRLO	R0, [R1], #4
      c8:	34810004 	strcc	r0, [r1], #4
	BLO	LoopZI
      cc:	3afffffc 	bcc	c4 <LoopZI>

000000d0 <BSSIsEmpty>:
BSSIsEmpty:

@ Start main()
.extern main
	LDR	R0, =main
      d0:	e59f03b0 	ldr	r0, [pc, #944]	; 488 <sb_align+0x30>
	MOV	LR, PC
      d4:	e1a0e00f 	mov	lr, pc
	BX	R0
      d8:	e12fff10 	bx	r0

000000dc <MTrap>:
MTrap:	B	MTrap	@ Trap if main() terminated
      dc:	eafffffe 	b	dc <MTrap>

000000e0 <IRQ_Handler>:
.equ ticksrc,		0x10

.section .text, "ax"
.arm
IRQ_Handler:
	MSR	CPSR_c, #M_IRQ | B_Irq | B_Fiq
      e0:	e321f0d2 	msr	CPSR_c, #210	; 0xd2
	SUB	LR, LR, #4		@ Adjust LR_irq and push it
      e4:	e24ee004 	sub	lr, lr, #4
	STMFD	SP!, {LR}
      e8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	LDR	LR, =LPC_BASE_VIC
      ec:	e59fe398 	ldr	lr, [pc, #920]	; 48c <sb_align+0x34>
	LDR	LR, [LR, #0]
      f0:	e59ee000 	ldr	lr, [lr]
	CMP	LR, #ticksrc		@test if src is task tick or not
      f4:	e35e0010 	cmp	lr, #16
	BEQ	TaskMgr
      f8:	0a00000c 	beq	130 <TaskMgr>

	MRS	LR, SPSR		@ Save SPSR need to be saved for nested interrupt
      fc:	e14fe000 	mrs	lr, SPSR
	STMFD	SP!, {R0-R3,IP,LR}	@ Push scratch/used registers and SPSR
     100:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
	LDR	R0, =LPC_BASE_VIC	@ Get the ISR address pointed by VIC_VectAddr
     104:	e59f0380 	ldr	r0, [pc, #896]	; 48c <sb_align+0x34>
	LDR	R0, [R0, #VIC_Address]
     108:	e5900f00 	ldr	r0, [r0, #3840]	; 0xf00

	MSR	CPSR_c, #M_IRQ		@ Enter IRQ mode and enable Irq
     10c:	e321f012 	msr	CPSR_c, #18
	MOV	LR, PC
     110:	e1a0e00f 	mov	lr, pc
	BX	R0
     114:	e12fff10 	bx	r0

	MSR	CPSR_c, #M_IRQ | B_Irq	@ Enter IRQ mode and disable Irq
     118:	e321f092 	msr	CPSR_c, #146	; 0x92
	LDMFD	SP!, {R0-R3,IP,LR}	@ Restore scratch/used registers and SPSR
     11c:	e8bd500f 	pop	{r0, r1, r2, r3, ip, lr}
	MSR	SPSR, LR		@ Restore SPSR_irq
     120:	e169f00e 	msr	SPSR_fc, lr

	LDR	LR, =LPC_BASE_VIC	@ Issue EOI command to the VIC
     124:	e59fe360 	ldr	lr, [pc, #864]	; 48c <sb_align+0x34>
	STR	LR, [LR, #VIC_Address]
     128:	e58eef00 	str	lr, [lr, #3840]	; 0xf00

	LDMFD	SP!, {PC}^		@ Reruen from the IRQ handler
     12c:	e8fd8000 	ldm	sp!, {pc}^

00000130 <TaskMgr>:

.extern currentpr
TaskMgr:
	LDMFD	SP!, {LR}
     130:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	STMFD	SP!, {R0,R3}
     134:	e92d0009 	push	{r0, r3}
	LDR	R3, =currentpr		@get currentpr addr
     138:	e59f3350 	ldr	r3, [pc, #848]	; 490 <sb_align+0x38>
	LDR	R0, [R3, #0]		@currentpr points current process cell
     13c:	e5930000 	ldr	r0, [r3]

00000140 <savestatus>:
savestatus:				@this is pointer for currentprocess cell
	STR	LR, [R0, #8]		@write previous PC on current process
     140:	e580e008 	str	lr, [r0, #8]
	MOV	LR, R0
     144:	e1a0e000 	mov	lr, r0
	LDR	R0, [R0, #0]
     148:	e5900000 	ldr	r0, [r0]
	STR	R0, [R3, #0]		@renew currentpr
     14c:	e5830000 	str	r0, [r3]
	LDMFD	SP!, {R0,R3}
     150:	e8bd0009 	pop	{r0, r3}
	STR	R1, [LR, #16]
     154:	e58e1010 	str	r1, [lr, #16]
	STR	R2, [LR, #20]
     158:	e58e2014 	str	r2, [lr, #20]
	STR	R0, [LR, #12]
     15c:	e58e000c 	str	r0, [lr, #12]
	STR	R3, [LR, #24]
     160:	e58e3018 	str	r3, [lr, #24]
	STR	R4, [LR, #28]
     164:	e58e401c 	str	r4, [lr, #28]
	STR	R5, [LR, #32]
     168:	e58e5020 	str	r5, [lr, #32]
	STR	R6, [LR, #36]
     16c:	e58e6024 	str	r6, [lr, #36]	; 0x24
	STR	R7, [LR, #40]
     170:	e58e7028 	str	r7, [lr, #40]	; 0x28
	STR	R8, [LR, #44]
     174:	e58e802c 	str	r8, [lr, #44]	; 0x2c
	STR	R9, [LR, #48]
     178:	e58e9030 	str	r9, [lr, #48]	; 0x30
	STR	R10,[LR, #52]
     17c:	e58ea034 	str	sl, [lr, #52]	; 0x34
	STR	R11,[LR, #56]
     180:	e58eb038 	str	fp, [lr, #56]	; 0x38
	STR	R12,[LR, #60]
     184:	e58ec03c 	str	ip, [lr, #60]	; 0x3c
	MSR	CPSR_c, #M_SYS | B_Irq | B_Fiq
     188:	e321f0df 	msr	CPSR_c, #223	; 0xdf
	MOV	R12, SP
     18c:	e1a0c00d 	mov	ip, sp
	MOV	R11, LR
     190:	e1a0b00e 	mov	fp, lr
	MSR	CPSR_c, #M_IRQ | B_Irq | B_Fiq
     194:	e321f0d2 	msr	CPSR_c, #210	; 0xd2
	STR	R12,[LR, #64]
     198:	e58ec040 	str	ip, [lr, #64]	; 0x40
	STR	R11,[LR, #68]
     19c:	e58eb044 	str	fp, [lr, #68]	; 0x44

000001a0 <processchoice>:
processchoice:
	LDR	R0, [LR, #0]		@(next process adr)
     1a0:	e59e0000 	ldr	r0, [lr]
	MRS	LR, SPSR		@ Save SPSR need to be saved for nested interrupt
     1a4:	e14fe000 	mrs	lr, SPSR
	STMFD	SP!, {R0-R3,IP,LR}	@ Push scratch/used registers and SPSR
     1a8:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
	LDR	R0, =LPC_BASE_VIC	@ Get the ISR address pointed by VIC_VectAddr
     1ac:	e59f02d8 	ldr	r0, [pc, #728]	; 48c <sb_align+0x34>
	LDR	R0, [R0, #VIC_Address]
     1b0:	e5900f00 	ldr	r0, [r0, #3840]	; 0xf00

	MSR	CPSR_c, #M_IRQ		@ Enter IRQ mode and enable Irq
     1b4:	e321f012 	msr	CPSR_c, #18
	MOV	LR, PC
     1b8:	e1a0e00f 	mov	lr, pc
	BX	R0
     1bc:	e12fff10 	bx	r0
	LDMFD	SP!, {R0-R3,IP,LR}	@ Restore scratch/used registers and SPSR
     1c0:	e8bd500f 	pop	{r0, r1, r2, r3, ip, lr}
	MSR	CPSR_c, #M_IRQ | B_Irq | B_Fiq
     1c4:	e321f0d2 	msr	CPSR_c, #210	; 0xd2

	LDR	LR, [R0, #8]		@next process's PC
     1c8:	e590e008 	ldr	lr, [r0, #8]
	STMFD	SP!, {LR}
     1cc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)

000001d0 <getbackstatus>:
getbackstatus:
	LDR	R1, [R0, #16]
     1d0:	e5901010 	ldr	r1, [r0, #16]
	LDR	R2, [R0, #20]
     1d4:	e5902014 	ldr	r2, [r0, #20]
	LDR	R3, [R0, #24]
     1d8:	e5903018 	ldr	r3, [r0, #24]
	LDR	R4, [R0, #28]
     1dc:	e590401c 	ldr	r4, [r0, #28]
	LDR	R5, [R0, #32]
     1e0:	e5905020 	ldr	r5, [r0, #32]
	LDR	R6, [R0, #36]
     1e4:	e5906024 	ldr	r6, [r0, #36]	; 0x24
	LDR	R7, [R0, #40]
     1e8:	e5907028 	ldr	r7, [r0, #40]	; 0x28
	LDR	R8, [R0, #44]
     1ec:	e590802c 	ldr	r8, [r0, #44]	; 0x2c
	LDR	R9, [R0, #48]
     1f0:	e5909030 	ldr	r9, [r0, #48]	; 0x30
	LDR	R10,[R0, #52]
     1f4:	e590a034 	ldr	sl, [r0, #52]	; 0x34
	LDR	R11,[R0, #56]
     1f8:	e590b038 	ldr	fp, [r0, #56]	; 0x38
	LDR	R12,[R0, #60]
     1fc:	e590c03c 	ldr	ip, [r0, #60]	; 0x3c
	MSR	CPSR_c, #M_SYS
     200:	e321f01f 	msr	CPSR_c, #31
	LDR	R13,[R0, #64]
     204:	e590d040 	ldr	sp, [r0, #64]	; 0x40
	LDR	R0, [R0, #12]
     208:	e590000c 	ldr	r0, [r0, #12]
	MSR	CPSR_c, #M_IRQ
     20c:	e321f012 	msr	CPSR_c, #18
	LDR	LR, =LPC_BASE_VIC	@ Issue EOI command to the VIC
     210:	e59fe274 	ldr	lr, [pc, #628]	; 48c <sb_align+0x34>
	STR	LR, [LR, #VIC_Address]
     214:	e58eef00 	str	lr, [lr, #3840]	; 0xf00
	LDMFD	SP!, {PC}^
     218:	e8fd8000 	ldm	sp!, {pc}^

0000021c <FIQ_Handler>:
@-----------------------------------------------------------@

.section .text, "ax"
.arm
FIQ_Handler:
	SUB	LR, LR, #4		@ Adjust LR_fiq and push it
     21c:	e24ee004 	sub	lr, lr, #4
	STMFD	SP!, {LR}
     220:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)

	MRS	LR, SPSR		@ Save SPSR need to be saved for nested interrupt
     224:	e14fe000 	mrs	lr, SPSR
	STMFD	SP!, {R0-R3,IP,LR}	@ Push scratch/used registers and SPSR
     228:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
	LDR	R0, =LPC_BASE_VIC	@ Get the ISR address pointed by VIC_VectAddr
     22c:	e59f0258 	ldr	r0, [pc, #600]	; 48c <sb_align+0x34>
	LDR	R0, [R0, #VIC_Address]
     230:	e5900f00 	ldr	r0, [r0, #3840]	; 0xf00

	MOV	LR, PC
     234:	e1a0e00f 	mov	lr, pc
	BX	R0
     238:	e12fff10 	bx	r0

	MSR	CPSR_c, #M_FIQ | B_Fiq	@ Enter IRQ mode and disable Irq
     23c:	e321f051 	msr	CPSR_c, #81	; 0x51
	LDMFD	SP!, {R0-R3,IP,LR}	@ Restore scratch/used registers and SPSR
     240:	e8bd500f 	pop	{r0, r1, r2, r3, ip, lr}
	MSR	SPSR_cxsf, LR		@ Restore SPSR_irq
     244:	e16ff00e 	msr	SPSR_fsxc, lr

	LDR	LR, =LPC_BASE_VIC	@ Issue EOI command to the VIC
     248:	e59fe23c 	ldr	lr, [pc, #572]	; 48c <sb_align+0x34>
	STR	LR, [LR, #VIC_Address]
     24c:	e58eef00 	str	lr, [lr, #3840]	; 0xf00

	LDMFD	SP!, {PC}^		@ Reruen from the IRQ handler
     250:	e8fd8000 	ldm	sp!, {pc}^

00000254 <SWI_Handler>:


.section .text, "ax"
.arm
SWI_Handler:
	LDR	IP, [LR, #-4]		@ Get swi instruction code (assuming ARM state)
     254:	e51ec004 	ldr	ip, [lr, #-4]
	AND	IP, #0xFF		@ Get swi comment field (lower 8 bit)
     258:	e20cc0ff 	and	ip, ip, #255	; 0xff
	CMP	IP, #NUM_SWIs		@ Check range
     25c:	e35c0006 	cmp	ip, #6
	LDRLO	PC, [PC, IP, LSL #2]	@ Jump each service function when code is valid
     260:	379ff10c 	ldrcc	pc, [pc, ip, lsl #2]
	MOVS	PC, LR			@ Otherwise return
     264:	e1b0f00e 	movs	pc, lr
     268:	00000280 	.word	0x00000280
     26c:	00000290 	.word	0x00000290
     270:	000002a0 	.word	0x000002a0
     274:	000002b0 	.word	0x000002b0
     278:	000002c0 	.word	0x000002c0
     27c:	000002e4 	.word	0x000002e4

00000280 <IRQDisable>:
	.word	FIQEnable
	.word	ClearVect
	.word	RegVect

IRQDisable:
	MRS	R0, SPSR
     280:	e14f0000 	mrs	r0, SPSR
	ORR	R0, R0, #B_Irq
     284:	e3800080 	orr	r0, r0, #128	; 0x80
	MSR	SPSR_c, R0
     288:	e161f000 	msr	SPSR_c, r0
	MOVS	PC, LR
     28c:	e1b0f00e 	movs	pc, lr

00000290 <IRQEnable>:

IRQEnable:
	MRS	R0, SPSR
     290:	e14f0000 	mrs	r0, SPSR
	BIC	R0, R0, #B_Irq
     294:	e3c00080 	bic	r0, r0, #128	; 0x80
	MSR	SPSR_c, R0
     298:	e161f000 	msr	SPSR_c, r0
	MOVS	PC, LR
     29c:	e1b0f00e 	movs	pc, lr

000002a0 <FIQDisable>:

FIQDisable:
	MRS	R0, SPSR
     2a0:	e14f0000 	mrs	r0, SPSR
	ORR	R0, R0, #B_Fiq
     2a4:	e3800040 	orr	r0, r0, #64	; 0x40
	MSR	SPSR_c, R0
     2a8:	e161f000 	msr	SPSR_c, r0
	MOVS	PC, LR
     2ac:	e1b0f00e 	movs	pc, lr

000002b0 <FIQEnable>:

FIQEnable:
	MRS	R0, SPSR
     2b0:	e14f0000 	mrs	r0, SPSR
	BIC	R0, R0, #B_Fiq
     2b4:	e3c00040 	bic	r0, r0, #64	; 0x40
	MSR	SPSR_c, R0
     2b8:	e161f000 	msr	SPSR_c, r0
	MOVS	PC, LR
     2bc:	e1b0f00e 	movs	pc, lr

000002c0 <ClearVect>:

ClearVect:
	LDR	IP, =LPC_BASE_VIC
     2c0:	e59fc1c4 	ldr	ip, [pc, #452]	; 48c <sb_align+0x34>
	MVN	R0, #0				@ Disable all interrupts
     2c4:	e3e00000 	mvn	r0, #0
	STR	R0, [IP, #VIC_IntEnClear]
     2c8:	e58c0014 	str	r0, [ip, #20]
	MOV	R0, R0, LSR #16			@ Unmask all interrupt levels
     2cc:	e1a00820 	lsr	r0, r0, #16
	STR	R0, [IP, #VIC_SWPriorityMask]
     2d0:	e58c0024 	str	r0, [ip, #36]	; 0x24
	MOV	R0, #1				@ Enable protection
     2d4:	e3a00001 	mov	r0, #1
	STR	R0, [IP, #VIC_Protection]
     2d8:	e58c0020 	str	r0, [ip, #32]
	STR	R0, [IP, #VIC_Address]		@ Issule EOI command
     2dc:	e58c0f00 	str	r0, [ip, #3840]	; 0xf00
	MOVS	PC, LR
     2e0:	e1b0f00e 	movs	pc, lr

000002e4 <RegVect>:

RegVect:
@interrupt source:R0, Corresponding handler:R1, Priority:R2, Irq or Fiq:R3
	CMP	R0, #32				@ Range check
     2e4:	e3500020 	cmp	r0, #32
	MOVCSS	PC, LR
     2e8:	21b0f00e 	movscs	pc, lr
	LDR	IP, =(LPC_BASE_VIC+VIC_VectAddr0)
     2ec:	e59fc1a0 	ldr	ip, [pc, #416]	; 494 <sb_align+0x3c>
	STR	R1, [IP, R0, LSL #2]		@ Set VICVectVectAddr<n>
     2f0:	e78c1100 	str	r1, [ip, r0, lsl #2]
	LDR	IP, =(LPC_BASE_VIC+VIC_VectPriority0)
     2f4:	e59fc19c 	ldr	ip, [pc, #412]	; 498 <sb_align+0x40>
	STR	R2, [IP, R0, LSL #2]		@ Set VICVectPriority<n>
     2f8:	e78c2100 	str	r2, [ip, r0, lsl #2]
	MOV	R1, #1
     2fc:	e3a01001 	mov	r1, #1
	MOV	R1, R1, LSL R0
     300:	e1a01011 	lsl	r1, r1, r0
	LDR	IP, =LPC_BASE_VIC
     304:	e59fc180 	ldr	ip, [pc, #384]	; 48c <sb_align+0x34>
	LDR	R2, [IP, #VIC_IntSelect]	@ Set corresponding bit in the VICIntSelect
     308:	e59c200c 	ldr	r2, [ip, #12]
	BIC	R2, R1
     30c:	e1c22001 	bic	r2, r2, r1
	CMP	R3, #1
     310:	e3530001 	cmp	r3, #1
	ORREQ	R2, R1
     314:	01822001 	orreq	r2, r2, r1
	STR	R2, [IP, #VIC_IntSelect]
     318:	e58c200c 	str	r2, [ip, #12]
	STR	R1, [IP, #VIC_IntEnable]	@ Enable corresponding interrupt
     31c:	e58c1010 	str	r1, [ip, #16]
	MOVS	PC, LR
     320:	e1b0f00e 	movs	pc, lr

00000324 <IrqDisable>:

.global IrqDisable
IrqDisable:
	SWI	SWI_IRQ_DIS
     324:	ef000000 	svc	0x00000000
	BX	LR
     328:	e12fff1e 	bx	lr

0000032c <IrqEnable>:

.global IrqEnable
IrqEnable:
	SWI	SWI_IRQ_EN
     32c:	ef000001 	svc	0x00000001
	BX	LR
     330:	e12fff1e 	bx	lr

00000334 <FiqDisable>:

.global FiqDisable
FiqDisable:
	SWI	SWI_FIQ_DIS
     334:	ef000002 	svc	0x00000002
	BX	LR
     338:	e12fff1e 	bx	lr

0000033c <FiqEnable>:

.global FiqEnable
FiqEnable:
	SWI	SWI_FIQ_EN
     33c:	ef000003 	svc	0x00000003
	BX	LR
     340:	e12fff1e 	bx	lr

00000344 <ClearVector>:

.global ClearVector
ClearVector:
	SWI	SWI_CLR_VECT
     344:	ef000004 	svc	0x00000004
	BX	LR
     348:	e12fff1e 	bx	lr

0000034c <RegisterVector>:

.global RegisterVector
RegisterVector:
	SWI	SWI_REG_VECT
     34c:	ef000005 	svc	0x00000005
	BX	LR
     350:	e12fff1e 	bx	lr

00000354 <Load_Block>:
@-----------------------------------------------------------@

.global Load_Block
.arm
Load_Block:
	STMFD	SP!, {R4-R8}
     354:	e92d01f0 	push	{r4, r5, r6, r7, r8}
	ANDS	IP, R1, #3
     358:	e211c003 	ands	ip, r1, #3
	BEQ	lb_align
     35c:	0a000012 	beq	3ac <lb_align>

	BIC	R1, #3
     360:	e3c11003 	bic	r1, r1, #3
	MOV	IP, IP, LSL #3
     364:	e1a0c18c 	lsl	ip, ip, #3
	RSB	R8, IP, #32
     368:	e26c8020 	rsb	r8, ip, #32
	LDMIA	R1!, {R7}
     36c:	e8b10080 	ldm	r1!, {r7}

00000370 <lb_l1>:
lb_l1:	MOV	R3, R7
     370:	e1a03007 	mov	r3, r7
	LDMIA	R1!, {R4-R7}
     374:	e8b100f0 	ldm	r1!, {r4, r5, r6, r7}
	MOV	R3, R3, LSR IP
     378:	e1a03c33 	lsr	r3, r3, ip
	ORR	R3, R3, R4, LSL R8
     37c:	e1833814 	orr	r3, r3, r4, lsl r8
	MOV	R4, R4, LSR IP
     380:	e1a04c34 	lsr	r4, r4, ip
	ORR	R4, R4, R5, LSL R8
     384:	e1844815 	orr	r4, r4, r5, lsl r8
	MOV	R5, R5, LSR IP
     388:	e1a05c35 	lsr	r5, r5, ip
	ORR	R5, R5, R6, LSL R8
     38c:	e1855816 	orr	r5, r5, r6, lsl r8
	MOV	R6, R6, LSR IP
     390:	e1a06c36 	lsr	r6, r6, ip
	ORR	R6, R6, R7, LSL R8
     394:	e1866817 	orr	r6, r6, r7, lsl r8
	SUBS	R2, R2, #16
     398:	e2522010 	subs	r2, r2, #16
	STMIA	R0!, {R3-R6}
     39c:	e8a00078 	stmia	r0!, {r3, r4, r5, r6}
	BNE	lb_l1
     3a0:	1afffff2 	bne	370 <lb_l1>
	LDMFD	SP!, {R4-R8}
     3a4:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
	BX	LR
     3a8:	e12fff1e 	bx	lr

000003ac <lb_align>:

lb_align:
	LDMIA	R1!, {R3-R6}
     3ac:	e8b10078 	ldm	r1!, {r3, r4, r5, r6}
	SUBS	R2, R2, #16
     3b0:	e2522010 	subs	r2, r2, #16
	STMIA	R0!, {R3-R6}
     3b4:	e8a00078 	stmia	r0!, {r3, r4, r5, r6}
	BNE	lb_align
     3b8:	1afffffb 	bne	3ac <lb_align>
	LDMFD	SP!, {R4-R8}
     3bc:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
	BX	LR
     3c0:	e12fff1e 	bx	lr

000003c4 <Store_Block>:


.global Store_Block
.arm
Store_Block:
	STMFD	SP!, {R4-R8}
     3c4:	e92d01f0 	push	{r4, r5, r6, r7, r8}
	ANDS	IP, R0, #3
     3c8:	e210c003 	ands	ip, r0, #3
	BEQ	sb_align
     3cc:	0a000021 	beq	458 <sb_align>

	MOV	IP, IP, LSL #3
     3d0:	e1a0c18c 	lsl	ip, ip, #3
	RSB	R8, IP, #32
     3d4:	e26c8020 	rsb	r8, ip, #32

	LDMIA	R1!, {R4-R7}
     3d8:	e8b100f0 	ldm	r1!, {r4, r5, r6, r7}

000003dc <sb_p1>:
sb_p1:	STRB	R4, [R0], #1
     3dc:	e4c04001 	strb	r4, [r0], #1
	MOV	R4, R4, LSR #8
     3e0:	e1a04424 	lsr	r4, r4, #8
	TST	R0, #3
     3e4:	e3100003 	tst	r0, #3
	BNE	sb_p1
     3e8:	1afffffb 	bne	3dc <sb_p1>
	ORR	R4, R4, R5, LSL IP
     3ec:	e1844c15 	orr	r4, r4, r5, lsl ip
	MOV	R5, R5, LSR R8
     3f0:	e1a05835 	lsr	r5, r5, r8
	ORR	R5, R5, R6, LSL IP
     3f4:	e1855c16 	orr	r5, r5, r6, lsl ip
	MOV	R6, R6, LSR R8
     3f8:	e1a06836 	lsr	r6, r6, r8
	ORR	R6, R6, R7, LSL IP
     3fc:	e1866c17 	orr	r6, r6, r7, lsl ip
	SUBS	R2, R2, #16
     400:	e2522010 	subs	r2, r2, #16
	STMIA	R0!, {R4-R6}
     404:	e8a00070 	stmia	r0!, {r4, r5, r6}

00000408 <sb_l1>:

sb_l1:	MOV	R3, R7
     408:	e1a03007 	mov	r3, r7
	LDMIA	R1!, {R4-R7}
     40c:	e8b100f0 	ldm	r1!, {r4, r5, r6, r7}
	MOV	R3, R3, LSR R8
     410:	e1a03833 	lsr	r3, r3, r8
	ORR	R3, R3, R4, LSL IP
     414:	e1833c14 	orr	r3, r3, r4, lsl ip
	MOV	R4, R4, LSR R8
     418:	e1a04834 	lsr	r4, r4, r8
	ORR	R4, R4, R5, LSL IP
     41c:	e1844c15 	orr	r4, r4, r5, lsl ip
	MOV	R5, R5, LSR R8
     420:	e1a05835 	lsr	r5, r5, r8
	ORR	R5, R5, R6, LSL IP
     424:	e1855c16 	orr	r5, r5, r6, lsl ip
	MOV	R6, R6, LSR R8
     428:	e1a06836 	lsr	r6, r6, r8
	ORR	R6, R6, R7, LSL IP
     42c:	e1866c17 	orr	r6, r6, r7, lsl ip
	SUBS	R2, R2, #16
     430:	e2522010 	subs	r2, r2, #16
	STMIA	R0!, {R3-R6}
     434:	e8a00078 	stmia	r0!, {r3, r4, r5, r6}
	BNE	sb_l1
     438:	1afffff2 	bne	408 <sb_l1>

	MOV	R7, R7, LSR R8
     43c:	e1a07837 	lsr	r7, r7, r8

00000440 <sb_p2>:
sb_p2:	SUBS	IP, IP, #8
     440:	e25cc008 	subs	ip, ip, #8
	STRB	R7, [R0], #1
     444:	e4c07001 	strb	r7, [r0], #1
	MOV	R7, R7, LSR #8
     448:	e1a07427 	lsr	r7, r7, #8
	BNE	sb_p2
     44c:	1afffffb 	bne	440 <sb_p2>

	LDMFD	SP!, {R4-R8}
     450:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
	BX	LR
     454:	e12fff1e 	bx	lr

00000458 <sb_align>:

sb_align:
	LDMIA	R1!, {R3-R6}
     458:	e8b10078 	ldm	r1!, {r3, r4, r5, r6}
	SUBS	R2, #16
     45c:	e2522010 	subs	r2, r2, #16
	STMIA	R0!, {R3-R6}
     460:	e8a00078 	stmia	r0!, {r3, r4, r5, r6}
	BNE	sb_align
     464:	1afffffb 	bne	458 <sb_align>
	LDMFD	SP!, {R4-R8}
     468:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
	BX	LR
     46c:	e12fff1e 	bx	lr
     470:	40001430 	.word	0x40001430
     474:	00003474 	.word	0x00003474
     478:	40000000 	.word	0x40000000
     47c:	40000840 	.word	0x40000840
     480:	40000840 	.word	0x40000840
     484:	4000092c 	.word	0x4000092c
     488:	000005f4 	.word	0x000005f4
     48c:	fffff000 	.word	0xfffff000
     490:	40000878 	.word	0x40000878
     494:	fffff100 	.word	0xfffff100
     498:	fffff200 	.word	0xfffff200

0000049c <TIMER0_handler>:
		}
	}
	return ret;
}
void TIMER0_handler (void)
{
     49c:	e92d4008 	push	{r3, lr}
	FIO1PIN ^=0x00040000;
     4a0:	e59f3024 	ldr	r3, [pc, #36]	; 4cc <TIMER0_handler+0x30>
     4a4:	e5132fcb 	ldr	r2, [r3, #-4043]	; 0xfffff035
     4a8:	e2222701 	eor	r2, r2, #262144	; 0x40000
     4ac:	e5032fcb 	str	r2, [r3, #-4043]	; 0xfffff035
	printf("1");
     4b0:	e3a00031 	mov	r0, #49	; 0x31
     4b4:	eb00018c 	bl	aec <putchar>
	T0IR = 1;
     4b8:	e59f3010 	ldr	r3, [pc, #16]	; 4d0 <TIMER0_handler+0x34>
     4bc:	e3a02001 	mov	r2, #1
     4c0:	e5832000 	str	r2, [r3]
}
     4c4:	e8bd4008 	pop	{r3, lr}
     4c8:	e12fff1e 	bx	lr
     4cc:	3fffcfff 	.word	0x3fffcfff
     4d0:	e0004000 	.word	0xe0004000

000004d4 <UARTint>:
	return 1;
}
void UARTint (void)
{
  DWORD Fdiv = 0;
  U0LCR = 0x83;			/* 8 bits, no Parity, 1 Stop bit */
     4d4:	e59f3028 	ldr	r3, [pc, #40]	; 504 <UARTint+0x30>
     4d8:	e3a02083 	mov	r2, #131	; 0x83
     4dc:	e583200c 	str	r2, [r3, #12]
  Fdiv = (Fpclk / 16) / UART_BAUD;	/*baud rate */
  U0DLM = Fdiv / 256;
     4e0:	e3a02000 	mov	r2, #0
     4e4:	e5832004 	str	r2, [r3, #4]
  U0DLL = Fdiv % 256;
     4e8:	e2822013 	add	r2, r2, #19
     4ec:	e5832000 	str	r2, [r3]
  U0LCR = 0x03;			/* DLAB = 0 */
     4f0:	e3a02003 	mov	r2, #3
     4f4:	e583200c 	str	r2, [r3, #12]
  U0FCR = 0x07;			/* Enable and reset TX and RX FIFO. */
     4f8:	e2822004 	add	r2, r2, #4
     4fc:	e5832008 	str	r2, [r3, #8]
}
     500:	e12fff1e 	bx	lr
     504:	e000c000 	.word	0xe000c000

00000508 <Delay>:

void Delay(volatile unsigned long nCount)
{
     508:	e24dd008 	sub	sp, sp, #8
     50c:	e58d0004 	str	r0, [sp, #4]
	for(; nCount != 0; nCount--);
     510:	ea000002 	b	520 <Delay+0x18>
     514:	e59d3004 	ldr	r3, [sp, #4]
     518:	e2433001 	sub	r3, r3, #1
     51c:	e58d3004 	str	r3, [sp, #4]
     520:	e59d3004 	ldr	r3, [sp, #4]
     524:	e3530000 	cmp	r3, #0
     528:	1afffff9 	bne	514 <Delay+0xc>
}
     52c:	e28dd008 	add	sp, sp, #8
     530:	e12fff1e 	bx	lr

00000534 <func1>:
	while (1){
		Delay(18888);
		printf ("hofg\n");
	}
}
void func1(void){
     534:	e92d4008 	push	{r3, lr}
	while (1){
		Delay(18888);
     538:	e59f000c 	ldr	r0, [pc, #12]	; 54c <func1+0x18>
     53c:	ebfffff1 	bl	508 <Delay>
		printf ("aaag\n");
     540:	e59f0008 	ldr	r0, [pc, #8]	; 550 <func1+0x1c>
     544:	eb00019a 	bl	bb4 <puts>
     548:	eafffffa 	b	538 <func1+0x4>
     54c:	000049c8 	.word	0x000049c8
     550:	00003440 	.word	0x00003440

00000554 <func>:
	VICIntSelect |= 1<<sourcenum;
	VICIntEnable |= 1<<sourcenum;
	RegisterVector(sourcenum, handler, PRI_LOWEST, CLASS_IRQ);
	FiqEnable();
}
void func(void){
     554:	e92d4008 	push	{r3, lr}
	while (1){
		Delay(18888);
     558:	e59f000c 	ldr	r0, [pc, #12]	; 56c <func+0x18>
     55c:	ebffffe9 	bl	508 <Delay>
		printf ("hofg\n");
     560:	e59f0008 	ldr	r0, [pc, #8]	; 570 <func+0x1c>
     564:	eb000192 	bl	bb4 <puts>
     568:	eafffffa 	b	558 <func+0x4>
     56c:	000049c8 	.word	0x000049c8
     570:	00003445 	.word	0x00003445

00000574 <timer0setup>:
	ymzwrite1(0xF,0x8);
	ymzwrite1(0xFe,0x7);
}
void timer0setup(void)
{
	T0PR = 0x00000000;
     574:	e59f3020 	ldr	r3, [pc, #32]	; 59c <timer0setup+0x28>
     578:	e3a02000 	mov	r2, #0
     57c:	e583200c 	str	r2, [r3, #12]
	/*  *TIMER0_MatchRegister0       = 0x00080000; */
	T0MR0 = 0x00080000;
     580:	e2822702 	add	r2, r2, #524288	; 0x80000
     584:	e5832018 	str	r2, [r3, #24]
	T0MCR = 0x00000003;      /* Match時にTCクリア & 割り込み */
     588:	e3a02003 	mov	r2, #3
     58c:	e5832014 	str	r2, [r3, #20]
	T0TCR = 1;
     590:	e3a02001 	mov	r2, #1
     594:	e5832004 	str	r2, [r3, #4]
}
     598:	e12fff1e 	bx	lr
     59c:	e0004000 	.word	0xe0004000

000005a0 <irqregist>:
	T1MR0 = 0x00080300;
	T1MCR = 0x00000003;      /* Match時にTCクリア & 割り込み */
	T1TCR = 1;
}
void irqregist(char sourcenum,void*handler)
{
     5a0:	e92d4038 	push	{r3, r4, r5, lr}
     5a4:	e1a04000 	mov	r4, r0
     5a8:	e1a05001 	mov	r5, r1
	IrqDisable();
     5ac:	ebffff5c 	bl	324 <IrqDisable>
	//Use IRQ
	VICIntSelect &= ~(1<<sourcenum);
     5b0:	e3a02001 	mov	r2, #1
     5b4:	e1a02412 	lsl	r2, r2, r4
     5b8:	e3e03000 	mvn	r3, #0
     5bc:	e5131ff3 	ldr	r1, [r3, #-4083]	; 0xfffff00d
     5c0:	e1c11002 	bic	r1, r1, r2
     5c4:	e5031ff3 	str	r1, [r3, #-4083]	; 0xfffff00d
	VICIntEnable |= 1<<sourcenum;
     5c8:	e5131fef 	ldr	r1, [r3, #-4079]	; 0xfffff011
     5cc:	e1822001 	orr	r2, r2, r1
     5d0:	e5032fef 	str	r2, [r3, #-4079]	; 0xfffff011
	RegisterVector(sourcenum, handler, PRI_LOWEST, CLASS_IRQ);
     5d4:	e1a00004 	mov	r0, r4
     5d8:	e1a01005 	mov	r1, r5
     5dc:	e3a0200f 	mov	r2, #15
     5e0:	e2833001 	add	r3, r3, #1
     5e4:	ebffff58 	bl	34c <RegisterVector>
	IrqEnable();
     5e8:	ebffff4f 	bl	32c <IrqEnable>
}
     5ec:	e8bd4038 	pop	{r3, r4, r5, lr}
     5f0:	e12fff1e 	bx	lr

000005f4 <main>:
		Delay(18888);
		printf ("aaag\n");
	}
}
int main(void)
{
     5f4:	e92d4008 	push	{r3, lr}
	SCS = SCS | 1;
     5f8:	e59f3088 	ldr	r3, [pc, #136]	; 688 <main+0x94>
     5fc:	e59321a0 	ldr	r2, [r3, #416]	; 0x1a0
     600:	e3822001 	orr	r2, r2, #1
     604:	e58321a0 	str	r2, [r3, #416]	; 0x1a0

	TargetResetInit();
     608:	eb0000cc 	bl	940 <TargetResetInit>
	GPIOResetInit();
     60c:	eb000055 	bl	768 <GPIOResetInit>
	UARTint();
     610:	ebffffaf 	bl	4d4 <UARTint>
	FIO2DIR1 =2;
     614:	e59f3070 	ldr	r3, [pc, #112]	; 68c <main+0x98>
	FIO1DIR =0x00040000;
	FIO1PIN =0x00000000;
     618:	e3a01000 	mov	r1, #0
	SCS = SCS | 1;

	TargetResetInit();
	GPIOResetInit();
	UARTint();
	FIO2DIR1 =2;
     61c:	e3a00002 	mov	r0, #2
	FIO1DIR =0x00040000;
     620:	e3a02701 	mov	r2, #262144	; 0x40000
	SCS = SCS | 1;

	TargetResetInit();
	GPIOResetInit();
	UARTint();
	FIO2DIR1 =2;
     624:	e54300be 	strb	r0, [r3, #-190]	; 0xffffff42
	FIO1DIR =0x00040000;
     628:	e50320df 	str	r2, [r3, #-223]	; 0xffffff21
	FIO1PIN =0x00000000;
     62c:	e50310cb 	str	r1, [r3, #-203]	; 0xffffff35
	FIO1MASK=0x00000000;
	zeropr.status = 0;
	zeropr.p.pid  = 0;
	zeropr.p.pc   = (void *)func;
     630:	e59f2058 	ldr	r2, [pc, #88]	; 690 <main+0x9c>
	GPIOResetInit();
	UARTint();
	FIO2DIR1 =2;
	FIO1DIR =0x00040000;
	FIO1PIN =0x00000000;
	FIO1MASK=0x00000000;
     634:	e50310cf 	str	r1, [r3, #-207]	; 0xffffff31
	zeropr.status = 0;
     638:	e59f3054 	ldr	r3, [pc, #84]	; 694 <main+0xa0>
	zeropr.p.pid  = 0;
	zeropr.p.pc   = (void *)func;
     63c:	e5832008 	str	r2, [r3, #8]
	zeropr.next   = &onepr;
     640:	e59f2050 	ldr	r2, [pc, #80]	; 698 <main+0xa4>
	UARTint();
	FIO2DIR1 =2;
	FIO1DIR =0x00040000;
	FIO1PIN =0x00000000;
	FIO1MASK=0x00000000;
	zeropr.status = 0;
     644:	e5831050 	str	r1, [r3, #80]	; 0x50
	zeropr.p.pid  = 0;
     648:	e5831004 	str	r1, [r3, #4]
	zeropr.p.pc   = (void *)func;
	zeropr.next   = &onepr;
	currentpr     = &zeropr;
	onepr.status = 0;
     64c:	e5821050 	str	r1, [r2, #80]	; 0x50
	onepr.p.pid  = 2;
	onepr.p.pc   = (void *)func1;
     650:	e59f1044 	ldr	r1, [pc, #68]	; 69c <main+0xa8>
	FIO1MASK=0x00000000;
	zeropr.status = 0;
	zeropr.p.pid  = 0;
	zeropr.p.pc   = (void *)func;
	zeropr.next   = &onepr;
	currentpr     = &zeropr;
     654:	e59fc044 	ldr	ip, [pc, #68]	; 6a0 <main+0xac>
	onepr.status = 0;
	onepr.p.pid  = 2;
     658:	e9820003 	stmib	r2, {r0, r1}
	FIO1PIN =0x00000000;
	FIO1MASK=0x00000000;
	zeropr.status = 0;
	zeropr.p.pid  = 0;
	zeropr.p.pc   = (void *)func;
	zeropr.next   = &onepr;
     65c:	e5832000 	str	r2, [r3]
	currentpr     = &zeropr;
	onepr.status = 0;
	onepr.p.pid  = 2;
	onepr.p.pc   = (void *)func1;
	onepr.next   = &zeropr;
     660:	e5823000 	str	r3, [r2]
	printf("hy,hello world!\n");
     664:	e59f0038 	ldr	r0, [pc, #56]	; 6a4 <main+0xb0>
	FIO1MASK=0x00000000;
	zeropr.status = 0;
	zeropr.p.pid  = 0;
	zeropr.p.pc   = (void *)func;
	zeropr.next   = &onepr;
	currentpr     = &zeropr;
     668:	e58c3000 	str	r3, [ip]
	onepr.status = 0;
	onepr.p.pid  = 2;
	onepr.p.pc   = (void *)func1;
	onepr.next   = &zeropr;
	printf("hy,hello world!\n");
     66c:	eb000150 	bl	bb4 <puts>
	//ymzinit();
	//ymzwrite0(0x6ff,0);
	//i2enable();
	irqregist(TIMER0_INT,TIMER0_handler);
     670:	e3a00004 	mov	r0, #4
     674:	e59f102c 	ldr	r1, [pc, #44]	; 6a8 <main+0xb4>
     678:	ebffffc8 	bl	5a0 <irqregist>
	timer0setup();
     67c:	ebffffbc 	bl	574 <timer0setup>
	func();
     680:	ebffffb3 	bl	554 <func>
     684:	eafffffe 	b	684 <main+0x90>
     688:	e01fc000 	.word	0xe01fc000
     68c:	3fffc0ff 	.word	0x3fffc0ff
     690:	00000554 	.word	0x00000554
     694:	400008d0 	.word	0x400008d0
     698:	4000087c 	.word	0x4000087c
     69c:	00000534 	.word	0x00000534
     6a0:	40000878 	.word	0x40000878
     6a4:	0000345a 	.word	0x0000345a
     6a8:	0000049c 	.word	0x0000049c

000006ac <i2enable>:
Problem	:
****************************************************************************/
void
i2enable ()
{
  PINMODE0 = 0x00000000;
     6ac:	e59f3008 	ldr	r3, [pc, #8]	; 6bc <i2enable+0x10>
     6b0:	e3a02000 	mov	r2, #0
     6b4:	e5832040 	str	r2, [r3, #64]	; 0x40
}
     6b8:	e12fff1e 	bx	lr
     6bc:	e002c000 	.word	0xe002c000

000006c0 <UARTPutch>:
** Returned value:		None
** 
*****************************************************************************/
void UARTPutch( DWORD portNum, BYTE charactor)
{
	if ( portNum == 0 )
     6c0:	e3500000 	cmp	r0, #0
     6c4:	1a000004 	bne	6dc <UARTPutch+0x1c>
		if (charactor== '\n') {
		while (!(U0LSR & 0x20));
		U0THR = '\r';
		}
*/
		while (!(U0LSR & 0x20));
     6c8:	e59f3024 	ldr	r3, [pc, #36]	; 6f4 <UARTPutch+0x34>
     6cc:	e5932014 	ldr	r2, [r3, #20]
     6d0:	e3120020 	tst	r2, #32
     6d4:	0afffffb 	beq	6c8 <UARTPutch+0x8>
     6d8:	ea000003 	b	6ec <UARTPutch+0x2c>
		if (charactor== '\n') {
		while (!(U1LSR & 0x20));
		U1THR = '\r';
		}
*/
		while (!(U1LSR & 0x20));
     6dc:	e59f3014 	ldr	r3, [pc, #20]	; 6f8 <UARTPutch+0x38>
     6e0:	e5932014 	ldr	r2, [r3, #20]
     6e4:	e3120020 	tst	r2, #32
     6e8:	0afffffb 	beq	6dc <UARTPutch+0x1c>
		U1THR = charactor;
     6ec:	e5831000 	str	r1, [r3]
     6f0:	e12fff1e 	bx	lr
     6f4:	e000c000 	.word	0xe000c000
     6f8:	e0010000 	.word	0xe0010000

000006fc <UARTGetch>:
char UARTGetch (DWORD portNum)
{
#ifdef BUFFERING_UART
    int c;
#endif
	if ( portNum == 0 )
     6fc:	e3500000 	cmp	r0, #0
     700:	1a000006 	bne	720 <UARTGetch+0x24>
		}
		else {
			return FALSE;
		}
#else
		while (!(U0LSR & 0x01));
     704:	e59f3030 	ldr	r3, [pc, #48]	; 73c <UARTGetch+0x40>
     708:	e5932014 	ldr	r2, [r3, #20]
     70c:	e3120001 	tst	r2, #1
     710:	0afffffb 	beq	704 <UARTGetch+0x8>
		return (U0RBR);
     714:	e5930000 	ldr	r0, [r3]
     718:	e20000ff 	and	r0, r0, #255	; 0xff
     71c:	e12fff1e 	bx	lr
		}
		else {
			return FALSE;
		}
#else
		while (!(U1LSR & 0x01));
     720:	e59f3018 	ldr	r3, [pc, #24]	; 740 <UARTGetch+0x44>
     724:	e5932014 	ldr	r2, [r3, #20]
     728:	e3120001 	tst	r2, #1
     72c:	0afffffb 	beq	720 <UARTGetch+0x24>
		return (U1RBR);
     730:	e5930000 	ldr	r0, [r3]
     734:	e20000ff 	and	r0, r0, #255	; 0xff
#endif
	}
}
     738:	e12fff1e 	bx	lr
     73c:	e000c000 	.word	0xe000c000
     740:	e0010000 	.word	0xe0010000

00000744 <TargetInit>:
** parameters:			None
** Returned value:		None
** 
******************************************************************************/
void TargetInit(void)
{
     744:	e92d4008 	push	{r3, lr}
    /* Add your codes here */
    i2enable();
     748:	ebffffd7 	bl	6ac <i2enable>
    PCONP |= 0x00001000;
     74c:	e59f3010 	ldr	r3, [pc, #16]	; 764 <TargetInit+0x20>
     750:	e59320c4 	ldr	r2, [r3, #196]	; 0xc4
     754:	e3822a01 	orr	r2, r2, #4096	; 0x1000
     758:	e58320c4 	str	r2, [r3, #196]	; 0xc4
    return;
}
     75c:	e8bd4008 	pop	{r3, lr}
     760:	e12fff1e 	bx	lr
     764:	e01fc000 	.word	0xe01fc000

00000768 <GPIOResetInit>:
** 
******************************************************************************/
void GPIOResetInit( void )
{
	/* Reset all GPIO pins to default: primary function */
    PINSEL0 = 0x0FA00050;
     768:	e59f20c0 	ldr	r2, [pc, #192]	; 830 <USR_Stack_Size+0x30>
     76c:	e59f30c0 	ldr	r3, [pc, #192]	; 834 <USR_Stack_Size+0x34>
     770:	e5823000 	str	r3, [r2]
    PINSEL1 = 0x00154000;
     774:	e3a03955 	mov	r3, #1392640	; 0x154000
     778:	e5823004 	str	r3, [r2, #4]
    PINSEL2 = 0x00000000;
    PINSEL3 = 0xF0000000;
     77c:	e3a0120f 	mov	r1, #-268435456	; 0xf0000000
void GPIOResetInit( void )
{
	/* Reset all GPIO pins to default: primary function */
    PINSEL0 = 0x0FA00050;
    PINSEL1 = 0x00154000;
    PINSEL2 = 0x00000000;
     780:	e2433955 	sub	r3, r3, #1392640	; 0x154000
     784:	e5823008 	str	r3, [r2, #8]
    PINSEL3 = 0xF0000000;
     788:	e582100c 	str	r1, [r2, #12]
    PINSEL4 = 0x00000000;
     78c:	e5823010 	str	r3, [r2, #16]
    PINSEL5 = 0x00000000;
     790:	e5823014 	str	r3, [r2, #20]
    PINSEL6 = 0x00000000;
     794:	e5823018 	str	r3, [r2, #24]
    PINSEL7 = 0x00000000;
     798:	e582301c 	str	r3, [r2, #28]
    PINSEL8 = 0x00000000;
     79c:	e5823020 	str	r3, [r2, #32]
    PINSEL9 = 0x00000000;
     7a0:	e5823024 	str	r3, [r2, #36]	; 0x24
   PINSEL10 = 0x00000000;
     7a4:	e5823028 	str	r3, [r2, #40]	; 0x28
    
     IODIR0 = 0x00000000;
     7a8:	e2422901 	sub	r2, r2, #16384	; 0x4000
     7ac:	e5823008 	str	r3, [r2, #8]
     IOSET0 = 0x00000000;
     IOSET1 = 0x00000000;
    
    FIO0DIR = 0x00000000;
    FIO1DIR = 0x00000000;
    FIO2DIR = 0x00000201;
     7b0:	e59f1080 	ldr	r1, [pc, #128]	; 838 <USR_Stack_Size+0x38>
    PINSEL8 = 0x00000000;
    PINSEL9 = 0x00000000;
   PINSEL10 = 0x00000000;
    
     IODIR0 = 0x00000000;
     IODIR1 = 0x00000000;
     7b4:	e5823018 	str	r3, [r2, #24]
     IOSET0 = 0x00000000;
     7b8:	e5823004 	str	r3, [r2, #4]
     IOSET1 = 0x00000000;
     7bc:	e5823014 	str	r3, [r2, #20]
    
    FIO0DIR = 0x00000000;
     7c0:	e59f2074 	ldr	r2, [pc, #116]	; 83c <USR_Stack_Size+0x3c>
     7c4:	e5023fff 	str	r3, [r2, #-4095]	; 0xfffff001
    FIO1DIR = 0x00000000;
     7c8:	e5023fdf 	str	r3, [r2, #-4063]	; 0xfffff021
    FIO2DIR = 0x00000201;
     7cc:	e5021fbf 	str	r1, [r2, #-4031]	; 0xfffff041
    FIO3DIR = 0x00000000;
    FIO4DIR = 0x0000FFFF;
     7d0:	e59f1068 	ldr	r1, [pc, #104]	; 840 <USR_Stack_Size+0x40>
     IOSET1 = 0x00000000;
    
    FIO0DIR = 0x00000000;
    FIO1DIR = 0x00000000;
    FIO2DIR = 0x00000201;
    FIO3DIR = 0x00000000;
     7d4:	e5023f9f 	str	r3, [r2, #-3999]	; 0xfffff061
    FIO4DIR = 0x0000FFFF;
     7d8:	e5021f7f 	str	r1, [r2, #-3967]	; 0xfffff081
    
	FIO0MASK = 0x00000000;
     7dc:	e5023fef 	str	r3, [r2, #-4079]	; 0xfffff011
	FIO0PIN = 0x00000000;
     7e0:	e5023feb 	str	r3, [r2, #-4075]	; 0xfffff015
	FIO0SET = 0x00000000;
     7e4:	e5023fe7 	str	r3, [r2, #-4071]	; 0xfffff019
	FIO0CLR = 0x00000000;
     7e8:	e5023fe3 	str	r3, [r2, #-4067]	; 0xfffff01d
	
	FIO1MASK = 0x00000000;
     7ec:	e5023fcf 	str	r3, [r2, #-4047]	; 0xfffff031
	FIO1PIN = 0x00000000;
     7f0:	e5023fcb 	str	r3, [r2, #-4043]	; 0xfffff035
	FIO1SET = 0x00000000;
     7f4:	e5023fc7 	str	r3, [r2, #-4039]	; 0xfffff039
	FIO1CLR = 0x00000000;
     7f8:	e5023fc3 	str	r3, [r2, #-4035]	; 0xfffff03d
	
	FIO2MASK = 0x00000000;
     7fc:	e5023faf 	str	r3, [r2, #-4015]	; 0xfffff051
	FIO2PIN = 0x00000000;
     800:	e5023fab 	str	r3, [r2, #-4011]	; 0xfffff055
	FIO2SET = 0x00000000;
     804:	e5023fa7 	str	r3, [r2, #-4007]	; 0xfffff059
	FIO2CLR = 0x00000000;
     808:	e5023fa3 	str	r3, [r2, #-4003]	; 0xfffff05d

	FIO3MASK = 0x00000000;
     80c:	e5023f8f 	str	r3, [r2, #-3983]	; 0xfffff071
	FIO3PIN = 0x00000000;
     810:	e5023f8b 	str	r3, [r2, #-3979]	; 0xfffff075
	FIO3SET = 0x00000000;
     814:	e5023f87 	str	r3, [r2, #-3975]	; 0xfffff079
	FIO3CLR = 0x00000000;
     818:	e5023f83 	str	r3, [r2, #-3971]	; 0xfffff07d
	
	FIO4MASK = 0x00000000;
     81c:	e5023f6f 	str	r3, [r2, #-3951]	; 0xfffff091
	FIO4PIN = 0x00000000;
     820:	e5023f6b 	str	r3, [r2, #-3947]	; 0xfffff095
	FIO4SET = 0x00000000;
     824:	e5023f67 	str	r3, [r2, #-3943]	; 0xfffff099
	FIO4CLR = 0x00000000;
     828:	e5023f63 	str	r3, [r2, #-3939]	; 0xfffff09d
	
    return;        
}
     82c:	e12fff1e 	bx	lr
     830:	e002c000 	.word	0xe002c000
     834:	0fa00050 	.word	0x0fa00050
     838:	00000201 	.word	0x00000201
     83c:	3fffcfff 	.word	0x3fffcfff
     840:	0000ffff 	.word	0x0000ffff

00000844 <ConfigurePLL>:
******************************************************************************/
void ConfigurePLL ( void )
{
	DWORD MValue, NValue;

	if ( PLLSTAT & (1 << 25) )
     844:	e59f30f0 	ldr	r3, [pc, #240]	; 93c <ConfigurePLL+0xf8>
     848:	e5932088 	ldr	r2, [r3, #136]	; 0x88
     84c:	e3120402 	tst	r2, #33554432	; 0x2000000
     850:	0a000005 	beq	86c <ConfigurePLL+0x28>
    {
		PLLCON = 1;			/* Enable PLL, disconnected */
     854:	e3a02001 	mov	r2, #1
     858:	e5832080 	str	r2, [r3, #128]	; 0x80
	 	PLLFEED = 0xaa;
     85c:	e28220a9 	add	r2, r2, #169	; 0xa9
     860:	e583208c 	str	r2, [r3, #140]	; 0x8c
		PLLFEED = 0x55;
     864:	e3a02055 	mov	r2, #85	; 0x55
     868:	e583208c 	str	r2, [r3, #140]	; 0x8c
    }

    PLLCON = 0;				/* Disable PLL, disconnected */
     86c:	e3a02000 	mov	r2, #0
     870:	e5832080 	str	r2, [r3, #128]	; 0x80
    PLLFEED = 0xaa;
     874:	e28220aa 	add	r2, r2, #170	; 0xaa
     878:	e583208c 	str	r2, [r3, #140]	; 0x8c
    PLLFEED = 0x55;
     87c:	e3a02055 	mov	r2, #85	; 0x55
     880:	e583208c 	str	r2, [r3, #140]	; 0x8c
    
	SCS |= 0x20;			/* Enable main OSC */
     884:	e59321a0 	ldr	r2, [r3, #416]	; 0x1a0
     888:	e3822020 	orr	r2, r2, #32
     88c:	e58321a0 	str	r2, [r3, #416]	; 0x1a0
    while( !(SCS & 0x40) );	/* Wait until main OSC is usable */
     890:	e59f30a4 	ldr	r3, [pc, #164]	; 93c <ConfigurePLL+0xf8>
     894:	e59321a0 	ldr	r2, [r3, #416]	; 0x1a0
     898:	e3120040 	tst	r2, #64	; 0x40
     89c:	0afffffb 	beq	890 <ConfigurePLL+0x4c>

    CLKSRCSEL = 0x1;		/* select main OSC, 12MHz, as the PLL clock source */
     8a0:	e3a00001 	mov	r0, #1
	
		  
	PLLCFG = (PLL_NValue << 16) | PLL_MValue ;
     8a4:	e3a0200b 	mov	r2, #11
    PLLFEED = 0x55;
    
	SCS |= 0x20;			/* Enable main OSC */
    while( !(SCS & 0x40) );	/* Wait until main OSC is usable */

    CLKSRCSEL = 0x1;		/* select main OSC, 12MHz, as the PLL clock source */
     8a8:	e583010c 	str	r0, [r3, #268]	; 0x10c
	
		  
	PLLCFG = (PLL_NValue << 16) | PLL_MValue ;
	PLLFEED = 0xAA;
     8ac:	e3a010aa 	mov	r1, #170	; 0xaa
    while( !(SCS & 0x40) );	/* Wait until main OSC is usable */

    CLKSRCSEL = 0x1;		/* select main OSC, 12MHz, as the PLL clock source */
	
		  
	PLLCFG = (PLL_NValue << 16) | PLL_MValue ;
     8b0:	e5832084 	str	r2, [r3, #132]	; 0x84
	PLLFEED = 0xAA;
	PLLFEED = 0x55;
     8b4:	e282204a 	add	r2, r2, #74	; 0x4a

    CLKSRCSEL = 0x1;		/* select main OSC, 12MHz, as the PLL clock source */
	
		  
	PLLCFG = (PLL_NValue << 16) | PLL_MValue ;
	PLLFEED = 0xAA;
     8b8:	e583108c 	str	r1, [r3, #140]	; 0x8c
	PLLFEED = 0x55;
     8bc:	e583208c 	str	r2, [r3, #140]	; 0x8c
	PLLCON = 1;				/* Enable PLL */
     8c0:	e5830080 	str	r0, [r3, #128]	; 0x80
	PLLFEED = 0xAA;
     8c4:	e583108c 	str	r1, [r3, #140]	; 0x8c
	PLLFEED = 0x55;
     8c8:	e583208c 	str	r2, [r3, #140]	; 0x8c
	

    CCLKCFG = CCLKDivValue;	        /* Fcore = 72 MHz */
     8cc:	e3a02003 	mov	r2, #3
     8d0:	e5832104 	str	r2, [r3, #260]	; 0x104
#if USE_USB
    USBCLKCFG = USBCLKDivValue;		/* usbclk = 48 MHz */
     8d4:	e2822002 	add	r2, r2, #2
     8d8:	e5832108 	str	r2, [r3, #264]	; 0x108
#endif

    while ( ((PLLSTAT & (1 << 26)) == 0) );	/* Check lock bit status */
     8dc:	e59f3058 	ldr	r3, [pc, #88]	; 93c <ConfigurePLL+0xf8>
     8e0:	e5932088 	ldr	r2, [r3, #136]	; 0x88
     8e4:	e3120301 	tst	r2, #67108864	; 0x4000000
     8e8:	0afffffb 	beq	8dc <ConfigurePLL+0x98>
    
    MValue = PLLSTAT & 0x00007FFF;
     8ec:	e5932088 	ldr	r2, [r3, #136]	; 0x88
    NValue = (PLLSTAT & 0x00FF0000) >> 16;
     8f0:	e5933088 	ldr	r3, [r3, #136]	; 0x88
    USBCLKCFG = USBCLKDivValue;		/* usbclk = 48 MHz */
#endif

    while ( ((PLLSTAT & (1 << 26)) == 0) );	/* Check lock bit status */
    
    MValue = PLLSTAT & 0x00007FFF;
     8f4:	e1a02882 	lsl	r2, r2, #17
    NValue = (PLLSTAT & 0x00FF0000) >> 16;
     8f8:	e20338ff 	and	r3, r3, #16711680	; 0xff0000
    USBCLKCFG = USBCLKDivValue;		/* usbclk = 48 MHz */
#endif

    while ( ((PLLSTAT & (1 << 26)) == 0) );	/* Check lock bit status */
    
    MValue = PLLSTAT & 0x00007FFF;
     8fc:	e1a028a2 	lsr	r2, r2, #17
    NValue = (PLLSTAT & 0x00FF0000) >> 16;
     900:	e1a03823 	lsr	r3, r3, #16
    while ((MValue != PLL_MValue) && ( NValue != PLL_NValue) );
     904:	e3530000 	cmp	r3, #0
     908:	1352000b 	cmpne	r2, #11
     90c:	1afffffc 	bne	904 <ConfigurePLL+0xc0>

    PLLCON = 3;				/* enable and connect */
     910:	e59f3024 	ldr	r3, [pc, #36]	; 93c <ConfigurePLL+0xf8>
     914:	e3a02003 	mov	r2, #3
     918:	e5832080 	str	r2, [r3, #128]	; 0x80
    PLLFEED = 0xaa;
     91c:	e28220a7 	add	r2, r2, #167	; 0xa7
     920:	e583208c 	str	r2, [r3, #140]	; 0x8c
    PLLFEED = 0x55;
     924:	e3a02055 	mov	r2, #85	; 0x55
     928:	e583208c 	str	r2, [r3, #140]	; 0x8c
	while ( ((PLLSTAT & (1 << 25)) == 0) );	/* Check connect bit status */
     92c:	e5932088 	ldr	r2, [r3, #136]	; 0x88
     930:	e3120402 	tst	r2, #33554432	; 0x2000000
     934:	0afffffc 	beq	92c <ConfigurePLL+0xe8>


	return;
}
     938:	e12fff1e 	bx	lr
     93c:	e01fc000 	.word	0xe01fc000

00000940 <TargetResetInit>:
** parameters:			None
** Returned value:		None
** 
******************************************************************************/
void TargetResetInit(void)
{
     940:	e92d4010 	push	{r4, lr}
#endif

#ifdef __DEBUG_RAM    
    MEMMAP = 0x2;			/* remap to internal RAM */
#else
    MEMMAP = 0x1;			/* remap to internal flash */
     944:	e59f4044 	ldr	r4, [pc, #68]	; 990 <TargetResetInit+0x50>
     948:	e3a03001 	mov	r3, #1
     94c:	e5843040 	str	r3, [r4, #64]	; 0x40
#endif 


#if USE_USB
	PCONP |= 0x80000000;		/* Turn On USB PCLK */
     950:	e59430c4 	ldr	r3, [r4, #196]	; 0xc4
     954:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
     958:	e58430c4 	str	r3, [r4, #196]	; 0xc4
#endif
	/* Configure PLL, switch from IRC to Main OSC */
	ConfigurePLL();
     95c:	ebffffb8 	bl	844 <ConfigurePLL>
#if (Fpclk / (Fcclk / 4)) == 1
    PCLKSEL0 = 0x00000000;	/* PCLK is 1/4 CCLK */
    PCLKSEL1 = 0x00000000;
#endif
#if (Fpclk / (Fcclk / 4)) == 2
    PCLKSEL0 = 0xAAAAAAAA;	/* PCLK is 1/2 CCLK */
     960:	e59f302c 	ldr	r3, [pc, #44]	; 994 <TargetResetInit+0x54>
     964:	e58431a8 	str	r3, [r4, #424]	; 0x1a8
    PCLKSEL1 = 0xAAAAAAAA;	 
     968:	e58431ac 	str	r3, [r4, #428]	; 0x1ac
    PCLKSEL0 = 0x55555555;	/* PCLK is the same as CCLK */
    PCLKSEL1 = 0x55555555;	
#endif

    /* Set memory accelerater module*/
    MAMCR = 0;
     96c:	e3a03000 	mov	r3, #0
     970:	e5843000 	str	r3, [r4]
    MAMTIM = 1;
#else
#if Fcclk < 40000000
    MAMTIM = 2;
#else
    MAMTIM = 3;
     974:	e2833003 	add	r3, r3, #3
     978:	e5843004 	str	r3, [r4, #4]
#endif
#endif
    MAMCR = 2;
     97c:	e3a03002 	mov	r3, #2
     980:	e5843000 	str	r3, [r4]
	
	init_VIC();
     984:	eb000003 	bl	998 <init_VIC>
	
	TargetInit();
	
    return;
}
     988:	e8bd4010 	pop	{r4, lr}
#endif
    MAMCR = 2;
	
	init_VIC();
	
	TargetInit();
     98c:	eaffff6c 	b	744 <TargetInit>
     990:	e01fc000 	.word	0xe01fc000
     994:	aaaaaaaa 	.word	0xaaaaaaaa

00000998 <init_VIC>:
{
    DWORD i = 0;
    DWORD *vect_addr, *vect_cntl;
   	
    /* initialize VIC*/
    VICIntEnClr = 0xffffffff;
     998:	e3e03000 	mvn	r3, #0
    VICVectAddr = 0;
     99c:	e3a02000 	mov	r2, #0
{
    DWORD i = 0;
    DWORD *vect_addr, *vect_cntl;
   	
    /* initialize VIC*/
    VICIntEnClr = 0xffffffff;
     9a0:	e5033feb 	str	r3, [r3, #-4075]	; 0xfffff015
    VICVectAddr = 0;
     9a4:	e50320ff 	str	r2, [r3, #-255]	; 0xffffff01
    VICIntSelect = 0;
     9a8:	e5032ff3 	str	r2, [r3, #-4083]	; 0xfffff00d
     9ac:	e59f301c 	ldr	r3, [pc, #28]	; 9d0 <init_VIC+0x38>
    /* set all the vector and vector control register to 0 */
    for ( i = 0; i < VIC_SIZE; i++ )
    {
		vect_addr = (DWORD *)(VIC_BASE_ADDR + VECT_ADDR_INDEX + i*4);
		vect_cntl = (DWORD *)(VIC_BASE_ADDR + VECT_CNTL_INDEX + i*4);
		*vect_addr = 0x0;
     9b0:	e3a02000 	mov	r2, #0
     9b4:	e5a32004 	str	r2, [r3, #4]!
		*vect_cntl = 0xF;
     9b8:	e282200f 	add	r2, r2, #15
     9bc:	e5832100 	str	r2, [r3, #256]	; 0x100
    VICIntEnClr = 0xffffffff;
    VICVectAddr = 0;
    VICIntSelect = 0;

    /* set all the vector and vector control register to 0 */
    for ( i = 0; i < VIC_SIZE; i++ )
     9c0:	e59f200c 	ldr	r2, [pc, #12]	; 9d4 <init_VIC+0x3c>
     9c4:	e1530002 	cmp	r3, r2
     9c8:	1afffff8 	bne	9b0 <init_VIC+0x18>
		vect_cntl = (DWORD *)(VIC_BASE_ADDR + VECT_CNTL_INDEX + i*4);
		*vect_addr = 0x0;
		*vect_cntl = 0xF;
    }
    return;
}
     9cc:	e12fff1e 	bx	lr
     9d0:	fffff0fc 	.word	0xfffff0fc
     9d4:	fffff17c 	.word	0xfffff17c

000009d8 <_read_r>:
	#define TRUE  1
#endif

/* new code for _read_r provided by Alexey Shusharin - Thanks */
_ssize_t _read_r(struct _reent *r, int file, void *ptr, size_t len)
{
     9d8:	e92d4070 	push	{r4, r5, r6, lr}
     9dc:	e1a04003 	mov	r4, r3
  char c;
  int  i;
  unsigned char *p;

  p = (unsigned char*)ptr;
  for (i = 0; i < len; i++)
     9e0:	e1a06002 	mov	r6, r2
     9e4:	e3a05000 	mov	r5, #0
     9e8:	ea00000d 	b	a24 <_read_r+0x4c>
  {
	/* 20090521Nemui */
	do{		
		c = getch();
     9ec:	e3a00000 	mov	r0, #0
     9f0:	ebffff41 	bl	6fc <UARTGetch>
	}while(c == FALSE);
     9f4:	e3500000 	cmp	r0, #0
     9f8:	0afffffb 	beq	9ec <_read_r+0x14>
    *p++ = c;
	#ifdef ECHOBACK 
		putch(c);
	#endif
	
    if (c == '\r' && i <= (len - 2)) /* 0x0D */
     9fc:	e350000d 	cmp	r0, #13
	do{		
		c = getch();
	}while(c == FALSE);
	/* 20090521Nemui */
	
    *p++ = c;
     a00:	e4c60001 	strb	r0, [r6], #1
	#ifdef ECHOBACK 
		putch(c);
	#endif
	
    if (c == '\r' && i <= (len - 2)) /* 0x0D */
     a04:	1a000005 	bne	a20 <_read_r+0x48>
     a08:	e2443002 	sub	r3, r4, #2
     a0c:	e1550003 	cmp	r5, r3
    {
      *p = '\n';					 /* 0x0A */
     a10:	93a0300a 	movls	r3, #10
     a14:	95c63000 	strbls	r3, [r6]
	  #ifdef ECHOBACK 
		putch('\n');				 /* 0x0A */
	  #endif
      return i + 2;
     a18:	92855002 	addls	r5, r5, #2
     a1c:	9a000002 	bls	a2c <_read_r+0x54>
  char c;
  int  i;
  unsigned char *p;

  p = (unsigned char*)ptr;
  for (i = 0; i < len; i++)
     a20:	e2855001 	add	r5, r5, #1
     a24:	e1550004 	cmp	r5, r4
     a28:	3affffef 	bcc	9ec <_read_r+0x14>
	  #endif
      return i + 2;
    }
  }
  return i;
}
     a2c:	e1a00005 	mov	r0, r5
     a30:	e8bd4070 	pop	{r4, r5, r6, lr}
     a34:	e12fff1e 	bx	lr

00000a38 <_write_r>:
_ssize_t _write_r (
    struct _reent *r, 
    int file, 
    const void *ptr, 
    size_t len)
{
     a38:	e92d4070 	push	{r4, r5, r6, lr}
     a3c:	e1a04002 	mov	r4, r2
     a40:	e1a06003 	mov	r6, r3
	int i;
	const unsigned char *p;
	
	p = (const unsigned char*) ptr;
	
	for (i = 0; i < len; i++) {
     a44:	e3a05000 	mov	r5, #0
     a48:	ea000008 	b	a70 <_write_r+0x38>
		if (*p == '\n' ) putch('\r');
     a4c:	e7d43005 	ldrb	r3, [r4, r5]
     a50:	e353000a 	cmp	r3, #10
     a54:	03a00000 	moveq	r0, #0
     a58:	03a0100d 	moveq	r1, #13
     a5c:	0bffff17 	bleq	6c0 <UARTPutch>
		putch(*p++);
     a60:	e7d41005 	ldrb	r1, [r4, r5]
     a64:	e3a00000 	mov	r0, #0
     a68:	ebffff14 	bl	6c0 <UARTPutch>
	int i;
	const unsigned char *p;
	
	p = (const unsigned char*) ptr;
	
	for (i = 0; i < len; i++) {
     a6c:	e2855001 	add	r5, r5, #1
     a70:	e1550006 	cmp	r5, r6
     a74:	3afffff4 	bcc	a4c <_write_r+0x14>
		if (*p == '\n' ) putch('\r');
		putch(*p++);
	}
	
	return len;
}
     a78:	e1a00006 	mov	r0, r6
     a7c:	e8bd4070 	pop	{r4, r5, r6, lr}
     a80:	e12fff1e 	bx	lr

00000a84 <_close_r>:
int _close_r(
    struct _reent *r, 
    int file)
{
	return 0;
}
     a84:	e3a00000 	mov	r0, #0
     a88:	e12fff1e 	bx	lr

00000a8c <_lseek_r>:
    int file, 
    _off_t ptr, 
    int dir)
{
	return (_off_t)0;	/*  Always indicate we are at file beginning.	*/
}
     a8c:	e3a00000 	mov	r0, #0
     a90:	e12fff1e 	bx	lr

00000a94 <_fstat_r>:
    struct _reent *r, 
    int file, 
    struct stat *st)
{
	/*  Always set as character device.				*/
	st->st_mode = S_IFCHR;	
     a94:	e3a03a02 	mov	r3, #8192	; 0x2000
     a98:	e5823004 	str	r3, [r2, #4]
		/* assigned to strong type with implicit 	*/
		/* signed/unsigned conversion.  Required by 	*/
		/* newlib.					*/

	return 0;
}
     a9c:	e3a00000 	mov	r0, #0
     aa0:	e12fff1e 	bx	lr

00000aa4 <_sbrk_r>:
    struct _reent *_s_r, 
    ptrdiff_t nbytes)
{
	char  *base;		/*  errno should be set to  ENOMEM on error	*/

	if (!heap_ptr) {	/*  Initialize if first time through.		*/
     aa4:	e59f301c 	ldr	r3, [pc, #28]	; ac8 <_sbrk_r+0x24>
     aa8:	e5932000 	ldr	r2, [r3]
     aac:	e3520000 	cmp	r2, #0
		heap_ptr = end;
     ab0:	059f2014 	ldreq	r2, [pc, #20]	; acc <_sbrk_r+0x28>
     ab4:	05832000 	streq	r2, [r3]
	}
	base = heap_ptr;	/*  Point to end of heap.					*/
     ab8:	e5930000 	ldr	r0, [r3]
	heap_ptr += nbytes;	/*  Increase heap.							*/
     abc:	e0801001 	add	r1, r0, r1
     ac0:	e5831000 	str	r1, [r3]
	
	return base;		/*  Return pointer to start of new heap area.	*/
}
     ac4:	e12fff1e 	bx	lr
     ac8:	40000874 	.word	0x40000874
     acc:	40001430 	.word	0x40001430

00000ad0 <_isatty>:
}

int _isatty(int fd)
{
  return 1;
}
     ad0:	e3a00001 	mov	r0, #1
     ad4:	e12fff1e 	bx	lr

00000ad8 <_putchar_r>:
     ad8:	e92d4008 	push	{r3, lr}
     adc:	e5902008 	ldr	r2, [r0, #8]
     ae0:	eb000437 	bl	1bc4 <_putc_r>
     ae4:	e8bd4008 	pop	{r3, lr}
     ae8:	e12fff1e 	bx	lr

00000aec <putchar>:
     aec:	e92d4008 	push	{r3, lr}
     af0:	e59f3018 	ldr	r3, [pc, #24]	; b10 <Stack_Size+0x10>
     af4:	e5933000 	ldr	r3, [r3]
     af8:	e1a01000 	mov	r1, r0
     afc:	e5932008 	ldr	r2, [r3, #8]
     b00:	e1a00003 	mov	r0, r3
     b04:	eb00042e 	bl	1bc4 <_putc_r>
     b08:	e8bd4008 	pop	{r3, lr}
     b0c:	e12fff1e 	bx	lr
     b10:	40000000 	.word	0x40000000

00000b14 <_puts_r>:
     b14:	e92d4030 	push	{r4, r5, lr}
     b18:	e1a05000 	mov	r5, r0
     b1c:	e24dd024 	sub	sp, sp, #36	; 0x24
     b20:	e1a00001 	mov	r0, r1
     b24:	e1a04001 	mov	r4, r1
     b28:	eb000026 	bl	bc8 <strlen>
     b2c:	e59f3078 	ldr	r3, [pc, #120]	; bac <_puts_r+0x98>
     b30:	e5933000 	ldr	r3, [r3]
     b34:	e5933008 	ldr	r3, [r3, #8]
     b38:	e2801001 	add	r1, r0, #1
     b3c:	e1d320bc 	ldrh	r2, [r3, #12]
     b40:	e58d101c 	str	r1, [sp, #28]
     b44:	e28d1004 	add	r1, sp, #4
     b48:	e3120a02 	tst	r2, #8192	; 0x2000
     b4c:	e58d1014 	str	r1, [sp, #20]
     b50:	e3a01002 	mov	r1, #2
     b54:	e58d1018 	str	r1, [sp, #24]
     b58:	e58d0008 	str	r0, [sp, #8]
     b5c:	05931064 	ldreq	r1, [r3, #100]	; 0x64
     b60:	e59f0048 	ldr	r0, [pc, #72]	; bb0 <_puts_r+0x9c>
     b64:	03822a02 	orreq	r2, r2, #8192	; 0x2000
     b68:	03c11a02 	biceq	r1, r1, #8192	; 0x2000
     b6c:	e58d000c 	str	r0, [sp, #12]
     b70:	e3a00001 	mov	r0, #1
     b74:	e58d0010 	str	r0, [sp, #16]
     b78:	05831064 	streq	r1, [r3, #100]	; 0x64
     b7c:	01c320bc 	strheq	r2, [r3, #12]
     b80:	e1a00005 	mov	r0, r5
     b84:	e5951008 	ldr	r1, [r5, #8]
     b88:	e28d2014 	add	r2, sp, #20
     b8c:	e58d4004 	str	r4, [sp, #4]
     b90:	eb000024 	bl	c28 <__sfvwrite_r>
     b94:	e3500000 	cmp	r0, #0
     b98:	03a0000a 	moveq	r0, #10
     b9c:	13e00000 	mvnne	r0, #0
     ba0:	e28dd024 	add	sp, sp, #36	; 0x24
     ba4:	e8bd4030 	pop	{r4, r5, lr}
     ba8:	e12fff1e 	bx	lr
     bac:	40000000 	.word	0x40000000
     bb0:	0000346c 	.word	0x0000346c

00000bb4 <puts>:
     bb4:	e59f3008 	ldr	r3, [pc, #8]	; bc4 <puts+0x10>
     bb8:	e1a01000 	mov	r1, r0
     bbc:	e5930000 	ldr	r0, [r3]
     bc0:	eaffffd3 	b	b14 <_puts_r>
     bc4:	40000000 	.word	0x40000000

00000bc8 <strlen>:
     bc8:	e3c01003 	bic	r1, r0, #3
     bcc:	e2100003 	ands	r0, r0, #3
     bd0:	e2600000 	rsb	r0, r0, #0
     bd4:	e4913004 	ldr	r3, [r1], #4
     bd8:	e280c004 	add	ip, r0, #4
     bdc:	e1a0c18c 	lsl	ip, ip, #3
     be0:	e3e02000 	mvn	r2, #0
     be4:	11833c32 	orrne	r3, r3, r2, lsr ip
     be8:	e3a0c001 	mov	ip, #1
     bec:	e18cc40c 	orr	ip, ip, ip, lsl #8
     bf0:	e18cc80c 	orr	ip, ip, ip, lsl #16
     bf4:	e043200c 	sub	r2, r3, ip
     bf8:	e1c22003 	bic	r2, r2, r3
     bfc:	e012238c 	ands	r2, r2, ip, lsl #7
     c00:	04913004 	ldreq	r3, [r1], #4
     c04:	02800004 	addeq	r0, r0, #4
     c08:	0afffff9 	beq	bf4 <strlen+0x2c>
     c0c:	e31300ff 	tst	r3, #255	; 0xff
     c10:	12800001 	addne	r0, r0, #1
     c14:	13130cff 	tstne	r3, #65280	; 0xff00
     c18:	12800001 	addne	r0, r0, #1
     c1c:	131308ff 	tstne	r3, #16711680	; 0xff0000
     c20:	12800001 	addne	r0, r0, #1
     c24:	e12fff1e 	bx	lr

00000c28 <__sfvwrite_r>:
     c28:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
     c2c:	e592a008 	ldr	sl, [r2, #8]
     c30:	e24dd00c 	sub	sp, sp, #12
     c34:	e35a0000 	cmp	sl, #0
     c38:	e1a07002 	mov	r7, r2
     c3c:	e58d0004 	str	r0, [sp, #4]
     c40:	e1a04001 	mov	r4, r1
     c44:	0a00004d 	beq	d80 <__sfvwrite_r+0x158>
     c48:	e1d130bc 	ldrh	r3, [r1, #12]
     c4c:	e3130008 	tst	r3, #8
     c50:	e1a08003 	mov	r8, r3
     c54:	0a00007a 	beq	e44 <__sfvwrite_r+0x21c>
     c58:	e5912010 	ldr	r2, [r1, #16]
     c5c:	e3520000 	cmp	r2, #0
     c60:	0a000077 	beq	e44 <__sfvwrite_r+0x21c>
     c64:	e218b002 	ands	fp, r8, #2
     c68:	13a08000 	movne	r8, #0
     c6c:	e5975000 	ldr	r5, [r7]
     c70:	11a06008 	movne	r6, r8
     c74:	1a00002d 	bne	d30 <__sfvwrite_r+0x108>
     c78:	e2188001 	ands	r8, r8, #1
     c7c:	11a0c00b 	movne	ip, fp
     c80:	11a0800b 	movne	r8, fp
     c84:	11a0600b 	movne	r6, fp
     c88:	01a06008 	moveq	r6, r8
     c8c:	1a000043 	bne	da0 <__sfvwrite_r+0x178>
     c90:	e3560000 	cmp	r6, #0
     c94:	0a00001e 	beq	d14 <__sfvwrite_r+0xec>
     c98:	e3130c02 	tst	r3, #512	; 0x200
     c9c:	e594a008 	ldr	sl, [r4, #8]
     ca0:	0a00006f 	beq	e64 <__sfvwrite_r+0x23c>
     ca4:	e156000a 	cmp	r6, sl
     ca8:	e1a0900a 	mov	r9, sl
     cac:	3a000083 	bcc	ec0 <__sfvwrite_r+0x298>
     cb0:	e3130d12 	tst	r3, #1152	; 0x480
     cb4:	1a0000cf 	bne	ff8 <VIC_Address+0xf8>
     cb8:	e5940000 	ldr	r0, [r4]
     cbc:	e1a0b00a 	mov	fp, sl
     cc0:	e1a0a006 	mov	sl, r6
     cc4:	e1a02009 	mov	r2, r9
     cc8:	e1a01008 	mov	r1, r8
     ccc:	eb000374 	bl	1aa4 <memmove>
     cd0:	e5942008 	ldr	r2, [r4, #8]
     cd4:	e5943000 	ldr	r3, [r4]
     cd8:	e06bb002 	rsb	fp, fp, r2
     cdc:	e0839009 	add	r9, r3, r9
     ce0:	e584b008 	str	fp, [r4, #8]
     ce4:	e5849000 	str	r9, [r4]
     ce8:	e1a09006 	mov	r9, r6
     cec:	e5973008 	ldr	r3, [r7, #8]
     cf0:	e06aa003 	rsb	sl, sl, r3
     cf4:	e35a0000 	cmp	sl, #0
     cf8:	e0888009 	add	r8, r8, r9
     cfc:	e0696006 	rsb	r6, r9, r6
     d00:	e587a008 	str	sl, [r7, #8]
     d04:	0a00001d 	beq	d80 <__sfvwrite_r+0x158>
     d08:	e3560000 	cmp	r6, #0
     d0c:	e1d430bc 	ldrh	r3, [r4, #12]
     d10:	1affffe0 	bne	c98 <__sfvwrite_r+0x70>
     d14:	e5958000 	ldr	r8, [r5]
     d18:	e5956004 	ldr	r6, [r5, #4]
     d1c:	e2855008 	add	r5, r5, #8
     d20:	eaffffda 	b	c90 <__sfvwrite_r+0x68>
     d24:	e5958000 	ldr	r8, [r5]
     d28:	e5956004 	ldr	r6, [r5, #4]
     d2c:	e2855008 	add	r5, r5, #8
     d30:	e3560000 	cmp	r6, #0
     d34:	e1a02008 	mov	r2, r8
     d38:	e59d0004 	ldr	r0, [sp, #4]
     d3c:	0afffff8 	beq	d24 <__sfvwrite_r+0xfc>
     d40:	e3560b01 	cmp	r6, #1024	; 0x400
     d44:	31a03006 	movcc	r3, r6
     d48:	23a03b01 	movcs	r3, #1024	; 0x400
     d4c:	e594101c 	ldr	r1, [r4, #28]
     d50:	e594c024 	ldr	ip, [r4, #36]	; 0x24
     d54:	e1a0e00f 	mov	lr, pc
     d58:	e12fff1c 	bx	ip
     d5c:	e3500000 	cmp	r0, #0
     d60:	da00007d 	ble	f5c <VIC_Address+0x5c>
     d64:	e597a008 	ldr	sl, [r7, #8]
     d68:	e060a00a 	rsb	sl, r0, sl
     d6c:	e35a0000 	cmp	sl, #0
     d70:	e0888000 	add	r8, r8, r0
     d74:	e0606006 	rsb	r6, r0, r6
     d78:	e587a008 	str	sl, [r7, #8]
     d7c:	1affffeb 	bne	d30 <__sfvwrite_r+0x108>
     d80:	e1a0000a 	mov	r0, sl
     d84:	e28dd00c 	add	sp, sp, #12
     d88:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
     d8c:	e12fff1e 	bx	lr
     d90:	e5958000 	ldr	r8, [r5]
     d94:	e5956004 	ldr	r6, [r5, #4]
     d98:	e3a0c000 	mov	ip, #0
     d9c:	e2855008 	add	r5, r5, #8
     da0:	e3560000 	cmp	r6, #0
     da4:	0afffff9 	beq	d90 <__sfvwrite_r+0x168>
     da8:	e35c0000 	cmp	ip, #0
     dac:	0a00006f 	beq	f70 <VIC_Address+0x70>
     db0:	e5943014 	ldr	r3, [r4, #20]
     db4:	e594a008 	ldr	sl, [r4, #8]
     db8:	e5940000 	ldr	r0, [r4]
     dbc:	e5941010 	ldr	r1, [r4, #16]
     dc0:	e15b0006 	cmp	fp, r6
     dc4:	31a0900b 	movcc	r9, fp
     dc8:	21a09006 	movcs	r9, r6
     dcc:	e083a00a 	add	sl, r3, sl
     dd0:	e159000a 	cmp	r9, sl
     dd4:	d3a02000 	movle	r2, #0
     dd8:	c3a02001 	movgt	r2, #1
     ddc:	e1500001 	cmp	r0, r1
     de0:	93a02000 	movls	r2, #0
     de4:	e3520000 	cmp	r2, #0
     de8:	1a00004e 	bne	f28 <VIC_Address+0x28>
     dec:	e1590003 	cmp	r9, r3
     df0:	ba000037 	blt	ed4 <__sfvwrite_r+0x2ac>
     df4:	e594101c 	ldr	r1, [r4, #28]
     df8:	e59d0004 	ldr	r0, [sp, #4]
     dfc:	e58dc000 	str	ip, [sp]
     e00:	e1a02008 	mov	r2, r8
     e04:	e594c024 	ldr	ip, [r4, #36]	; 0x24
     e08:	e1a0e00f 	mov	lr, pc
     e0c:	e12fff1c 	bx	ip
     e10:	e250a000 	subs	sl, r0, #0
     e14:	e59dc000 	ldr	ip, [sp]
     e18:	da00004f 	ble	f5c <VIC_Address+0x5c>
     e1c:	e05bb00a 	subs	fp, fp, sl
     e20:	0a000039 	beq	f0c <VIC_Address+0xc>
     e24:	e5970008 	ldr	r0, [r7, #8]
     e28:	e06a0000 	rsb	r0, sl, r0
     e2c:	e3500000 	cmp	r0, #0
     e30:	e088800a 	add	r8, r8, sl
     e34:	e06a6006 	rsb	r6, sl, r6
     e38:	e5870008 	str	r0, [r7, #8]
     e3c:	1affffd7 	bne	da0 <__sfvwrite_r+0x178>
     e40:	eaffffcf 	b	d84 <__sfvwrite_r+0x15c>
     e44:	e59d0004 	ldr	r0, [sp, #4]
     e48:	e1a01004 	mov	r1, r4
     e4c:	eb00057d 	bl	2448 <__swsetup_r>
     e50:	e3500000 	cmp	r0, #0
     e54:	1a000097 	bne	10b8 <VIC_Address+0x1b8>
     e58:	e1d430bc 	ldrh	r3, [r4, #12]
     e5c:	e1a08003 	mov	r8, r3
     e60:	eaffff7f 	b	c64 <__sfvwrite_r+0x3c>
     e64:	e5940000 	ldr	r0, [r4]
     e68:	e5942010 	ldr	r2, [r4, #16]
     e6c:	e15a0006 	cmp	sl, r6
     e70:	23a03000 	movcs	r3, #0
     e74:	33a03001 	movcc	r3, #1
     e78:	e1500002 	cmp	r0, r2
     e7c:	93a03000 	movls	r3, #0
     e80:	e3530000 	cmp	r3, #0
     e84:	e1a0900a 	mov	r9, sl
     e88:	1a00004e 	bne	fc8 <VIC_Address+0xc8>
     e8c:	e5943014 	ldr	r3, [r4, #20]
     e90:	e1560003 	cmp	r6, r3
     e94:	3a00003f 	bcc	f98 <VIC_Address+0x98>
     e98:	e59d0004 	ldr	r0, [sp, #4]
     e9c:	e594101c 	ldr	r1, [r4, #28]
     ea0:	e1a02008 	mov	r2, r8
     ea4:	e594c024 	ldr	ip, [r4, #36]	; 0x24
     ea8:	e1a0e00f 	mov	lr, pc
     eac:	e12fff1c 	bx	ip
     eb0:	e250a000 	subs	sl, r0, #0
     eb4:	da000028 	ble	f5c <VIC_Address+0x5c>
     eb8:	e1a0900a 	mov	r9, sl
     ebc:	eaffff8a 	b	cec <__sfvwrite_r+0xc4>
     ec0:	e5940000 	ldr	r0, [r4]
     ec4:	e1a0b006 	mov	fp, r6
     ec8:	e1a09006 	mov	r9, r6
     ecc:	e1a0a006 	mov	sl, r6
     ed0:	eaffff7b 	b	cc4 <__sfvwrite_r+0x9c>
     ed4:	e1a02009 	mov	r2, r9
     ed8:	e1a01008 	mov	r1, r8
     edc:	e58dc000 	str	ip, [sp]
     ee0:	eb0002ef 	bl	1aa4 <memmove>
     ee4:	e5942008 	ldr	r2, [r4, #8]
     ee8:	e5943000 	ldr	r3, [r4]
     eec:	e1a0a009 	mov	sl, r9
     ef0:	e0692002 	rsb	r2, r9, r2
     ef4:	e0833009 	add	r3, r3, r9
     ef8:	e05bb00a 	subs	fp, fp, sl
     efc:	e5842008 	str	r2, [r4, #8]
     f00:	e5843000 	str	r3, [r4]
     f04:	e59dc000 	ldr	ip, [sp]
     f08:	1affffc5 	bne	e24 <__sfvwrite_r+0x1fc>
     f0c:	e59d0004 	ldr	r0, [sp, #4]
     f10:	e1a01004 	mov	r1, r4
     f14:	eb000598 	bl	257c <_fflush_r>
     f18:	e3500000 	cmp	r0, #0
     f1c:	1a00000e 	bne	f5c <VIC_Address+0x5c>
     f20:	e1a0c00b 	mov	ip, fp
     f24:	eaffffbe 	b	e24 <__sfvwrite_r+0x1fc>
     f28:	e1a01008 	mov	r1, r8
     f2c:	e1a0200a 	mov	r2, sl
     f30:	e58dc000 	str	ip, [sp]
     f34:	eb0002da 	bl	1aa4 <memmove>
     f38:	e5943000 	ldr	r3, [r4]
     f3c:	e083300a 	add	r3, r3, sl
     f40:	e5843000 	str	r3, [r4]
     f44:	e59d0004 	ldr	r0, [sp, #4]
     f48:	e1a01004 	mov	r1, r4
     f4c:	eb00058a 	bl	257c <_fflush_r>
     f50:	e3500000 	cmp	r0, #0
     f54:	e59dc000 	ldr	ip, [sp]
     f58:	0affffaf 	beq	e1c <__sfvwrite_r+0x1f4>
     f5c:	e1d430bc 	ldrh	r3, [r4, #12]
     f60:	e3833040 	orr	r3, r3, #64	; 0x40
     f64:	e1c430bc 	strh	r3, [r4, #12]
     f68:	e3e00000 	mvn	r0, #0
     f6c:	eaffff84 	b	d84 <__sfvwrite_r+0x15c>
     f70:	e1a00008 	mov	r0, r8
     f74:	e3a0100a 	mov	r1, #10
     f78:	e1a02006 	mov	r2, r6
     f7c:	eb000218 	bl	17e4 <memchr>
     f80:	e3500000 	cmp	r0, #0
     f84:	1280b001 	addne	fp, r0, #1
     f88:	1068b00b 	rsbne	fp, r8, fp
     f8c:	0286b001 	addeq	fp, r6, #1
     f90:	e3a0c001 	mov	ip, #1
     f94:	eaffff85 	b	db0 <__sfvwrite_r+0x188>
     f98:	e1a02006 	mov	r2, r6
     f9c:	e1a01008 	mov	r1, r8
     fa0:	eb0002bf 	bl	1aa4 <memmove>
     fa4:	e5942008 	ldr	r2, [r4, #8]
     fa8:	e5943000 	ldr	r3, [r4]
     fac:	e0662002 	rsb	r2, r6, r2
     fb0:	e0833006 	add	r3, r3, r6
     fb4:	e5842008 	str	r2, [r4, #8]
     fb8:	e5843000 	str	r3, [r4]
     fbc:	e1a0a006 	mov	sl, r6
     fc0:	e1a09006 	mov	r9, r6
     fc4:	eaffff48 	b	cec <__sfvwrite_r+0xc4>
     fc8:	e1a01008 	mov	r1, r8
     fcc:	e1a0200a 	mov	r2, sl
     fd0:	eb0002b3 	bl	1aa4 <memmove>
     fd4:	e5943000 	ldr	r3, [r4]
     fd8:	e083300a 	add	r3, r3, sl
     fdc:	e5843000 	str	r3, [r4]
     fe0:	e59d0004 	ldr	r0, [sp, #4]
     fe4:	e1a01004 	mov	r1, r4
     fe8:	eb000563 	bl	257c <_fflush_r>
     fec:	e3500000 	cmp	r0, #0
     ff0:	0affff3d 	beq	cec <__sfvwrite_r+0xc4>
     ff4:	eaffffd8 	b	f5c <VIC_Address+0x5c>
     ff8:	e5941010 	ldr	r1, [r4, #16]
     ffc:	e5949000 	ldr	r9, [r4]
    1000:	e594a014 	ldr	sl, [r4, #20]
    1004:	e0619009 	rsb	r9, r1, r9
    1008:	e08aa08a 	add	sl, sl, sl, lsl #1
    100c:	e08aafaa 	add	sl, sl, sl, lsr #31
    1010:	e2890001 	add	r0, r9, #1
    1014:	e1a0a0ca 	asr	sl, sl, #1
    1018:	e0800006 	add	r0, r0, r6
    101c:	e15a0000 	cmp	sl, r0
    1020:	e1a0200a 	mov	r2, sl
    1024:	31a0a000 	movcc	sl, r0
    1028:	31a0200a 	movcc	r2, sl
    102c:	e3130b01 	tst	r3, #1024	; 0x400
    1030:	0a000015 	beq	108c <VIC_Address+0x18c>
    1034:	e59d0004 	ldr	r0, [sp, #4]
    1038:	e1a01002 	mov	r1, r2
    103c:	eb000025 	bl	10d8 <_malloc_r>
    1040:	e250b000 	subs	fp, r0, #0
    1044:	0a000017 	beq	10a8 <VIC_Address+0x1a8>
    1048:	e5941010 	ldr	r1, [r4, #16]
    104c:	e1a02009 	mov	r2, r9
    1050:	eb000223 	bl	18e4 <memcpy>
    1054:	e1d430bc 	ldrh	r3, [r4, #12]
    1058:	e3c33d12 	bic	r3, r3, #1152	; 0x480
    105c:	e3833080 	orr	r3, r3, #128	; 0x80
    1060:	e1c430bc 	strh	r3, [r4, #12]
    1064:	e08b0009 	add	r0, fp, r9
    1068:	e069900a 	rsb	r9, r9, sl
    106c:	e584b010 	str	fp, [r4, #16]
    1070:	e584a014 	str	sl, [r4, #20]
    1074:	e5849008 	str	r9, [r4, #8]
    1078:	e5840000 	str	r0, [r4]
    107c:	e1a0b006 	mov	fp, r6
    1080:	e1a09006 	mov	r9, r6
    1084:	e1a0a006 	mov	sl, r6
    1088:	eaffff0d 	b	cc4 <__sfvwrite_r+0x9c>
    108c:	e59d0004 	ldr	r0, [sp, #4]
    1090:	eb000325 	bl	1d2c <_realloc_r>
    1094:	e250b000 	subs	fp, r0, #0
    1098:	1afffff1 	bne	1064 <VIC_Address+0x164>
    109c:	e59d0004 	ldr	r0, [sp, #4]
    10a0:	e5941010 	ldr	r1, [r4, #16]
    10a4:	eb0006e6 	bl	2c44 <_free_r>
    10a8:	e59d2004 	ldr	r2, [sp, #4]
    10ac:	e3a0300c 	mov	r3, #12
    10b0:	e5823000 	str	r3, [r2]
    10b4:	eaffffa8 	b	f5c <VIC_Address+0x5c>
    10b8:	e1d430bc 	ldrh	r3, [r4, #12]
    10bc:	e59d2004 	ldr	r2, [sp, #4]
    10c0:	e3833040 	orr	r3, r3, #64	; 0x40
    10c4:	e1c430bc 	strh	r3, [r4, #12]
    10c8:	e3a03009 	mov	r3, #9
    10cc:	e3e00000 	mvn	r0, #0
    10d0:	e5823000 	str	r3, [r2]
    10d4:	eaffff2a 	b	d84 <__sfvwrite_r+0x15c>

000010d8 <_malloc_r>:
    10d8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    10dc:	e281400b 	add	r4, r1, #11
    10e0:	e3540016 	cmp	r4, #22
    10e4:	83c44007 	bichi	r4, r4, #7
    10e8:	81a03fa4 	lsrhi	r3, r4, #31
    10ec:	93a03000 	movls	r3, #0
    10f0:	93a04010 	movls	r4, #16
    10f4:	e1540001 	cmp	r4, r1
    10f8:	21a01003 	movcs	r1, r3
    10fc:	33831001 	orrcc	r1, r3, #1
    1100:	e3510000 	cmp	r1, #0
    1104:	13a0300c 	movne	r3, #12
    1108:	e24dd00c 	sub	sp, sp, #12
    110c:	e1a05000 	mov	r5, r0
    1110:	15803000 	strne	r3, [r0]
    1114:	13a08000 	movne	r8, #0
    1118:	1a000016 	bne	1178 <_malloc_r+0xa0>
    111c:	eb0002a6 	bl	1bbc <__malloc_lock>
    1120:	e3540f7e 	cmp	r4, #504	; 0x1f8
    1124:	2a000017 	bcs	1188 <_malloc_r+0xb0>
    1128:	e59f66a4 	ldr	r6, [pc, #1700]	; 17d4 <_malloc_r+0x6fc>
    112c:	e1a0a1a4 	lsr	sl, r4, #3
    1130:	e086318a 	add	r3, r6, sl, lsl #3
    1134:	e593800c 	ldr	r8, [r3, #12]
    1138:	e1580003 	cmp	r8, r3
    113c:	e1a07006 	mov	r7, r6
    1140:	0a000157 	beq	16a4 <_malloc_r+0x5cc>
    1144:	e5983004 	ldr	r3, [r8, #4]
    1148:	e3c33003 	bic	r3, r3, #3
    114c:	e0883003 	add	r3, r8, r3
    1150:	e5930004 	ldr	r0, [r3, #4]
    1154:	e2881008 	add	r1, r8, #8
    1158:	e8910006 	ldm	r1, {r1, r2}
    115c:	e3800001 	orr	r0, r0, #1
    1160:	e5830004 	str	r0, [r3, #4]
    1164:	e581200c 	str	r2, [r1, #12]
    1168:	e5821008 	str	r1, [r2, #8]
    116c:	e1a00005 	mov	r0, r5
    1170:	eb000292 	bl	1bc0 <__malloc_unlock>
    1174:	e2888008 	add	r8, r8, #8
    1178:	e1a00008 	mov	r0, r8
    117c:	e28dd00c 	add	sp, sp, #12
    1180:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1184:	e12fff1e 	bx	lr
    1188:	e1b0a4a4 	lsrs	sl, r4, #9
    118c:	01a0a1a4 	lsreq	sl, r4, #3
    1190:	01a0118a 	lsleq	r1, sl, #3
    1194:	1a000060 	bne	131c <_malloc_r+0x244>
    1198:	e59f6634 	ldr	r6, [pc, #1588]	; 17d4 <_malloc_r+0x6fc>
    119c:	e0861001 	add	r1, r6, r1
    11a0:	e591800c 	ldr	r8, [r1, #12]
    11a4:	e1510008 	cmp	r1, r8
    11a8:	e1a07006 	mov	r7, r6
    11ac:	1a000005 	bne	11c8 <_malloc_r+0xf0>
    11b0:	ea00000a 	b	11e0 <_malloc_r+0x108>
    11b4:	e3530000 	cmp	r3, #0
    11b8:	aa000110 	bge	1600 <_malloc_r+0x528>
    11bc:	e598800c 	ldr	r8, [r8, #12]
    11c0:	e1510008 	cmp	r1, r8
    11c4:	0a000005 	beq	11e0 <_malloc_r+0x108>
    11c8:	e5982004 	ldr	r2, [r8, #4]
    11cc:	e3c22003 	bic	r2, r2, #3
    11d0:	e0643002 	rsb	r3, r4, r2
    11d4:	e353000f 	cmp	r3, #15
    11d8:	dafffff5 	ble	11b4 <_malloc_r+0xdc>
    11dc:	e24aa001 	sub	sl, sl, #1
    11e0:	e28aa001 	add	sl, sl, #1
    11e4:	e59f05ec 	ldr	r0, [pc, #1516]	; 17d8 <_malloc_r+0x700>
    11e8:	e5908008 	ldr	r8, [r0, #8]
    11ec:	e1500008 	cmp	r0, r8
    11f0:	0a000092 	beq	1440 <_malloc_r+0x368>
    11f4:	e5982004 	ldr	r2, [r8, #4]
    11f8:	e3c22003 	bic	r2, r2, #3
    11fc:	e0643002 	rsb	r3, r4, r2
    1200:	e353000f 	cmp	r3, #15
    1204:	ca000113 	bgt	1658 <_malloc_r+0x580>
    1208:	e3530000 	cmp	r3, #0
    120c:	e580000c 	str	r0, [r0, #12]
    1210:	e5800008 	str	r0, [r0, #8]
    1214:	aa00005b 	bge	1388 <_malloc_r+0x2b0>
    1218:	e3520c02 	cmp	r2, #512	; 0x200
    121c:	2a000061 	bcs	13a8 <_malloc_r+0x2d0>
    1220:	e5971004 	ldr	r1, [r7, #4]
    1224:	e1a021a2 	lsr	r2, r2, #3
    1228:	e1a03142 	asr	r3, r2, #2
    122c:	e3a0c001 	mov	ip, #1
    1230:	e0872182 	add	r2, r7, r2, lsl #3
    1234:	e181331c 	orr	r3, r1, ip, lsl r3
    1238:	e5921008 	ldr	r1, [r2, #8]
    123c:	e588200c 	str	r2, [r8, #12]
    1240:	e5881008 	str	r1, [r8, #8]
    1244:	e3a0c001 	mov	ip, #1
    1248:	e5828008 	str	r8, [r2, #8]
    124c:	e1a0214a 	asr	r2, sl, #2
    1250:	e1a0c21c 	lsl	ip, ip, r2
    1254:	e15c0003 	cmp	ip, r3
    1258:	e5873004 	str	r3, [r7, #4]
    125c:	e581800c 	str	r8, [r1, #12]
    1260:	8a00007c 	bhi	1458 <_malloc_r+0x380>
    1264:	e113000c 	tst	r3, ip
    1268:	1a000008 	bne	1290 <_malloc_r+0x1b8>
    126c:	e1a0c08c 	lsl	ip, ip, #1
    1270:	e3caa003 	bic	sl, sl, #3
    1274:	e113000c 	tst	r3, ip
    1278:	e28aa004 	add	sl, sl, #4
    127c:	1a000003 	bne	1290 <_malloc_r+0x1b8>
    1280:	e1a0c08c 	lsl	ip, ip, #1
    1284:	e11c0003 	tst	ip, r3
    1288:	e28aa004 	add	sl, sl, #4
    128c:	0afffffb 	beq	1280 <_malloc_r+0x1a8>
    1290:	e087918a 	add	r9, r7, sl, lsl #3
    1294:	e1a0e009 	mov	lr, r9
    1298:	e1a0800a 	mov	r8, sl
    129c:	e59e300c 	ldr	r3, [lr, #12]
    12a0:	e15e0003 	cmp	lr, r3
    12a4:	1a000005 	bne	12c0 <_malloc_r+0x1e8>
    12a8:	ea0000f8 	b	1690 <_malloc_r+0x5b8>
    12ac:	e3520000 	cmp	r2, #0
    12b0:	aa000101 	bge	16bc <_malloc_r+0x5e4>
    12b4:	e593300c 	ldr	r3, [r3, #12]
    12b8:	e15e0003 	cmp	lr, r3
    12bc:	0a0000f3 	beq	1690 <_malloc_r+0x5b8>
    12c0:	e5931004 	ldr	r1, [r3, #4]
    12c4:	e3c11003 	bic	r1, r1, #3
    12c8:	e0642001 	rsb	r2, r4, r1
    12cc:	e352000f 	cmp	r2, #15
    12d0:	dafffff5 	ble	12ac <_malloc_r+0x1d4>
    12d4:	e1a08003 	mov	r8, r3
    12d8:	e593c00c 	ldr	ip, [r3, #12]
    12dc:	e5b8e008 	ldr	lr, [r8, #8]!
    12e0:	e0831004 	add	r1, r3, r4
    12e4:	e3826001 	orr	r6, r2, #1
    12e8:	e3844001 	orr	r4, r4, #1
    12ec:	e58ec00c 	str	ip, [lr, #12]
    12f0:	e58ce008 	str	lr, [ip, #8]
    12f4:	e580100c 	str	r1, [r0, #12]
    12f8:	e5801008 	str	r1, [r0, #8]
    12fc:	e5834004 	str	r4, [r3, #4]
    1300:	e581000c 	str	r0, [r1, #12]
    1304:	e5810008 	str	r0, [r1, #8]
    1308:	e5816004 	str	r6, [r1, #4]
    130c:	e7812002 	str	r2, [r1, r2]
    1310:	e1a00005 	mov	r0, r5
    1314:	eb000229 	bl	1bc0 <__malloc_unlock>
    1318:	eaffff96 	b	1178 <_malloc_r+0xa0>
    131c:	e35a0004 	cmp	sl, #4
    1320:	91a0a324 	lsrls	sl, r4, #6
    1324:	928aa038 	addls	sl, sl, #56	; 0x38
    1328:	91a0118a 	lslls	r1, sl, #3
    132c:	9affff99 	bls	1198 <_malloc_r+0xc0>
    1330:	e35a0014 	cmp	sl, #20
    1334:	928aa05b 	addls	sl, sl, #91	; 0x5b
    1338:	91a0118a 	lslls	r1, sl, #3
    133c:	9affff95 	bls	1198 <_malloc_r+0xc0>
    1340:	e35a0054 	cmp	sl, #84	; 0x54
    1344:	91a0a624 	lsrls	sl, r4, #12
    1348:	928aa06e 	addls	sl, sl, #110	; 0x6e
    134c:	91a0118a 	lslls	r1, sl, #3
    1350:	9affff90 	bls	1198 <_malloc_r+0xc0>
    1354:	e35a0f55 	cmp	sl, #340	; 0x154
    1358:	91a0a7a4 	lsrls	sl, r4, #15
    135c:	928aa077 	addls	sl, sl, #119	; 0x77
    1360:	91a0118a 	lslls	r1, sl, #3
    1364:	9affff8b 	bls	1198 <_malloc_r+0xc0>
    1368:	e59f346c 	ldr	r3, [pc, #1132]	; 17dc <_malloc_r+0x704>
    136c:	e15a0003 	cmp	sl, r3
    1370:	91a0a924 	lsrls	sl, r4, #18
    1374:	928aa07c 	addls	sl, sl, #124	; 0x7c
    1378:	91a0118a 	lslls	r1, sl, #3
    137c:	83a01e3f 	movhi	r1, #1008	; 0x3f0
    1380:	83a0a07e 	movhi	sl, #126	; 0x7e
    1384:	eaffff83 	b	1198 <_malloc_r+0xc0>
    1388:	e0882002 	add	r2, r8, r2
    138c:	e5923004 	ldr	r3, [r2, #4]
    1390:	e3833001 	orr	r3, r3, #1
    1394:	e5823004 	str	r3, [r2, #4]
    1398:	e1a00005 	mov	r0, r5
    139c:	eb000207 	bl	1bc0 <__malloc_unlock>
    13a0:	e2888008 	add	r8, r8, #8
    13a4:	eaffff73 	b	1178 <_malloc_r+0xa0>
    13a8:	e1a034a2 	lsr	r3, r2, #9
    13ac:	e3530004 	cmp	r3, #4
    13b0:	91a01322 	lsrls	r1, r2, #6
    13b4:	92811038 	addls	r1, r1, #56	; 0x38
    13b8:	9a00000f 	bls	13fc <_malloc_r+0x324>
    13bc:	e3530014 	cmp	r3, #20
    13c0:	9283105b 	addls	r1, r3, #91	; 0x5b
    13c4:	9a00000c 	bls	13fc <_malloc_r+0x324>
    13c8:	e3530054 	cmp	r3, #84	; 0x54
    13cc:	91a01622 	lsrls	r1, r2, #12
    13d0:	9281106e 	addls	r1, r1, #110	; 0x6e
    13d4:	9a000008 	bls	13fc <_malloc_r+0x324>
    13d8:	e3530f55 	cmp	r3, #340	; 0x154
    13dc:	91a017a2 	lsrls	r1, r2, #15
    13e0:	92811077 	addls	r1, r1, #119	; 0x77
    13e4:	9a000004 	bls	13fc <_malloc_r+0x324>
    13e8:	e59f13ec 	ldr	r1, [pc, #1004]	; 17dc <_malloc_r+0x704>
    13ec:	e1530001 	cmp	r3, r1
    13f0:	91a01922 	lsrls	r1, r2, #18
    13f4:	9281107c 	addls	r1, r1, #124	; 0x7c
    13f8:	83a0107e 	movhi	r1, #126	; 0x7e
    13fc:	e087c181 	add	ip, r7, r1, lsl #3
    1400:	e59c3008 	ldr	r3, [ip, #8]
    1404:	e153000c 	cmp	r3, ip
    1408:	1a000003 	bne	141c <_malloc_r+0x344>
    140c:	ea0000d3 	b	1760 <_malloc_r+0x688>
    1410:	e5933008 	ldr	r3, [r3, #8]
    1414:	e15c0003 	cmp	ip, r3
    1418:	0a000003 	beq	142c <_malloc_r+0x354>
    141c:	e5931004 	ldr	r1, [r3, #4]
    1420:	e3c11003 	bic	r1, r1, #3
    1424:	e1520001 	cmp	r2, r1
    1428:	3afffff8 	bcc	1410 <_malloc_r+0x338>
    142c:	e593200c 	ldr	r2, [r3, #12]
    1430:	e588200c 	str	r2, [r8, #12]
    1434:	e5883008 	str	r3, [r8, #8]
    1438:	e583800c 	str	r8, [r3, #12]
    143c:	e5828008 	str	r8, [r2, #8]
    1440:	e1a0214a 	asr	r2, sl, #2
    1444:	e3a0c001 	mov	ip, #1
    1448:	e1a0c21c 	lsl	ip, ip, r2
    144c:	e5973004 	ldr	r3, [r7, #4]
    1450:	e15c0003 	cmp	ip, r3
    1454:	9affff82 	bls	1264 <_malloc_r+0x18c>
    1458:	e5978008 	ldr	r8, [r7, #8]
    145c:	e598a004 	ldr	sl, [r8, #4]
    1460:	e3caa003 	bic	sl, sl, #3
    1464:	e154000a 	cmp	r4, sl
    1468:	93a03000 	movls	r3, #0
    146c:	83a03001 	movhi	r3, #1
    1470:	e064200a 	rsb	r2, r4, sl
    1474:	e352000f 	cmp	r2, #15
    1478:	d3833001 	orrle	r3, r3, #1
    147c:	e3530000 	cmp	r3, #0
    1480:	0a00006a 	beq	1630 <_malloc_r+0x558>
    1484:	e59f9354 	ldr	r9, [pc, #852]	; 17e0 <_malloc_r+0x708>
    1488:	e599b000 	ldr	fp, [r9]
    148c:	e5963408 	ldr	r3, [r6, #1032]	; 0x408
    1490:	e28bb010 	add	fp, fp, #16
    1494:	e3730001 	cmn	r3, #1
    1498:	e08bb004 	add	fp, fp, r4
    149c:	128bbeff 	addne	fp, fp, #4080	; 0xff0
    14a0:	128bb00f 	addne	fp, fp, #15
    14a4:	13cbbeff 	bicne	fp, fp, #4080	; 0xff0
    14a8:	13cbb00f 	bicne	fp, fp, #15
    14ac:	e1a00005 	mov	r0, r5
    14b0:	e1a0100b 	mov	r1, fp
    14b4:	ebfffd7a 	bl	aa4 <_sbrk_r>
    14b8:	e3700001 	cmn	r0, #1
    14bc:	e1a03000 	mov	r3, r0
    14c0:	0a00009c 	beq	1738 <_malloc_r+0x660>
    14c4:	e088100a 	add	r1, r8, sl
    14c8:	e1510000 	cmp	r1, r0
    14cc:	8a000097 	bhi	1730 <_malloc_r+0x658>
    14d0:	e5992004 	ldr	r2, [r9, #4]
    14d4:	e1510000 	cmp	r1, r0
    14d8:	e08b2002 	add	r2, fp, r2
    14dc:	e5892004 	str	r2, [r9, #4]
    14e0:	0a0000aa 	beq	1790 <_malloc_r+0x6b8>
    14e4:	e596c408 	ldr	ip, [r6, #1032]	; 0x408
    14e8:	e37c0001 	cmn	ip, #1
    14ec:	10802002 	addne	r2, r0, r2
    14f0:	059f22dc 	ldreq	r2, [pc, #732]	; 17d4 <_malloc_r+0x6fc>
    14f4:	10611002 	rsbne	r1, r1, r2
    14f8:	05820408 	streq	r0, [r2, #1032]	; 0x408
    14fc:	15891004 	strne	r1, [r9, #4]
    1500:	e2106007 	ands	r6, r0, #7
    1504:	12666008 	rsbne	r6, r6, #8
    1508:	10803006 	addne	r3, r0, r6
    150c:	e083200b 	add	r2, r3, fp
    1510:	12866a01 	addne	r6, r6, #4096	; 0x1000
    1514:	03a06a01 	moveq	r6, #4096	; 0x1000
    1518:	e1a02a02 	lsl	r2, r2, #20
    151c:	e0466a22 	sub	r6, r6, r2, lsr #20
    1520:	e1a01006 	mov	r1, r6
    1524:	e1a00005 	mov	r0, r5
    1528:	e58d3004 	str	r3, [sp, #4]
    152c:	ebfffd5c 	bl	aa4 <_sbrk_r>
    1530:	e59d3004 	ldr	r3, [sp, #4]
    1534:	e3700001 	cmn	r0, #1
    1538:	10631000 	rsbne	r1, r3, r0
    153c:	e5992004 	ldr	r2, [r9, #4]
    1540:	10811006 	addne	r1, r1, r6
    1544:	03a06000 	moveq	r6, #0
    1548:	13811001 	orrne	r1, r1, #1
    154c:	03a01001 	moveq	r1, #1
    1550:	e0862002 	add	r2, r6, r2
    1554:	e1580007 	cmp	r8, r7
    1558:	e5892004 	str	r2, [r9, #4]
    155c:	e5873008 	str	r3, [r7, #8]
    1560:	e5831004 	str	r1, [r3, #4]
    1564:	0a00000d 	beq	15a0 <_malloc_r+0x4c8>
    1568:	e35a000f 	cmp	sl, #15
    156c:	9a000082 	bls	177c <_malloc_r+0x6a4>
    1570:	e598c004 	ldr	ip, [r8, #4]
    1574:	e24a300c 	sub	r3, sl, #12
    1578:	e3c33007 	bic	r3, r3, #7
    157c:	e20cc001 	and	ip, ip, #1
    1580:	e0881003 	add	r1, r8, r3
    1584:	e3a00005 	mov	r0, #5
    1588:	e183c00c 	orr	ip, r3, ip
    158c:	e353000f 	cmp	r3, #15
    1590:	e588c004 	str	ip, [r8, #4]
    1594:	e5810004 	str	r0, [r1, #4]
    1598:	e5810008 	str	r0, [r1, #8]
    159c:	8a000082 	bhi	17ac <_malloc_r+0x6d4>
    15a0:	e599302c 	ldr	r3, [r9, #44]	; 0x2c
    15a4:	e1520003 	cmp	r2, r3
    15a8:	859f3230 	ldrhi	r3, [pc, #560]	; 17e0 <_malloc_r+0x708>
    15ac:	8583202c 	strhi	r2, [r3, #44]	; 0x2c
    15b0:	e5993030 	ldr	r3, [r9, #48]	; 0x30
    15b4:	e1520003 	cmp	r2, r3
    15b8:	9a00005e 	bls	1738 <_malloc_r+0x660>
    15bc:	e5978008 	ldr	r8, [r7, #8]
    15c0:	e59f1218 	ldr	r1, [pc, #536]	; 17e0 <_malloc_r+0x708>
    15c4:	e5983004 	ldr	r3, [r8, #4]
    15c8:	e5812030 	str	r2, [r1, #48]	; 0x30
    15cc:	e3c32003 	bic	r2, r3, #3
    15d0:	e1540002 	cmp	r4, r2
    15d4:	93a03000 	movls	r3, #0
    15d8:	83a03001 	movhi	r3, #1
    15dc:	e0642002 	rsb	r2, r4, r2
    15e0:	e352000f 	cmp	r2, #15
    15e4:	d3833001 	orrle	r3, r3, #1
    15e8:	e3530000 	cmp	r3, #0
    15ec:	0a00000f 	beq	1630 <_malloc_r+0x558>
    15f0:	e1a00005 	mov	r0, r5
    15f4:	eb000171 	bl	1bc0 <__malloc_unlock>
    15f8:	e3a08000 	mov	r8, #0
    15fc:	eafffedd 	b	1178 <_malloc_r+0xa0>
    1600:	e0882002 	add	r2, r8, r2
    1604:	e5920004 	ldr	r0, [r2, #4]
    1608:	e2881008 	add	r1, r8, #8
    160c:	e891000a 	ldm	r1, {r1, r3}
    1610:	e3800001 	orr	r0, r0, #1
    1614:	e5820004 	str	r0, [r2, #4]
    1618:	e581300c 	str	r3, [r1, #12]
    161c:	e5831008 	str	r1, [r3, #8]
    1620:	e1a00005 	mov	r0, r5
    1624:	eb000165 	bl	1bc0 <__malloc_unlock>
    1628:	e2888008 	add	r8, r8, #8
    162c:	eafffed1 	b	1178 <_malloc_r+0xa0>
    1630:	e0883004 	add	r3, r8, r4
    1634:	e3822001 	orr	r2, r2, #1
    1638:	e3844001 	orr	r4, r4, #1
    163c:	e5884004 	str	r4, [r8, #4]
    1640:	e1a00005 	mov	r0, r5
    1644:	e5832004 	str	r2, [r3, #4]
    1648:	e5873008 	str	r3, [r7, #8]
    164c:	eb00015b 	bl	1bc0 <__malloc_unlock>
    1650:	e2888008 	add	r8, r8, #8
    1654:	eafffec7 	b	1178 <_malloc_r+0xa0>
    1658:	e0882004 	add	r2, r8, r4
    165c:	e3831001 	orr	r1, r3, #1
    1660:	e3844001 	orr	r4, r4, #1
    1664:	e5884004 	str	r4, [r8, #4]
    1668:	e580200c 	str	r2, [r0, #12]
    166c:	e5802008 	str	r2, [r0, #8]
    1670:	e582000c 	str	r0, [r2, #12]
    1674:	e5820008 	str	r0, [r2, #8]
    1678:	e5821004 	str	r1, [r2, #4]
    167c:	e7823003 	str	r3, [r2, r3]
    1680:	e1a00005 	mov	r0, r5
    1684:	eb00014d 	bl	1bc0 <__malloc_unlock>
    1688:	e2888008 	add	r8, r8, #8
    168c:	eafffeb9 	b	1178 <_malloc_r+0xa0>
    1690:	e2888001 	add	r8, r8, #1
    1694:	e3180003 	tst	r8, #3
    1698:	0a000014 	beq	16f0 <_malloc_r+0x618>
    169c:	e28ee008 	add	lr, lr, #8
    16a0:	eafffefd 	b	129c <_malloc_r+0x1c4>
    16a4:	e2883008 	add	r3, r8, #8
    16a8:	e5988014 	ldr	r8, [r8, #20]
    16ac:	e1530008 	cmp	r3, r8
    16b0:	028aa002 	addeq	sl, sl, #2
    16b4:	0afffeca 	beq	11e4 <_malloc_r+0x10c>
    16b8:	eafffea1 	b	1144 <_malloc_r+0x6c>
    16bc:	e0831001 	add	r1, r3, r1
    16c0:	e5910004 	ldr	r0, [r1, #4]
    16c4:	e1a08003 	mov	r8, r3
    16c8:	e5b82008 	ldr	r2, [r8, #8]!
    16cc:	e593300c 	ldr	r3, [r3, #12]
    16d0:	e3800001 	orr	r0, r0, #1
    16d4:	e5810004 	str	r0, [r1, #4]
    16d8:	e582300c 	str	r3, [r2, #12]
    16dc:	e5832008 	str	r2, [r3, #8]
    16e0:	e1a00005 	mov	r0, r5
    16e4:	eb000135 	bl	1bc0 <__malloc_unlock>
    16e8:	eafffea2 	b	1178 <_malloc_r+0xa0>
    16ec:	e24aa001 	sub	sl, sl, #1
    16f0:	e31a0003 	tst	sl, #3
    16f4:	e1a03009 	mov	r3, r9
    16f8:	0a000031 	beq	17c4 <_malloc_r+0x6ec>
    16fc:	e4139008 	ldr	r9, [r3], #-8
    1700:	e1590003 	cmp	r9, r3
    1704:	0afffff8 	beq	16ec <_malloc_r+0x614>
    1708:	e5973004 	ldr	r3, [r7, #4]
    170c:	e1a0c08c 	lsl	ip, ip, #1
    1710:	e15c0003 	cmp	ip, r3
    1714:	8affff4f 	bhi	1458 <_malloc_r+0x380>
    1718:	e35c0000 	cmp	ip, #0
    171c:	0affff4d 	beq	1458 <_malloc_r+0x380>
    1720:	e11c0003 	tst	ip, r3
    1724:	0a000007 	beq	1748 <_malloc_r+0x670>
    1728:	e1a0a008 	mov	sl, r8
    172c:	eafffed7 	b	1290 <_malloc_r+0x1b8>
    1730:	e1580007 	cmp	r8, r7
    1734:	0affff65 	beq	14d0 <_malloc_r+0x3f8>
    1738:	e5978008 	ldr	r8, [r7, #8]
    173c:	e5982004 	ldr	r2, [r8, #4]
    1740:	e3c22003 	bic	r2, r2, #3
    1744:	eaffffa1 	b	15d0 <_malloc_r+0x4f8>
    1748:	e1a0c08c 	lsl	ip, ip, #1
    174c:	e11c0003 	tst	ip, r3
    1750:	e2888004 	add	r8, r8, #4
    1754:	0afffffb 	beq	1748 <_malloc_r+0x670>
    1758:	e1a0a008 	mov	sl, r8
    175c:	eafffecb 	b	1290 <_malloc_r+0x1b8>
    1760:	e5972004 	ldr	r2, [r7, #4]
    1764:	e1a01141 	asr	r1, r1, #2
    1768:	e3a0c001 	mov	ip, #1
    176c:	e182111c 	orr	r1, r2, ip, lsl r1
    1770:	e1a02003 	mov	r2, r3
    1774:	e5871004 	str	r1, [r7, #4]
    1778:	eaffff2c 	b	1430 <_malloc_r+0x358>
    177c:	e3a02001 	mov	r2, #1
    1780:	e5832004 	str	r2, [r3, #4]
    1784:	e1a08003 	mov	r8, r3
    1788:	e3a02000 	mov	r2, #0
    178c:	eaffff8f 	b	15d0 <_malloc_r+0x4f8>
    1790:	e1b0ca01 	lsls	ip, r1, #20
    1794:	1affff52 	bne	14e4 <_malloc_r+0x40c>
    1798:	e5973008 	ldr	r3, [r7, #8]
    179c:	e08b100a 	add	r1, fp, sl
    17a0:	e3811001 	orr	r1, r1, #1
    17a4:	e5831004 	str	r1, [r3, #4]
    17a8:	eaffff7c 	b	15a0 <_malloc_r+0x4c8>
    17ac:	e1a00005 	mov	r0, r5
    17b0:	e2881008 	add	r1, r8, #8
    17b4:	eb000522 	bl	2c44 <_free_r>
    17b8:	e59f3020 	ldr	r3, [pc, #32]	; 17e0 <_malloc_r+0x708>
    17bc:	e5932004 	ldr	r2, [r3, #4]
    17c0:	eaffff76 	b	15a0 <_malloc_r+0x4c8>
    17c4:	e5973004 	ldr	r3, [r7, #4]
    17c8:	e1c3300c 	bic	r3, r3, ip
    17cc:	e5873004 	str	r3, [r7, #4]
    17d0:	eaffffcc 	b	1708 <_malloc_r+0x630>
    17d4:	40000430 	.word	0x40000430
    17d8:	40000438 	.word	0x40000438
    17dc:	00000554 	.word	0x00000554
    17e0:	40000840 	.word	0x40000840

000017e4 <memchr>:
    17e4:	e3100003 	tst	r0, #3
    17e8:	e92d0070 	push	{r4, r5, r6}
    17ec:	e20110ff 	and	r1, r1, #255	; 0xff
    17f0:	e1a04000 	mov	r4, r0
    17f4:	0a000010 	beq	183c <memchr+0x58>
    17f8:	e3520000 	cmp	r2, #0
    17fc:	0a00001f 	beq	1880 <memchr+0x9c>
    1800:	e5d03000 	ldrb	r3, [r0]
    1804:	e1530001 	cmp	r3, r1
    1808:	12422001 	subne	r2, r2, #1
    180c:	12803001 	addne	r3, r0, #1
    1810:	1a000006 	bne	1830 <memchr+0x4c>
    1814:	ea00001a 	b	1884 <memchr+0xa0>
    1818:	e3520000 	cmp	r2, #0
    181c:	0a000017 	beq	1880 <memchr+0x9c>
    1820:	e4d3c001 	ldrb	ip, [r3], #1
    1824:	e15c0001 	cmp	ip, r1
    1828:	0a000017 	beq	188c <memchr+0xa8>
    182c:	e2422001 	sub	r2, r2, #1
    1830:	e3130003 	tst	r3, #3
    1834:	e1a04003 	mov	r4, r3
    1838:	1afffff6 	bne	1818 <memchr+0x34>
    183c:	e3520003 	cmp	r2, #3
    1840:	8a000013 	bhi	1894 <memchr+0xb0>
    1844:	e3520000 	cmp	r2, #0
    1848:	0a00000c 	beq	1880 <memchr+0x9c>
    184c:	e5d43000 	ldrb	r3, [r4]
    1850:	e1530001 	cmp	r3, r1
    1854:	12422001 	subne	r2, r2, #1
    1858:	12843001 	addne	r3, r4, #1
    185c:	1a000004 	bne	1874 <memchr+0x90>
    1860:	ea000009 	b	188c <memchr+0xa8>
    1864:	e4d3c001 	ldrb	ip, [r3], #1
    1868:	e15c0001 	cmp	ip, r1
    186c:	e2422001 	sub	r2, r2, #1
    1870:	0a000003 	beq	1884 <memchr+0xa0>
    1874:	e3520000 	cmp	r2, #0
    1878:	e1a00003 	mov	r0, r3
    187c:	1afffff8 	bne	1864 <memchr+0x80>
    1880:	e1a00002 	mov	r0, r2
    1884:	e8bd0070 	pop	{r4, r5, r6}
    1888:	e12fff1e 	bx	lr
    188c:	e1a00004 	mov	r0, r4
    1890:	eafffffb 	b	1884 <memchr+0xa0>
    1894:	e1810401 	orr	r0, r1, r1, lsl #8
    1898:	e1800800 	orr	r0, r0, r0, lsl #16
    189c:	e1a03004 	mov	r3, r4
    18a0:	e1a04003 	mov	r4, r3
    18a4:	e4936004 	ldr	r6, [r3], #4
    18a8:	e59f502c 	ldr	r5, [pc, #44]	; 18dc <memchr+0xf8>
    18ac:	e0206006 	eor	r6, r0, r6
    18b0:	e0865005 	add	r5, r6, r5
    18b4:	e59fc024 	ldr	ip, [pc, #36]	; 18e0 <memchr+0xfc>
    18b8:	e1c55006 	bic	r5, r5, r6
    18bc:	e005c00c 	and	ip, r5, ip
    18c0:	e35c0000 	cmp	ip, #0
    18c4:	1affffde 	bne	1844 <memchr+0x60>
    18c8:	e2422004 	sub	r2, r2, #4
    18cc:	e3520003 	cmp	r2, #3
    18d0:	e1a04003 	mov	r4, r3
    18d4:	8afffff1 	bhi	18a0 <memchr+0xbc>
    18d8:	eaffffd9 	b	1844 <memchr+0x60>
    18dc:	fefefeff 	.word	0xfefefeff
    18e0:	80808080 	.word	0x80808080

000018e4 <memcpy>:
    18e4:	e3520003 	cmp	r2, #3
    18e8:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    18ec:	8a000009 	bhi	1918 <memcpy+0x34>
    18f0:	e3520000 	cmp	r2, #0
    18f4:	0a000005 	beq	1910 <memcpy+0x2c>
    18f8:	e3a03000 	mov	r3, #0
    18fc:	e7d1c003 	ldrb	ip, [r1, r3]
    1900:	e7c0c003 	strb	ip, [r0, r3]
    1904:	e2833001 	add	r3, r3, #1
    1908:	e1530002 	cmp	r3, r2
    190c:	1afffffa 	bne	18fc <memcpy+0x18>
    1910:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    1914:	e12fff1e 	bx	lr
    1918:	e1a03001 	mov	r3, r1
    191c:	e0802002 	add	r2, r0, r2
    1920:	e1a01000 	mov	r1, r0
    1924:	ea000002 	b	1934 <memcpy+0x50>
    1928:	e5dcc000 	ldrb	ip, [ip]
    192c:	e4c1c001 	strb	ip, [r1], #1
    1930:	e2833001 	add	r3, r3, #1
    1934:	e3110003 	tst	r1, #3
    1938:	e1a0c003 	mov	ip, r3
    193c:	1afffff9 	bne	1928 <memcpy+0x44>
    1940:	e2134003 	ands	r4, r3, #3
    1944:	0a000034 	beq	1a1c <memcpy+0x138>
    1948:	e2645000 	rsb	r5, r4, #0
    194c:	e2647004 	rsb	r7, r4, #4
    1950:	e7933005 	ldr	r3, [r3, r5]
    1954:	e1a04184 	lsl	r4, r4, #3
    1958:	e1a07187 	lsl	r7, r7, #3
    195c:	ea000005 	b	1978 <memcpy+0x94>
    1960:	e28cc004 	add	ip, ip, #4
    1964:	e79c6005 	ldr	r6, [ip, r5]
    1968:	e1a08716 	lsl	r8, r6, r7
    196c:	e1883433 	orr	r3, r8, r3, lsr r4
    1970:	e4813004 	str	r3, [r1], #4
    1974:	e1a03006 	mov	r3, r6
    1978:	e0616002 	rsb	r6, r1, r2
    197c:	e3560003 	cmp	r6, #3
    1980:	cafffff6 	bgt	1960 <memcpy+0x7c>
    1984:	ea000001 	b	1990 <memcpy+0xac>
    1988:	e4dc3001 	ldrb	r3, [ip], #1
    198c:	e4c13001 	strb	r3, [r1], #1
    1990:	e1520001 	cmp	r2, r1
    1994:	8afffffb 	bhi	1988 <memcpy+0xa4>
    1998:	eaffffdc 	b	1910 <memcpy+0x2c>
    199c:	e513c040 	ldr	ip, [r3, #-64]	; 0xffffffc0
    19a0:	e501c040 	str	ip, [r1, #-64]	; 0xffffffc0
    19a4:	e513c03c 	ldr	ip, [r3, #-60]	; 0xffffffc4
    19a8:	e501c03c 	str	ip, [r1, #-60]	; 0xffffffc4
    19ac:	e513c038 	ldr	ip, [r3, #-56]	; 0xffffffc8
    19b0:	e501c038 	str	ip, [r1, #-56]	; 0xffffffc8
    19b4:	e513c034 	ldr	ip, [r3, #-52]	; 0xffffffcc
    19b8:	e501c034 	str	ip, [r1, #-52]	; 0xffffffcc
    19bc:	e513c030 	ldr	ip, [r3, #-48]	; 0xffffffd0
    19c0:	e501c030 	str	ip, [r1, #-48]	; 0xffffffd0
    19c4:	e513c02c 	ldr	ip, [r3, #-44]	; 0xffffffd4
    19c8:	e501c02c 	str	ip, [r1, #-44]	; 0xffffffd4
    19cc:	e513c028 	ldr	ip, [r3, #-40]	; 0xffffffd8
    19d0:	e501c028 	str	ip, [r1, #-40]	; 0xffffffd8
    19d4:	e513c024 	ldr	ip, [r3, #-36]	; 0xffffffdc
    19d8:	e501c024 	str	ip, [r1, #-36]	; 0xffffffdc
    19dc:	e513c020 	ldr	ip, [r3, #-32]	; 0xffffffe0
    19e0:	e501c020 	str	ip, [r1, #-32]	; 0xffffffe0
    19e4:	e513c01c 	ldr	ip, [r3, #-28]	; 0xffffffe4
    19e8:	e501c01c 	str	ip, [r1, #-28]	; 0xffffffe4
    19ec:	e513c018 	ldr	ip, [r3, #-24]	; 0xffffffe8
    19f0:	e501c018 	str	ip, [r1, #-24]	; 0xffffffe8
    19f4:	e513c014 	ldr	ip, [r3, #-20]	; 0xffffffec
    19f8:	e501c014 	str	ip, [r1, #-20]	; 0xffffffec
    19fc:	e513c010 	ldr	ip, [r3, #-16]
    1a00:	e501c010 	str	ip, [r1, #-16]
    1a04:	e513c00c 	ldr	ip, [r3, #-12]
    1a08:	e501c00c 	str	ip, [r1, #-12]
    1a0c:	e513c008 	ldr	ip, [r3, #-8]
    1a10:	e501c008 	str	ip, [r1, #-8]
    1a14:	e513c004 	ldr	ip, [r3, #-4]
    1a18:	e501c004 	str	ip, [r1, #-4]
    1a1c:	e061c002 	rsb	ip, r1, r2
    1a20:	e35c003f 	cmp	ip, #63	; 0x3f
    1a24:	e1a04003 	mov	r4, r3
    1a28:	e1a0c001 	mov	ip, r1
    1a2c:	e2833040 	add	r3, r3, #64	; 0x40
    1a30:	e2811040 	add	r1, r1, #64	; 0x40
    1a34:	caffffd8 	bgt	199c <memcpy+0xb8>
    1a38:	e1a03004 	mov	r3, r4
    1a3c:	ea000007 	b	1a60 <memcpy+0x17c>
    1a40:	e5131010 	ldr	r1, [r3, #-16]
    1a44:	e50c1010 	str	r1, [ip, #-16]
    1a48:	e513100c 	ldr	r1, [r3, #-12]
    1a4c:	e50c100c 	str	r1, [ip, #-12]
    1a50:	e5131008 	ldr	r1, [r3, #-8]
    1a54:	e50c1008 	str	r1, [ip, #-8]
    1a58:	e5131004 	ldr	r1, [r3, #-4]
    1a5c:	e50c1004 	str	r1, [ip, #-4]
    1a60:	e1a0100c 	mov	r1, ip
    1a64:	e06cc002 	rsb	ip, ip, r2
    1a68:	e35c000f 	cmp	ip, #15
    1a6c:	e1a04003 	mov	r4, r3
    1a70:	e281c010 	add	ip, r1, #16
    1a74:	e2833010 	add	r3, r3, #16
    1a78:	cafffff0 	bgt	1a40 <memcpy+0x15c>
    1a7c:	e1a03004 	mov	r3, r4
    1a80:	ea000002 	b	1a90 <memcpy+0x1ac>
    1a84:	e59cc000 	ldr	ip, [ip]
    1a88:	e481c004 	str	ip, [r1], #4
    1a8c:	e2833004 	add	r3, r3, #4
    1a90:	e061c002 	rsb	ip, r1, r2
    1a94:	e35c0003 	cmp	ip, #3
    1a98:	e1a0c003 	mov	ip, r3
    1a9c:	cafffff8 	bgt	1a84 <memcpy+0x1a0>
    1aa0:	eaffffba 	b	1990 <memcpy+0xac>

00001aa4 <memmove>:
    1aa4:	e1500001 	cmp	r0, r1
    1aa8:	e92d00f0 	push	{r4, r5, r6, r7}
    1aac:	e1a04000 	mov	r4, r0
    1ab0:	e1a05001 	mov	r5, r1
    1ab4:	9a00000c 	bls	1aec <memmove+0x48>
    1ab8:	e0813002 	add	r3, r1, r2
    1abc:	e1500003 	cmp	r0, r3
    1ac0:	2a000009 	bcs	1aec <memmove+0x48>
    1ac4:	e3520000 	cmp	r2, #0
    1ac8:	0a000005 	beq	1ae4 <memmove+0x40>
    1acc:	e1a01003 	mov	r1, r3
    1ad0:	e0803002 	add	r3, r0, r2
    1ad4:	e571c001 	ldrb	ip, [r1, #-1]!
    1ad8:	e2522001 	subs	r2, r2, #1
    1adc:	e563c001 	strb	ip, [r3, #-1]!
    1ae0:	1afffffb 	bne	1ad4 <memmove+0x30>
    1ae4:	e8bd00f0 	pop	{r4, r5, r6, r7}
    1ae8:	e12fff1e 	bx	lr
    1aec:	e352000f 	cmp	r2, #15
    1af0:	9a000028 	bls	1b98 <memmove+0xf4>
    1af4:	e1813000 	orr	r3, r1, r0
    1af8:	e3130003 	tst	r3, #3
    1afc:	1a000027 	bne	1ba0 <memmove+0xfc>
    1b00:	e1a0c001 	mov	ip, r1
    1b04:	e1a03000 	mov	r3, r0
    1b08:	e1a04002 	mov	r4, r2
    1b0c:	e59c5000 	ldr	r5, [ip]
    1b10:	e5835000 	str	r5, [r3]
    1b14:	e59c5004 	ldr	r5, [ip, #4]
    1b18:	e5835004 	str	r5, [r3, #4]
    1b1c:	e59c5008 	ldr	r5, [ip, #8]
    1b20:	e5835008 	str	r5, [r3, #8]
    1b24:	e2444010 	sub	r4, r4, #16
    1b28:	e59c500c 	ldr	r5, [ip, #12]
    1b2c:	e354000f 	cmp	r4, #15
    1b30:	e583500c 	str	r5, [r3, #12]
    1b34:	e28cc010 	add	ip, ip, #16
    1b38:	e2833010 	add	r3, r3, #16
    1b3c:	8afffff2 	bhi	1b0c <memmove+0x68>
    1b40:	e2422010 	sub	r2, r2, #16
    1b44:	e3c2500f 	bic	r5, r2, #15
    1b48:	e202200f 	and	r2, r2, #15
    1b4c:	e2855010 	add	r5, r5, #16
    1b50:	e3520003 	cmp	r2, #3
    1b54:	e0804005 	add	r4, r0, r5
    1b58:	e0815005 	add	r5, r1, r5
    1b5c:	9a00000d 	bls	1b98 <memmove+0xf4>
    1b60:	e1a06005 	mov	r6, r5
    1b64:	e1a0c004 	mov	ip, r4
    1b68:	e1a03002 	mov	r3, r2
    1b6c:	e4967004 	ldr	r7, [r6], #4
    1b70:	e2433004 	sub	r3, r3, #4
    1b74:	e3530003 	cmp	r3, #3
    1b78:	e48c7004 	str	r7, [ip], #4
    1b7c:	8afffffa 	bhi	1b6c <memmove+0xc8>
    1b80:	e2422004 	sub	r2, r2, #4
    1b84:	e3c23003 	bic	r3, r2, #3
    1b88:	e2833004 	add	r3, r3, #4
    1b8c:	e0844003 	add	r4, r4, r3
    1b90:	e0855003 	add	r5, r5, r3
    1b94:	e2022003 	and	r2, r2, #3
    1b98:	e3520000 	cmp	r2, #0
    1b9c:	0affffd0 	beq	1ae4 <memmove+0x40>
    1ba0:	e3a03000 	mov	r3, #0
    1ba4:	e7d5c003 	ldrb	ip, [r5, r3]
    1ba8:	e7c4c003 	strb	ip, [r4, r3]
    1bac:	e2833001 	add	r3, r3, #1
    1bb0:	e1530002 	cmp	r3, r2
    1bb4:	1afffffa 	bne	1ba4 <memmove+0x100>
    1bb8:	eaffffc9 	b	1ae4 <memmove+0x40>

00001bbc <__malloc_lock>:
    1bbc:	e12fff1e 	bx	lr

00001bc0 <__malloc_unlock>:
    1bc0:	e12fff1e 	bx	lr

00001bc4 <_putc_r>:
    1bc4:	e92d4070 	push	{r4, r5, r6, lr}
    1bc8:	e2504000 	subs	r4, r0, #0
    1bcc:	e1a06001 	mov	r6, r1
    1bd0:	e1a05002 	mov	r5, r2
    1bd4:	0a000002 	beq	1be4 <_putc_r+0x20>
    1bd8:	e5943038 	ldr	r3, [r4, #56]	; 0x38
    1bdc:	e3530000 	cmp	r3, #0
    1be0:	0a00001b 	beq	1c54 <_putc_r+0x90>
    1be4:	e5953008 	ldr	r3, [r5, #8]
    1be8:	e2433001 	sub	r3, r3, #1
    1bec:	e3530000 	cmp	r3, #0
    1bf0:	e5853008 	str	r3, [r5, #8]
    1bf4:	ba000006 	blt	1c14 <_putc_r+0x50>
    1bf8:	e5953000 	ldr	r3, [r5]
    1bfc:	e5c36000 	strb	r6, [r3]
    1c00:	e5953000 	ldr	r3, [r5]
    1c04:	e4d30001 	ldrb	r0, [r3], #1
    1c08:	e5853000 	str	r3, [r5]
    1c0c:	e8bd4070 	pop	{r4, r5, r6, lr}
    1c10:	e12fff1e 	bx	lr
    1c14:	e5952018 	ldr	r2, [r5, #24]
    1c18:	e1530002 	cmp	r3, r2
    1c1c:	ba00000e 	blt	1c5c <_putc_r+0x98>
    1c20:	e5953000 	ldr	r3, [r5]
    1c24:	e5c36000 	strb	r6, [r3]
    1c28:	e5953000 	ldr	r3, [r5]
    1c2c:	e5d31000 	ldrb	r1, [r3]
    1c30:	e351000a 	cmp	r1, #10
    1c34:	12833001 	addne	r3, r3, #1
    1c38:	11a00001 	movne	r0, r1
    1c3c:	15853000 	strne	r3, [r5]
    1c40:	1afffff1 	bne	1c0c <_putc_r+0x48>
    1c44:	e1a00004 	mov	r0, r4
    1c48:	e1a02005 	mov	r2, r5
    1c4c:	eb0001a6 	bl	22ec <__swbuf_r>
    1c50:	eaffffed 	b	1c0c <_putc_r+0x48>
    1c54:	eb00030e 	bl	2894 <__sinit>
    1c58:	eaffffe1 	b	1be4 <_putc_r+0x20>
    1c5c:	e1a00004 	mov	r0, r4
    1c60:	e1a01006 	mov	r1, r6
    1c64:	e1a02005 	mov	r2, r5
    1c68:	eb00019f 	bl	22ec <__swbuf_r>
    1c6c:	eaffffe6 	b	1c0c <_putc_r+0x48>

00001c70 <putc>:
    1c70:	e92d4070 	push	{r4, r5, r6, lr}
    1c74:	e59f50ac 	ldr	r5, [pc, #172]	; 1d28 <putc+0xb8>
    1c78:	e5953000 	ldr	r3, [r5]
    1c7c:	e3530000 	cmp	r3, #0
    1c80:	e1a06000 	mov	r6, r0
    1c84:	e1a04001 	mov	r4, r1
    1c88:	0a000002 	beq	1c98 <putc+0x28>
    1c8c:	e5932038 	ldr	r2, [r3, #56]	; 0x38
    1c90:	e3520000 	cmp	r2, #0
    1c94:	0a00001b 	beq	1d08 <putc+0x98>
    1c98:	e5943008 	ldr	r3, [r4, #8]
    1c9c:	e2433001 	sub	r3, r3, #1
    1ca0:	e3530000 	cmp	r3, #0
    1ca4:	e5843008 	str	r3, [r4, #8]
    1ca8:	ba000006 	blt	1cc8 <putc+0x58>
    1cac:	e5943000 	ldr	r3, [r4]
    1cb0:	e5c36000 	strb	r6, [r3]
    1cb4:	e5943000 	ldr	r3, [r4]
    1cb8:	e4d30001 	ldrb	r0, [r3], #1
    1cbc:	e5843000 	str	r3, [r4]
    1cc0:	e8bd4070 	pop	{r4, r5, r6, lr}
    1cc4:	e12fff1e 	bx	lr
    1cc8:	e5942018 	ldr	r2, [r4, #24]
    1ccc:	e1530002 	cmp	r3, r2
    1cd0:	ba00000f 	blt	1d14 <putc+0xa4>
    1cd4:	e5943000 	ldr	r3, [r4]
    1cd8:	e5c36000 	strb	r6, [r3]
    1cdc:	e5943000 	ldr	r3, [r4]
    1ce0:	e5d31000 	ldrb	r1, [r3]
    1ce4:	e351000a 	cmp	r1, #10
    1ce8:	12833001 	addne	r3, r3, #1
    1cec:	11a00001 	movne	r0, r1
    1cf0:	15843000 	strne	r3, [r4]
    1cf4:	1afffff1 	bne	1cc0 <putc+0x50>
    1cf8:	e5950000 	ldr	r0, [r5]
    1cfc:	e1a02004 	mov	r2, r4
    1d00:	eb000179 	bl	22ec <__swbuf_r>
    1d04:	eaffffed 	b	1cc0 <putc+0x50>
    1d08:	e1a00003 	mov	r0, r3
    1d0c:	eb0002e0 	bl	2894 <__sinit>
    1d10:	eaffffe0 	b	1c98 <putc+0x28>
    1d14:	e5950000 	ldr	r0, [r5]
    1d18:	e1a01006 	mov	r1, r6
    1d1c:	e1a02004 	mov	r2, r4
    1d20:	eb000171 	bl	22ec <__swbuf_r>
    1d24:	eaffffe5 	b	1cc0 <putc+0x50>
    1d28:	40000000 	.word	0x40000000

00001d2c <_realloc_r>:
    1d2c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1d30:	e2516000 	subs	r6, r1, #0
    1d34:	e24dd00c 	sub	sp, sp, #12
    1d38:	e1a08000 	mov	r8, r0
    1d3c:	e1a07002 	mov	r7, r2
    1d40:	0a0000f8 	beq	2128 <_realloc_r+0x3fc>
    1d44:	ebffff9c 	bl	1bbc <__malloc_lock>
    1d48:	e287400b 	add	r4, r7, #11
    1d4c:	e3540016 	cmp	r4, #22
    1d50:	83c44007 	bichi	r4, r4, #7
    1d54:	93a02010 	movls	r2, #16
    1d58:	81a00fa4 	lsrhi	r0, r4, #31
    1d5c:	93a00000 	movls	r0, #0
    1d60:	91a04002 	movls	r4, r2
    1d64:	81a02004 	movhi	r2, r4
    1d68:	e1540007 	cmp	r4, r7
    1d6c:	33800001 	orrcc	r0, r0, #1
    1d70:	e3500000 	cmp	r0, #0
    1d74:	e2469008 	sub	r9, r6, #8
    1d78:	13a0300c 	movne	r3, #12
    1d7c:	e599c004 	ldr	ip, [r9, #4]
    1d80:	13a07000 	movne	r7, #0
    1d84:	15883000 	strne	r3, [r8]
    1d88:	1a00005c 	bne	1f00 <_realloc_r+0x1d4>
    1d8c:	e3ccb003 	bic	fp, ip, #3
    1d90:	e15b0002 	cmp	fp, r2
    1d94:	a2897008 	addge	r7, r9, #8
    1d98:	a1a0500b 	movge	r5, fp
    1d9c:	aa00004b 	bge	1ed0 <_realloc_r+0x1a4>
    1da0:	e59f3540 	ldr	r3, [pc, #1344]	; 22e8 <_realloc_r+0x5bc>
    1da4:	e593e008 	ldr	lr, [r3, #8]
    1da8:	e089100b 	add	r1, r9, fp
    1dac:	e15e0001 	cmp	lr, r1
    1db0:	0a0000e0 	beq	2138 <_realloc_r+0x40c>
    1db4:	e5915004 	ldr	r5, [r1, #4]
    1db8:	e3c5a001 	bic	sl, r5, #1
    1dbc:	e081a00a 	add	sl, r1, sl
    1dc0:	e59aa004 	ldr	sl, [sl, #4]
    1dc4:	e31a0001 	tst	sl, #1
    1dc8:	11a01000 	movne	r1, r0
    1dcc:	0a00005d 	beq	1f48 <_realloc_r+0x21c>
    1dd0:	e31c0001 	tst	ip, #1
    1dd4:	1a000065 	bne	1f70 <_realloc_r+0x244>
    1dd8:	e516a008 	ldr	sl, [r6, #-8]
    1ddc:	e06aa009 	rsb	sl, sl, r9
    1de0:	e59ac004 	ldr	ip, [sl, #4]
    1de4:	e3510000 	cmp	r1, #0
    1de8:	e3ccc003 	bic	ip, ip, #3
    1dec:	0a000099 	beq	2058 <_realloc_r+0x32c>
    1df0:	e151000e 	cmp	r1, lr
    1df4:	0a0000ed 	beq	21b0 <_realloc_r+0x484>
    1df8:	e08cc00b 	add	ip, ip, fp
    1dfc:	e080500c 	add	r5, r0, ip
    1e00:	e1520005 	cmp	r2, r5
    1e04:	e58dc004 	str	ip, [sp, #4]
    1e08:	ca000094 	bgt	2060 <_realloc_r+0x334>
    1e0c:	e2812008 	add	r2, r1, #8
    1e10:	e892000c 	ldm	r2, {r2, r3}
    1e14:	e5832008 	str	r2, [r3, #8]
    1e18:	e582300c 	str	r3, [r2, #12]
    1e1c:	e1a0700a 	mov	r7, sl
    1e20:	e59a300c 	ldr	r3, [sl, #12]
    1e24:	e5b71008 	ldr	r1, [r7, #8]!
    1e28:	e24b2004 	sub	r2, fp, #4
    1e2c:	e3520024 	cmp	r2, #36	; 0x24
    1e30:	e581300c 	str	r3, [r1, #12]
    1e34:	e5831008 	str	r1, [r3, #8]
    1e38:	8a00011e 	bhi	22b8 <_realloc_r+0x58c>
    1e3c:	e3520013 	cmp	r2, #19
    1e40:	e1a01007 	mov	r1, r7
    1e44:	9a000017 	bls	1ea8 <_realloc_r+0x17c>
    1e48:	e1a03006 	mov	r3, r6
    1e4c:	e4931004 	ldr	r1, [r3], #4
    1e50:	e58a1008 	str	r1, [sl, #8]
    1e54:	e5961004 	ldr	r1, [r6, #4]
    1e58:	e352001b 	cmp	r2, #27
    1e5c:	e58a100c 	str	r1, [sl, #12]
    1e60:	e2836004 	add	r6, r3, #4
    1e64:	e28a1010 	add	r1, sl, #16
    1e68:	9a00000e 	bls	1ea8 <_realloc_r+0x17c>
    1e6c:	e5933004 	ldr	r3, [r3, #4]
    1e70:	e58a3010 	str	r3, [sl, #16]
    1e74:	e5961004 	ldr	r1, [r6, #4]
    1e78:	e3520024 	cmp	r2, #36	; 0x24
    1e7c:	e2863004 	add	r3, r6, #4
    1e80:	e58a1014 	str	r1, [sl, #20]
    1e84:	e2866008 	add	r6, r6, #8
    1e88:	e28a1018 	add	r1, sl, #24
    1e8c:	1a000005 	bne	1ea8 <_realloc_r+0x17c>
    1e90:	e5933004 	ldr	r3, [r3, #4]
    1e94:	e58a3018 	str	r3, [sl, #24]
    1e98:	e5963004 	ldr	r3, [r6, #4]
    1e9c:	e58a301c 	str	r3, [sl, #28]
    1ea0:	e28a1020 	add	r1, sl, #32
    1ea4:	e2866008 	add	r6, r6, #8
    1ea8:	e1a02006 	mov	r2, r6
    1eac:	e4920004 	ldr	r0, [r2], #4
    1eb0:	e1a03001 	mov	r3, r1
    1eb4:	e4830004 	str	r0, [r3], #4
    1eb8:	e5960004 	ldr	r0, [r6, #4]
    1ebc:	e5810004 	str	r0, [r1, #4]
    1ec0:	e5922004 	ldr	r2, [r2, #4]
    1ec4:	e5832004 	str	r2, [r3, #4]
    1ec8:	e59ac004 	ldr	ip, [sl, #4]
    1ecc:	e1a0900a 	mov	r9, sl
    1ed0:	e0643005 	rsb	r3, r4, r5
    1ed4:	e353000f 	cmp	r3, #15
    1ed8:	8a00000c 	bhi	1f10 <_realloc_r+0x1e4>
    1edc:	e20cc001 	and	ip, ip, #1
    1ee0:	e18cc005 	orr	ip, ip, r5
    1ee4:	e589c004 	str	ip, [r9, #4]
    1ee8:	e0899005 	add	r9, r9, r5
    1eec:	e5993004 	ldr	r3, [r9, #4]
    1ef0:	e3833001 	orr	r3, r3, #1
    1ef4:	e5893004 	str	r3, [r9, #4]
    1ef8:	e1a00008 	mov	r0, r8
    1efc:	ebffff2f 	bl	1bc0 <__malloc_unlock>
    1f00:	e1a00007 	mov	r0, r7
    1f04:	e28dd00c 	add	sp, sp, #12
    1f08:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1f0c:	e12fff1e 	bx	lr
    1f10:	e20cc001 	and	ip, ip, #1
    1f14:	e0891004 	add	r1, r9, r4
    1f18:	e3832001 	orr	r2, r3, #1
    1f1c:	e18c4004 	orr	r4, ip, r4
    1f20:	e5894004 	str	r4, [r9, #4]
    1f24:	e5812004 	str	r2, [r1, #4]
    1f28:	e0813003 	add	r3, r1, r3
    1f2c:	e5932004 	ldr	r2, [r3, #4]
    1f30:	e3822001 	orr	r2, r2, #1
    1f34:	e5832004 	str	r2, [r3, #4]
    1f38:	e1a00008 	mov	r0, r8
    1f3c:	e2811008 	add	r1, r1, #8
    1f40:	eb00033f 	bl	2c44 <_free_r>
    1f44:	eaffffeb 	b	1ef8 <_realloc_r+0x1cc>
    1f48:	e3c50003 	bic	r0, r5, #3
    1f4c:	e080500b 	add	r5, r0, fp
    1f50:	e1520005 	cmp	r2, r5
    1f54:	caffff9d 	bgt	1dd0 <_realloc_r+0xa4>
    1f58:	e2812008 	add	r2, r1, #8
    1f5c:	e892000c 	ldm	r2, {r2, r3}
    1f60:	e2897008 	add	r7, r9, #8
    1f64:	e582300c 	str	r3, [r2, #12]
    1f68:	e5832008 	str	r2, [r3, #8]
    1f6c:	eaffffd7 	b	1ed0 <_realloc_r+0x1a4>
    1f70:	e1a01007 	mov	r1, r7
    1f74:	e1a00008 	mov	r0, r8
    1f78:	ebfffc56 	bl	10d8 <_malloc_r>
    1f7c:	e2507000 	subs	r7, r0, #0
    1f80:	0affffdc 	beq	1ef8 <_realloc_r+0x1cc>
    1f84:	e599c004 	ldr	ip, [r9, #4]
    1f88:	e3cc2001 	bic	r2, ip, #1
    1f8c:	e2473008 	sub	r3, r7, #8
    1f90:	e0892002 	add	r2, r9, r2
    1f94:	e1530002 	cmp	r3, r2
    1f98:	0a0000c1 	beq	22a4 <_realloc_r+0x578>
    1f9c:	e24b2004 	sub	r2, fp, #4
    1fa0:	e3520024 	cmp	r2, #36	; 0x24
    1fa4:	8a00007e 	bhi	21a4 <_realloc_r+0x478>
    1fa8:	e3520013 	cmp	r2, #19
    1fac:	e1a01006 	mov	r1, r6
    1fb0:	e1a03007 	mov	r3, r7
    1fb4:	9a000019 	bls	2020 <_realloc_r+0x2f4>
    1fb8:	e1a0c006 	mov	ip, r6
    1fbc:	e49c3004 	ldr	r3, [ip], #4
    1fc0:	e1a00007 	mov	r0, r7
    1fc4:	e4803004 	str	r3, [r0], #4
    1fc8:	e5963004 	ldr	r3, [r6, #4]
    1fcc:	e352001b 	cmp	r2, #27
    1fd0:	e5873004 	str	r3, [r7, #4]
    1fd4:	e28c1004 	add	r1, ip, #4
    1fd8:	e2803004 	add	r3, r0, #4
    1fdc:	9a00000f 	bls	2020 <_realloc_r+0x2f4>
    1fe0:	e59cc004 	ldr	ip, [ip, #4]
    1fe4:	e580c004 	str	ip, [r0, #4]
    1fe8:	e591e004 	ldr	lr, [r1, #4]
    1fec:	e3520024 	cmp	r2, #36	; 0x24
    1ff0:	e2830004 	add	r0, r3, #4
    1ff4:	e281c004 	add	ip, r1, #4
    1ff8:	e583e004 	str	lr, [r3, #4]
    1ffc:	e2811008 	add	r1, r1, #8
    2000:	e2833008 	add	r3, r3, #8
    2004:	1a000005 	bne	2020 <_realloc_r+0x2f4>
    2008:	e59c2004 	ldr	r2, [ip, #4]
    200c:	e5802004 	str	r2, [r0, #4]
    2010:	e5912004 	ldr	r2, [r1, #4]
    2014:	e2811008 	add	r1, r1, #8
    2018:	e5832004 	str	r2, [r3, #4]
    201c:	e2833008 	add	r3, r3, #8
    2020:	e1a00001 	mov	r0, r1
    2024:	e490c004 	ldr	ip, [r0], #4
    2028:	e1a02003 	mov	r2, r3
    202c:	e482c004 	str	ip, [r2], #4
    2030:	e5911004 	ldr	r1, [r1, #4]
    2034:	e5831004 	str	r1, [r3, #4]
    2038:	e5903004 	ldr	r3, [r0, #4]
    203c:	e5823004 	str	r3, [r2, #4]
    2040:	e1a00008 	mov	r0, r8
    2044:	e1a01006 	mov	r1, r6
    2048:	eb0002fd 	bl	2c44 <_free_r>
    204c:	e1a00008 	mov	r0, r8
    2050:	ebfffeda 	bl	1bc0 <__malloc_unlock>
    2054:	eaffffa9 	b	1f00 <_realloc_r+0x1d4>
    2058:	e08cc00b 	add	ip, ip, fp
    205c:	e58dc004 	str	ip, [sp, #4]
    2060:	e59d1004 	ldr	r1, [sp, #4]
    2064:	e1520001 	cmp	r2, r1
    2068:	caffffc0 	bgt	1f70 <_realloc_r+0x244>
    206c:	e1a0700a 	mov	r7, sl
    2070:	e59a300c 	ldr	r3, [sl, #12]
    2074:	e5b71008 	ldr	r1, [r7, #8]!
    2078:	e24b2004 	sub	r2, fp, #4
    207c:	e3520024 	cmp	r2, #36	; 0x24
    2080:	e581300c 	str	r3, [r1, #12]
    2084:	e5831008 	str	r1, [r3, #8]
    2088:	8a00003e 	bhi	2188 <_realloc_r+0x45c>
    208c:	e3520013 	cmp	r2, #19
    2090:	e1a01007 	mov	r1, r7
    2094:	9a000017 	bls	20f8 <_realloc_r+0x3cc>
    2098:	e1a03006 	mov	r3, r6
    209c:	e4931004 	ldr	r1, [r3], #4
    20a0:	e58a1008 	str	r1, [sl, #8]
    20a4:	e5961004 	ldr	r1, [r6, #4]
    20a8:	e352001b 	cmp	r2, #27
    20ac:	e58a100c 	str	r1, [sl, #12]
    20b0:	e2836004 	add	r6, r3, #4
    20b4:	e28a1010 	add	r1, sl, #16
    20b8:	9a00000e 	bls	20f8 <_realloc_r+0x3cc>
    20bc:	e5933004 	ldr	r3, [r3, #4]
    20c0:	e58a3010 	str	r3, [sl, #16]
    20c4:	e5961004 	ldr	r1, [r6, #4]
    20c8:	e3520024 	cmp	r2, #36	; 0x24
    20cc:	e2863004 	add	r3, r6, #4
    20d0:	e58a1014 	str	r1, [sl, #20]
    20d4:	e2866008 	add	r6, r6, #8
    20d8:	e28a1018 	add	r1, sl, #24
    20dc:	1a000005 	bne	20f8 <_realloc_r+0x3cc>
    20e0:	e5933004 	ldr	r3, [r3, #4]
    20e4:	e58a3018 	str	r3, [sl, #24]
    20e8:	e5963004 	ldr	r3, [r6, #4]
    20ec:	e58a301c 	str	r3, [sl, #28]
    20f0:	e28a1020 	add	r1, sl, #32
    20f4:	e2866008 	add	r6, r6, #8
    20f8:	e1a02006 	mov	r2, r6
    20fc:	e4920004 	ldr	r0, [r2], #4
    2100:	e1a03001 	mov	r3, r1
    2104:	e4830004 	str	r0, [r3], #4
    2108:	e5960004 	ldr	r0, [r6, #4]
    210c:	e5810004 	str	r0, [r1, #4]
    2110:	e5922004 	ldr	r2, [r2, #4]
    2114:	e5832004 	str	r2, [r3, #4]
    2118:	e59d5004 	ldr	r5, [sp, #4]
    211c:	e59ac004 	ldr	ip, [sl, #4]
    2120:	e1a0900a 	mov	r9, sl
    2124:	eaffff69 	b	1ed0 <_realloc_r+0x1a4>
    2128:	e1a01002 	mov	r1, r2
    212c:	ebfffbe9 	bl	10d8 <_malloc_r>
    2130:	e1a07000 	mov	r7, r0
    2134:	eaffff71 	b	1f00 <_realloc_r+0x1d4>
    2138:	e59e0004 	ldr	r0, [lr, #4]
    213c:	e3c00003 	bic	r0, r0, #3
    2140:	e080100b 	add	r1, r0, fp
    2144:	e2845010 	add	r5, r4, #16
    2148:	e1510005 	cmp	r1, r5
    214c:	b1a0100e 	movlt	r1, lr
    2150:	baffff1e 	blt	1dd0 <_realloc_r+0xa4>
    2154:	e0641001 	rsb	r1, r4, r1
    2158:	e0892004 	add	r2, r9, r4
    215c:	e3811001 	orr	r1, r1, #1
    2160:	e5821004 	str	r1, [r2, #4]
    2164:	e5991004 	ldr	r1, [r9, #4]
    2168:	e2011001 	and	r1, r1, #1
    216c:	e1844001 	orr	r4, r4, r1
    2170:	e5894004 	str	r4, [r9, #4]
    2174:	e1a00008 	mov	r0, r8
    2178:	e5832008 	str	r2, [r3, #8]
    217c:	e1a07006 	mov	r7, r6
    2180:	ebfffe8e 	bl	1bc0 <__malloc_unlock>
    2184:	eaffff5d 	b	1f00 <_realloc_r+0x1d4>
    2188:	e1a00007 	mov	r0, r7
    218c:	e1a01006 	mov	r1, r6
    2190:	ebfffe43 	bl	1aa4 <memmove>
    2194:	e1a0900a 	mov	r9, sl
    2198:	e59ac004 	ldr	ip, [sl, #4]
    219c:	e59d5004 	ldr	r5, [sp, #4]
    21a0:	eaffff4a 	b	1ed0 <_realloc_r+0x1a4>
    21a4:	e1a01006 	mov	r1, r6
    21a8:	ebfffe3d 	bl	1aa4 <memmove>
    21ac:	eaffffa3 	b	2040 <_realloc_r+0x314>
    21b0:	e08cc00b 	add	ip, ip, fp
    21b4:	e080500c 	add	r5, r0, ip
    21b8:	e2841010 	add	r1, r4, #16
    21bc:	e1550001 	cmp	r5, r1
    21c0:	e58dc004 	str	ip, [sp, #4]
    21c4:	baffffa5 	blt	2060 <_realloc_r+0x334>
    21c8:	e1a0700a 	mov	r7, sl
    21cc:	e59a100c 	ldr	r1, [sl, #12]
    21d0:	e5b70008 	ldr	r0, [r7, #8]!
    21d4:	e24b2004 	sub	r2, fp, #4
    21d8:	e3520024 	cmp	r2, #36	; 0x24
    21dc:	e580100c 	str	r1, [r0, #12]
    21e0:	e5810008 	str	r0, [r1, #8]
    21e4:	8a000039 	bhi	22d0 <_realloc_r+0x5a4>
    21e8:	e3520013 	cmp	r2, #19
    21ec:	e1a00007 	mov	r0, r7
    21f0:	9a000017 	bls	2254 <_realloc_r+0x528>
    21f4:	e1a01006 	mov	r1, r6
    21f8:	e4910004 	ldr	r0, [r1], #4
    21fc:	e58a0008 	str	r0, [sl, #8]
    2200:	e5960004 	ldr	r0, [r6, #4]
    2204:	e352001b 	cmp	r2, #27
    2208:	e58a000c 	str	r0, [sl, #12]
    220c:	e2816004 	add	r6, r1, #4
    2210:	e28a0010 	add	r0, sl, #16
    2214:	9a00000e 	bls	2254 <_realloc_r+0x528>
    2218:	e5911004 	ldr	r1, [r1, #4]
    221c:	e58a1010 	str	r1, [sl, #16]
    2220:	e5960004 	ldr	r0, [r6, #4]
    2224:	e3520024 	cmp	r2, #36	; 0x24
    2228:	e2861004 	add	r1, r6, #4
    222c:	e58a0014 	str	r0, [sl, #20]
    2230:	e2866008 	add	r6, r6, #8
    2234:	e28a0018 	add	r0, sl, #24
    2238:	1a000005 	bne	2254 <_realloc_r+0x528>
    223c:	e5912004 	ldr	r2, [r1, #4]
    2240:	e58a2018 	str	r2, [sl, #24]
    2244:	e5962004 	ldr	r2, [r6, #4]
    2248:	e58a201c 	str	r2, [sl, #28]
    224c:	e28a0020 	add	r0, sl, #32
    2250:	e2866008 	add	r6, r6, #8
    2254:	e1a01006 	mov	r1, r6
    2258:	e491c004 	ldr	ip, [r1], #4
    225c:	e1a02000 	mov	r2, r0
    2260:	e482c004 	str	ip, [r2], #4
    2264:	e596c004 	ldr	ip, [r6, #4]
    2268:	e580c004 	str	ip, [r0, #4]
    226c:	e5911004 	ldr	r1, [r1, #4]
    2270:	e5821004 	str	r1, [r2, #4]
    2274:	e0641005 	rsb	r1, r4, r5
    2278:	e08a2004 	add	r2, sl, r4
    227c:	e3811001 	orr	r1, r1, #1
    2280:	e5821004 	str	r1, [r2, #4]
    2284:	e59a1004 	ldr	r1, [sl, #4]
    2288:	e2011001 	and	r1, r1, #1
    228c:	e1844001 	orr	r4, r4, r1
    2290:	e58a4004 	str	r4, [sl, #4]
    2294:	e1a00008 	mov	r0, r8
    2298:	e5832008 	str	r2, [r3, #8]
    229c:	ebfffe47 	bl	1bc0 <__malloc_unlock>
    22a0:	eaffff16 	b	1f00 <_realloc_r+0x1d4>
    22a4:	e5175004 	ldr	r5, [r7, #-4]
    22a8:	e3c55003 	bic	r5, r5, #3
    22ac:	e085500b 	add	r5, r5, fp
    22b0:	e2897008 	add	r7, r9, #8
    22b4:	eaffff05 	b	1ed0 <_realloc_r+0x1a4>
    22b8:	e1a00007 	mov	r0, r7
    22bc:	e1a01006 	mov	r1, r6
    22c0:	ebfffdf7 	bl	1aa4 <memmove>
    22c4:	e1a0900a 	mov	r9, sl
    22c8:	e59ac004 	ldr	ip, [sl, #4]
    22cc:	eafffeff 	b	1ed0 <_realloc_r+0x1a4>
    22d0:	e1a00007 	mov	r0, r7
    22d4:	e1a01006 	mov	r1, r6
    22d8:	e58d3000 	str	r3, [sp]
    22dc:	ebfffdf0 	bl	1aa4 <memmove>
    22e0:	e59d3000 	ldr	r3, [sp]
    22e4:	eaffffe2 	b	2274 <_realloc_r+0x548>
    22e8:	40000430 	.word	0x40000430

000022ec <__swbuf_r>:
    22ec:	e92d4070 	push	{r4, r5, r6, lr}
    22f0:	e2504000 	subs	r4, r0, #0
    22f4:	e1a05001 	mov	r5, r1
    22f8:	e1a06002 	mov	r6, r2
    22fc:	0a000002 	beq	230c <__swbuf_r+0x20>
    2300:	e5943038 	ldr	r3, [r4, #56]	; 0x38
    2304:	e3530000 	cmp	r3, #0
    2308:	0a00002f 	beq	23cc <__swbuf_r+0xe0>
    230c:	e1d620bc 	ldrh	r2, [r6, #12]
    2310:	e5961018 	ldr	r1, [r6, #24]
    2314:	e3120008 	tst	r2, #8
    2318:	e1a03002 	mov	r3, r2
    231c:	e5861008 	str	r1, [r6, #8]
    2320:	0a000020 	beq	23a8 <__swbuf_r+0xbc>
    2324:	e5961010 	ldr	r1, [r6, #16]
    2328:	e3510000 	cmp	r1, #0
    232c:	0a00001d 	beq	23a8 <__swbuf_r+0xbc>
    2330:	e3130a02 	tst	r3, #8192	; 0x2000
    2334:	05963064 	ldreq	r3, [r6, #100]	; 0x64
    2338:	03c33a02 	biceq	r3, r3, #8192	; 0x2000
    233c:	05863064 	streq	r3, [r6, #100]	; 0x64
    2340:	e5963000 	ldr	r3, [r6]
    2344:	03822a02 	orreq	r2, r2, #8192	; 0x2000
    2348:	e5960014 	ldr	r0, [r6, #20]
    234c:	01c620bc 	strheq	r2, [r6, #12]
    2350:	e0612003 	rsb	r2, r1, r3
    2354:	e1520000 	cmp	r2, r0
    2358:	b2822001 	addlt	r2, r2, #1
    235c:	aa000022 	bge	23ec <__swbuf_r+0x100>
    2360:	e5961008 	ldr	r1, [r6, #8]
    2364:	e20550ff 	and	r5, r5, #255	; 0xff
    2368:	e2411001 	sub	r1, r1, #1
    236c:	e5861008 	str	r1, [r6, #8]
    2370:	e4c35001 	strb	r5, [r3], #1
    2374:	e5961014 	ldr	r1, [r6, #20]
    2378:	e1510002 	cmp	r1, r2
    237c:	e5863000 	str	r3, [r6]
    2380:	0a000013 	beq	23d4 <__swbuf_r+0xe8>
    2384:	e1d630bc 	ldrh	r3, [r6, #12]
    2388:	e355000a 	cmp	r5, #10
    238c:	13a03000 	movne	r3, #0
    2390:	02033001 	andeq	r3, r3, #1
    2394:	e3530000 	cmp	r3, #0
    2398:	1a00000d 	bne	23d4 <__swbuf_r+0xe8>
    239c:	e1a00005 	mov	r0, r5
    23a0:	e8bd4070 	pop	{r4, r5, r6, lr}
    23a4:	e12fff1e 	bx	lr
    23a8:	e1a00004 	mov	r0, r4
    23ac:	e1a01006 	mov	r1, r6
    23b0:	eb000024 	bl	2448 <__swsetup_r>
    23b4:	e3500000 	cmp	r0, #0
    23b8:	1a000014 	bne	2410 <__swbuf_r+0x124>
    23bc:	e1d620bc 	ldrh	r2, [r6, #12]
    23c0:	e5961010 	ldr	r1, [r6, #16]
    23c4:	e1a03002 	mov	r3, r2
    23c8:	eaffffd8 	b	2330 <__swbuf_r+0x44>
    23cc:	eb000130 	bl	2894 <__sinit>
    23d0:	eaffffcd 	b	230c <__swbuf_r+0x20>
    23d4:	e1a00004 	mov	r0, r4
    23d8:	e1a01006 	mov	r1, r6
    23dc:	eb000066 	bl	257c <_fflush_r>
    23e0:	e3500000 	cmp	r0, #0
    23e4:	13e05000 	mvnne	r5, #0
    23e8:	eaffffeb 	b	239c <__swbuf_r+0xb0>
    23ec:	e1a00004 	mov	r0, r4
    23f0:	e1a01006 	mov	r1, r6
    23f4:	eb000060 	bl	257c <_fflush_r>
    23f8:	e3500000 	cmp	r0, #0
    23fc:	13e05000 	mvnne	r5, #0
    2400:	1affffe5 	bne	239c <__swbuf_r+0xb0>
    2404:	e5963000 	ldr	r3, [r6]
    2408:	e3a02001 	mov	r2, #1
    240c:	eaffffd3 	b	2360 <__swbuf_r+0x74>
    2410:	e1d630bc 	ldrh	r3, [r6, #12]
    2414:	e3833040 	orr	r3, r3, #64	; 0x40
    2418:	e1c630bc 	strh	r3, [r6, #12]
    241c:	e3a03009 	mov	r3, #9
    2420:	e3e05000 	mvn	r5, #0
    2424:	e5843000 	str	r3, [r4]
    2428:	eaffffdb 	b	239c <__swbuf_r+0xb0>

0000242c <__swbuf>:
    242c:	e1a02001 	mov	r2, r1
    2430:	e59f100c 	ldr	r1, [pc, #12]	; 2444 <__swbuf+0x18>
    2434:	e1a03000 	mov	r3, r0
    2438:	e5910000 	ldr	r0, [r1]
    243c:	e1a01003 	mov	r1, r3
    2440:	eaffffa9 	b	22ec <__swbuf_r>
    2444:	40000000 	.word	0x40000000

00002448 <__swsetup_r>:
    2448:	e92d4038 	push	{r3, r4, r5, lr}
    244c:	e59f3124 	ldr	r3, [pc, #292]	; 2578 <__swsetup_r+0x130>
    2450:	e5933000 	ldr	r3, [r3]
    2454:	e3530000 	cmp	r3, #0
    2458:	e1a05000 	mov	r5, r0
    245c:	e1a04001 	mov	r4, r1
    2460:	0a000002 	beq	2470 <__swsetup_r+0x28>
    2464:	e5932038 	ldr	r2, [r3, #56]	; 0x38
    2468:	e3520000 	cmp	r2, #0
    246c:	0a00001d 	beq	24e8 <__swsetup_r+0xa0>
    2470:	e1d410bc 	ldrh	r1, [r4, #12]
    2474:	e3110008 	tst	r1, #8
    2478:	e1a03001 	mov	r3, r1
    247c:	e1a00001 	mov	r0, r1
    2480:	15942010 	ldrne	r2, [r4, #16]
    2484:	0a000023 	beq	2518 <__swsetup_r+0xd0>
    2488:	e3520000 	cmp	r2, #0
    248c:	0a000018 	beq	24f4 <__swsetup_r+0xac>
    2490:	e2131001 	ands	r1, r3, #1
    2494:	1a000007 	bne	24b8 <__swsetup_r+0x70>
    2498:	e3130002 	tst	r3, #2
    249c:	05941014 	ldreq	r1, [r4, #20]
    24a0:	e3520000 	cmp	r2, #0
    24a4:	e5841008 	str	r1, [r4, #8]
    24a8:	13a00000 	movne	r0, #0
    24ac:	0a000009 	beq	24d8 <__swsetup_r+0x90>
    24b0:	e8bd4038 	pop	{r3, r4, r5, lr}
    24b4:	e12fff1e 	bx	lr
    24b8:	e5943014 	ldr	r3, [r4, #20]
    24bc:	e3a01000 	mov	r1, #0
    24c0:	e2633000 	rsb	r3, r3, #0
    24c4:	e3520000 	cmp	r2, #0
    24c8:	e5841008 	str	r1, [r4, #8]
    24cc:	e5843018 	str	r3, [r4, #24]
    24d0:	13a00000 	movne	r0, #0
    24d4:	1afffff5 	bne	24b0 <__swsetup_r+0x68>
    24d8:	e1d400bc 	ldrh	r0, [r4, #12]
    24dc:	e2100080 	ands	r0, r0, #128	; 0x80
    24e0:	13e00000 	mvnne	r0, #0
    24e4:	eafffff1 	b	24b0 <__swsetup_r+0x68>
    24e8:	e1a00003 	mov	r0, r3
    24ec:	eb0000e8 	bl	2894 <__sinit>
    24f0:	eaffffde 	b	2470 <__swsetup_r+0x28>
    24f4:	e2031d0a 	and	r1, r3, #640	; 0x280
    24f8:	e3510c02 	cmp	r1, #512	; 0x200
    24fc:	0affffe3 	beq	2490 <__swsetup_r+0x48>
    2500:	e1a00005 	mov	r0, r5
    2504:	e1a01004 	mov	r1, r4
    2508:	eb0002a9 	bl	2fb4 <__smakebuf_r>
    250c:	e1d430bc 	ldrh	r3, [r4, #12]
    2510:	e5942010 	ldr	r2, [r4, #16]
    2514:	eaffffdd 	b	2490 <__swsetup_r+0x48>
    2518:	e3110010 	tst	r1, #16
    251c:	03e00000 	mvneq	r0, #0
    2520:	0affffe2 	beq	24b0 <__swsetup_r+0x68>
    2524:	e3110004 	tst	r1, #4
    2528:	05942010 	ldreq	r2, [r4, #16]
    252c:	0a00000e 	beq	256c <__swsetup_r+0x124>
    2530:	e5941030 	ldr	r1, [r4, #48]	; 0x30
    2534:	e3510000 	cmp	r1, #0
    2538:	0a000007 	beq	255c <__swsetup_r+0x114>
    253c:	e2843040 	add	r3, r4, #64	; 0x40
    2540:	e1510003 	cmp	r1, r3
    2544:	0a000002 	beq	2554 <__swsetup_r+0x10c>
    2548:	e1a00005 	mov	r0, r5
    254c:	eb0001bc 	bl	2c44 <_free_r>
    2550:	e1d400bc 	ldrh	r0, [r4, #12]
    2554:	e3a03000 	mov	r3, #0
    2558:	e5843030 	str	r3, [r4, #48]	; 0x30
    255c:	e5942010 	ldr	r2, [r4, #16]
    2560:	e3a03000 	mov	r3, #0
    2564:	e884000c 	stm	r4, {r2, r3}
    2568:	e3c01024 	bic	r1, r0, #36	; 0x24
    256c:	e3813008 	orr	r3, r1, #8
    2570:	e1c430bc 	strh	r3, [r4, #12]
    2574:	eaffffc3 	b	2488 <__swsetup_r+0x40>
    2578:	40000000 	.word	0x40000000

0000257c <_fflush_r>:
    257c:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    2580:	e2505000 	subs	r5, r0, #0
    2584:	e1a04001 	mov	r4, r1
    2588:	0a000002 	beq	2598 <_fflush_r+0x1c>
    258c:	e5953038 	ldr	r3, [r5, #56]	; 0x38
    2590:	e3530000 	cmp	r3, #0
    2594:	0a00005b 	beq	2708 <_fflush_r+0x18c>
    2598:	e1d470bc 	ldrh	r7, [r4, #12]
    259c:	e3570000 	cmp	r7, #0
    25a0:	0a000056 	beq	2700 <_fflush_r+0x184>
    25a4:	e1a03807 	lsl	r3, r7, #16
    25a8:	e1a03843 	asr	r3, r3, #16
    25ac:	e2130008 	ands	r0, r3, #8
    25b0:	0a00001e 	beq	2630 <_fflush_r+0xb4>
    25b4:	e5947010 	ldr	r7, [r4, #16]
    25b8:	e3570000 	cmp	r7, #0
    25bc:	0a00004f 	beq	2700 <_fflush_r+0x184>
    25c0:	e5946000 	ldr	r6, [r4]
    25c4:	e3130003 	tst	r3, #3
    25c8:	05943014 	ldreq	r3, [r4, #20]
    25cc:	e0676006 	rsb	r6, r7, r6
    25d0:	13a03000 	movne	r3, #0
    25d4:	e3560000 	cmp	r6, #0
    25d8:	e5847000 	str	r7, [r4]
    25dc:	e5843008 	str	r3, [r4, #8]
    25e0:	ca000003 	bgt	25f4 <_fflush_r+0x78>
    25e4:	ea000064 	b	277c <_fflush_r+0x200>
    25e8:	e3560000 	cmp	r6, #0
    25ec:	da000062 	ble	277c <_fflush_r+0x200>
    25f0:	e0877000 	add	r7, r7, r0
    25f4:	e1a03006 	mov	r3, r6
    25f8:	e1a02007 	mov	r2, r7
    25fc:	e1a00005 	mov	r0, r5
    2600:	e594101c 	ldr	r1, [r4, #28]
    2604:	e594c024 	ldr	ip, [r4, #36]	; 0x24
    2608:	e1a0e00f 	mov	lr, pc
    260c:	e12fff1c 	bx	ip
    2610:	e3500000 	cmp	r0, #0
    2614:	e0606006 	rsb	r6, r0, r6
    2618:	cafffff2 	bgt	25e8 <_fflush_r+0x6c>
    261c:	e1d430bc 	ldrh	r3, [r4, #12]
    2620:	e3833040 	orr	r3, r3, #64	; 0x40
    2624:	e1c430bc 	strh	r3, [r4, #12]
    2628:	e3e00000 	mvn	r0, #0
    262c:	ea000031 	b	26f8 <_fflush_r+0x17c>
    2630:	e5943004 	ldr	r3, [r4, #4]
    2634:	e3877b02 	orr	r7, r7, #2048	; 0x800
    2638:	e3530000 	cmp	r3, #0
    263c:	e1c470bc 	strh	r7, [r4, #12]
    2640:	da00004f 	ble	2784 <_fflush_r+0x208>
    2644:	e594c028 	ldr	ip, [r4, #40]	; 0x28
    2648:	e35c0000 	cmp	ip, #0
    264c:	01a0000c 	moveq	r0, ip
    2650:	0a000028 	beq	26f8 <_fflush_r+0x17c>
    2654:	e1a01007 	mov	r1, r7
    2658:	e3a03000 	mov	r3, #0
    265c:	e2177a01 	ands	r7, r7, #4096	; 0x1000
    2660:	e5956000 	ldr	r6, [r5]
    2664:	15942050 	ldrne	r2, [r4, #80]	; 0x50
    2668:	e5853000 	str	r3, [r5]
    266c:	0a00002b 	beq	2720 <_fflush_r+0x1a4>
    2670:	e3110004 	tst	r1, #4
    2674:	0a000005 	beq	2690 <_fflush_r+0x114>
    2678:	e5941030 	ldr	r1, [r4, #48]	; 0x30
    267c:	e5943004 	ldr	r3, [r4, #4]
    2680:	e3510000 	cmp	r1, #0
    2684:	e0632002 	rsb	r2, r3, r2
    2688:	1594303c 	ldrne	r3, [r4, #60]	; 0x3c
    268c:	10632002 	rsbne	r2, r3, r2
    2690:	e1a00005 	mov	r0, r5
    2694:	e594101c 	ldr	r1, [r4, #28]
    2698:	e3a03000 	mov	r3, #0
    269c:	e1a0e00f 	mov	lr, pc
    26a0:	e12fff1c 	bx	ip
    26a4:	e3700001 	cmn	r0, #1
    26a8:	0a000028 	beq	2750 <_fflush_r+0x1d4>
    26ac:	e1d430bc 	ldrh	r3, [r4, #12]
    26b0:	e5942010 	ldr	r2, [r4, #16]
    26b4:	e3c33b02 	bic	r3, r3, #2048	; 0x800
    26b8:	e3130a01 	tst	r3, #4096	; 0x1000
    26bc:	e1c430bc 	strh	r3, [r4, #12]
    26c0:	e3a03000 	mov	r3, #0
    26c4:	e884000c 	stm	r4, {r2, r3}
    26c8:	1a000010 	bne	2710 <_fflush_r+0x194>
    26cc:	e5941030 	ldr	r1, [r4, #48]	; 0x30
    26d0:	e3510000 	cmp	r1, #0
    26d4:	e5856000 	str	r6, [r5]
    26d8:	01a00001 	moveq	r0, r1
    26dc:	0a000005 	beq	26f8 <_fflush_r+0x17c>
    26e0:	e2843040 	add	r3, r4, #64	; 0x40
    26e4:	e1510003 	cmp	r1, r3
    26e8:	11a00005 	movne	r0, r5
    26ec:	1b000154 	blne	2c44 <_free_r>
    26f0:	e3a00000 	mov	r0, #0
    26f4:	e5840030 	str	r0, [r4, #48]	; 0x30
    26f8:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
    26fc:	e12fff1e 	bx	lr
    2700:	e1a00007 	mov	r0, r7
    2704:	eafffffb 	b	26f8 <_fflush_r+0x17c>
    2708:	eb000061 	bl	2894 <__sinit>
    270c:	eaffffa1 	b	2598 <_fflush_r+0x1c>
    2710:	e3700001 	cmn	r0, #1
    2714:	0a00001e 	beq	2794 <_fflush_r+0x218>
    2718:	e5840050 	str	r0, [r4, #80]	; 0x50
    271c:	eaffffea 	b	26cc <_fflush_r+0x150>
    2720:	e1a02007 	mov	r2, r7
    2724:	e1a00005 	mov	r0, r5
    2728:	e594101c 	ldr	r1, [r4, #28]
    272c:	e3a03001 	mov	r3, #1
    2730:	e1a0e00f 	mov	lr, pc
    2734:	e12fff1c 	bx	ip
    2738:	e3700001 	cmn	r0, #1
    273c:	e1a02000 	mov	r2, r0
    2740:	0a000017 	beq	27a4 <_fflush_r+0x228>
    2744:	e1d410bc 	ldrh	r1, [r4, #12]
    2748:	e594c028 	ldr	ip, [r4, #40]	; 0x28
    274c:	eaffffc7 	b	2670 <_fflush_r+0xf4>
    2750:	e5953000 	ldr	r3, [r5]
    2754:	e3530000 	cmp	r3, #0
    2758:	0affffd3 	beq	26ac <_fflush_r+0x130>
    275c:	e353001d 	cmp	r3, #29
    2760:	0affffd1 	beq	26ac <_fflush_r+0x130>
    2764:	e3530016 	cmp	r3, #22
    2768:	11d430bc 	ldrhne	r3, [r4, #12]
    276c:	13833040 	orrne	r3, r3, #64	; 0x40
    2770:	11c430bc 	strhne	r3, [r4, #12]
    2774:	0affffcc 	beq	26ac <_fflush_r+0x130>
    2778:	eaffffde 	b	26f8 <_fflush_r+0x17c>
    277c:	e3a00000 	mov	r0, #0
    2780:	eaffffdc 	b	26f8 <_fflush_r+0x17c>
    2784:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
    2788:	e3530000 	cmp	r3, #0
    278c:	caffffac 	bgt	2644 <_fflush_r+0xc8>
    2790:	eaffffd8 	b	26f8 <_fflush_r+0x17c>
    2794:	e5953000 	ldr	r3, [r5]
    2798:	e3530000 	cmp	r3, #0
    279c:	05840050 	streq	r0, [r4, #80]	; 0x50
    27a0:	eaffffc9 	b	26cc <_fflush_r+0x150>
    27a4:	e5953000 	ldr	r3, [r5]
    27a8:	e3530000 	cmp	r3, #0
    27ac:	0affffe4 	beq	2744 <_fflush_r+0x1c8>
    27b0:	e353001d 	cmp	r3, #29
    27b4:	13530016 	cmpne	r3, #22
    27b8:	11d430bc 	ldrhne	r3, [r4, #12]
    27bc:	13833040 	orrne	r3, r3, #64	; 0x40
    27c0:	05856000 	streq	r6, [r5]
    27c4:	01a00007 	moveq	r0, r7
    27c8:	11c430bc 	strhne	r3, [r4, #12]
    27cc:	11a00002 	movne	r0, r2
    27d0:	eaffffc8 	b	26f8 <_fflush_r+0x17c>

000027d4 <fflush>:
    27d4:	e2501000 	subs	r1, r0, #0
    27d8:	e92d4010 	push	{r4, lr}
    27dc:	0a000003 	beq	27f0 <fflush+0x1c>
    27e0:	e59f3020 	ldr	r3, [pc, #32]	; 2808 <fflush+0x34>
    27e4:	e5930000 	ldr	r0, [r3]
    27e8:	e8bd4010 	pop	{r4, lr}
    27ec:	eaffff62 	b	257c <_fflush_r>
    27f0:	e59f3014 	ldr	r3, [pc, #20]	; 280c <fflush+0x38>
    27f4:	e59f1014 	ldr	r1, [pc, #20]	; 2810 <fflush+0x3c>
    27f8:	e5930000 	ldr	r0, [r3]
    27fc:	eb0001ca 	bl	2f2c <_fwalk_reent>
    2800:	e8bd4010 	pop	{r4, lr}
    2804:	e12fff1e 	bx	lr
    2808:	40000000 	.word	0x40000000
    280c:	0000343c 	.word	0x0000343c
    2810:	0000257c 	.word	0x0000257c

00002814 <__fp_lock>:
    2814:	e3a00000 	mov	r0, #0
    2818:	e12fff1e 	bx	lr

0000281c <__fp_unlock>:
    281c:	e3a00000 	mov	r0, #0
    2820:	e12fff1e 	bx	lr

00002824 <_cleanup_r>:
    2824:	e92d4008 	push	{r3, lr}
    2828:	e59f1008 	ldr	r1, [pc, #8]	; 2838 <_cleanup_r+0x14>
    282c:	eb00019d 	bl	2ea8 <_fwalk>
    2830:	e8bd4008 	pop	{r3, lr}
    2834:	e12fff1e 	bx	lr
    2838:	000033ec 	.word	0x000033ec

0000283c <__sfmoreglue>:
    283c:	e92d4070 	push	{r4, r5, r6, lr}
    2840:	e0816081 	add	r6, r1, r1, lsl #1
    2844:	e0816106 	add	r6, r1, r6, lsl #2
    2848:	e1a06186 	lsl	r6, r6, #3
    284c:	e1a05001 	mov	r5, r1
    2850:	e286100c 	add	r1, r6, #12
    2854:	ebfffa1f 	bl	10d8 <_malloc_r>
    2858:	e2504000 	subs	r4, r0, #0
    285c:	0a000005 	beq	2878 <__sfmoreglue+0x3c>
    2860:	e284000c 	add	r0, r4, #12
    2864:	e3a01000 	mov	r1, #0
    2868:	e8840022 	stm	r4, {r1, r5}
    286c:	e5840008 	str	r0, [r4, #8]
    2870:	e1a02006 	mov	r2, r6
    2874:	eb000227 	bl	3118 <memset>
    2878:	e1a00004 	mov	r0, r4
    287c:	e8bd4070 	pop	{r4, r5, r6, lr}
    2880:	e12fff1e 	bx	lr

00002884 <_cleanup>:
    2884:	e59f3004 	ldr	r3, [pc, #4]	; 2890 <_cleanup+0xc>
    2888:	e5930000 	ldr	r0, [r3]
    288c:	eaffffe4 	b	2824 <_cleanup_r>
    2890:	0000343c 	.word	0x0000343c

00002894 <__sinit>:
    2894:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2898:	e5904038 	ldr	r4, [r0, #56]	; 0x38
    289c:	e3540000 	cmp	r4, #0
    28a0:	e24dd00c 	sub	sp, sp, #12
    28a4:	e1a07000 	mov	r7, r0
    28a8:	1a00004b 	bne	29dc <__sinit+0x148>
    28ac:	e59f1134 	ldr	r1, [pc, #308]	; 29e8 <__sinit+0x154>
    28b0:	e5906004 	ldr	r6, [r0, #4]
    28b4:	e580103c 	str	r1, [r0, #60]	; 0x3c
    28b8:	e3a03001 	mov	r3, #1
    28bc:	e2802fbb 	add	r2, r0, #748	; 0x2ec
    28c0:	e3a01003 	mov	r1, #3
    28c4:	e5803038 	str	r3, [r0, #56]	; 0x38
    28c8:	e58012e4 	str	r1, [r0, #740]	; 0x2e4
    28cc:	e58022e8 	str	r2, [r0, #744]	; 0x2e8
    28d0:	e58042e0 	str	r4, [r0, #736]	; 0x2e0
    28d4:	e3a00004 	mov	r0, #4
    28d8:	e1c600bc 	strh	r0, [r6, #12]
    28dc:	e5864000 	str	r4, [r6]
    28e0:	e5864004 	str	r4, [r6, #4]
    28e4:	e5864008 	str	r4, [r6, #8]
    28e8:	e5864064 	str	r4, [r6, #100]	; 0x64
    28ec:	e1c640be 	strh	r4, [r6, #14]
    28f0:	e5864010 	str	r4, [r6, #16]
    28f4:	e5864014 	str	r4, [r6, #20]
    28f8:	e5864018 	str	r4, [r6, #24]
    28fc:	e1a01004 	mov	r1, r4
    2900:	e3a02008 	mov	r2, #8
    2904:	e286005c 	add	r0, r6, #92	; 0x5c
    2908:	e59fa0dc 	ldr	sl, [pc, #220]	; 29ec <__sinit+0x158>
    290c:	e59f80dc 	ldr	r8, [pc, #220]	; 29f0 <__sinit+0x15c>
    2910:	e59f90dc 	ldr	r9, [pc, #220]	; 29f4 <__sinit+0x160>
    2914:	e59fb0dc 	ldr	fp, [pc, #220]	; 29f8 <__sinit+0x164>
    2918:	e58d3004 	str	r3, [sp, #4]
    291c:	eb0001fd 	bl	3118 <memset>
    2920:	e5975008 	ldr	r5, [r7, #8]
    2924:	e59d3004 	ldr	r3, [sp, #4]
    2928:	e3a00009 	mov	r0, #9
    292c:	e1a01004 	mov	r1, r4
    2930:	e3a02008 	mov	r2, #8
    2934:	e586601c 	str	r6, [r6, #28]
    2938:	e586a020 	str	sl, [r6, #32]
    293c:	e5868024 	str	r8, [r6, #36]	; 0x24
    2940:	e5869028 	str	r9, [r6, #40]	; 0x28
    2944:	e586b02c 	str	fp, [r6, #44]	; 0x2c
    2948:	e1c500bc 	strh	r0, [r5, #12]
    294c:	e1c530be 	strh	r3, [r5, #14]
    2950:	e5854000 	str	r4, [r5]
    2954:	e5854004 	str	r4, [r5, #4]
    2958:	e5854008 	str	r4, [r5, #8]
    295c:	e5854064 	str	r4, [r5, #100]	; 0x64
    2960:	e5854010 	str	r4, [r5, #16]
    2964:	e5854014 	str	r4, [r5, #20]
    2968:	e5854018 	str	r4, [r5, #24]
    296c:	e285005c 	add	r0, r5, #92	; 0x5c
    2970:	eb0001e8 	bl	3118 <memset>
    2974:	e597600c 	ldr	r6, [r7, #12]
    2978:	e3a03012 	mov	r3, #18
    297c:	e3a00002 	mov	r0, #2
    2980:	e1c600be 	strh	r0, [r6, #14]
    2984:	e585501c 	str	r5, [r5, #28]
    2988:	e585a020 	str	sl, [r5, #32]
    298c:	e5858024 	str	r8, [r5, #36]	; 0x24
    2990:	e5859028 	str	r9, [r5, #40]	; 0x28
    2994:	e585b02c 	str	fp, [r5, #44]	; 0x2c
    2998:	e5864000 	str	r4, [r6]
    299c:	e5864004 	str	r4, [r6, #4]
    29a0:	e5864008 	str	r4, [r6, #8]
    29a4:	e1c630bc 	strh	r3, [r6, #12]
    29a8:	e5864064 	str	r4, [r6, #100]	; 0x64
    29ac:	e5864010 	str	r4, [r6, #16]
    29b0:	e5864014 	str	r4, [r6, #20]
    29b4:	e5864018 	str	r4, [r6, #24]
    29b8:	e286005c 	add	r0, r6, #92	; 0x5c
    29bc:	e1a01004 	mov	r1, r4
    29c0:	e3a02008 	mov	r2, #8
    29c4:	eb0001d3 	bl	3118 <memset>
    29c8:	e586601c 	str	r6, [r6, #28]
    29cc:	e586a020 	str	sl, [r6, #32]
    29d0:	e5868024 	str	r8, [r6, #36]	; 0x24
    29d4:	e5869028 	str	r9, [r6, #40]	; 0x28
    29d8:	e586b02c 	str	fp, [r6, #44]	; 0x2c
    29dc:	e28dd00c 	add	sp, sp, #12
    29e0:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    29e4:	e12fff1e 	bx	lr
    29e8:	00002824 	.word	0x00002824
    29ec:	00003218 	.word	0x00003218
    29f0:	00003254 	.word	0x00003254
    29f4:	000032ac 	.word	0x000032ac
    29f8:	000032e0 	.word	0x000032e0

000029fc <__sfp>:
    29fc:	e59f30e8 	ldr	r3, [pc, #232]	; 2aec <__sfp+0xf0>
    2a00:	e92d4070 	push	{r4, r5, r6, lr}
    2a04:	e5935000 	ldr	r5, [r3]
    2a08:	e5953038 	ldr	r3, [r5, #56]	; 0x38
    2a0c:	e3530000 	cmp	r3, #0
    2a10:	e1a06000 	mov	r6, r0
    2a14:	0a000027 	beq	2ab8 <__sfp+0xbc>
    2a18:	e2855e2e 	add	r5, r5, #736	; 0x2e0
    2a1c:	e5953004 	ldr	r3, [r5, #4]
    2a20:	e2533001 	subs	r3, r3, #1
    2a24:	e5954008 	ldr	r4, [r5, #8]
    2a28:	5a000003 	bpl	2a3c <__sfp+0x40>
    2a2c:	ea00001c 	b	2aa4 <__sfp+0xa8>
    2a30:	e2533001 	subs	r3, r3, #1
    2a34:	e2844068 	add	r4, r4, #104	; 0x68
    2a38:	4a000019 	bmi	2aa4 <__sfp+0xa8>
    2a3c:	e1d420fc 	ldrsh	r2, [r4, #12]
    2a40:	e3520000 	cmp	r2, #0
    2a44:	1afffff9 	bne	2a30 <__sfp+0x34>
    2a48:	e3e03000 	mvn	r3, #0
    2a4c:	e3a05000 	mov	r5, #0
    2a50:	e1c430be 	strh	r3, [r4, #14]
    2a54:	e3a03001 	mov	r3, #1
    2a58:	e1c430bc 	strh	r3, [r4, #12]
    2a5c:	e5845064 	str	r5, [r4, #100]	; 0x64
    2a60:	e5845000 	str	r5, [r4]
    2a64:	e5845008 	str	r5, [r4, #8]
    2a68:	e5845004 	str	r5, [r4, #4]
    2a6c:	e5845010 	str	r5, [r4, #16]
    2a70:	e5845014 	str	r5, [r4, #20]
    2a74:	e5845018 	str	r5, [r4, #24]
    2a78:	e284005c 	add	r0, r4, #92	; 0x5c
    2a7c:	e1a01005 	mov	r1, r5
    2a80:	e3a02008 	mov	r2, #8
    2a84:	eb0001a3 	bl	3118 <memset>
    2a88:	e5845030 	str	r5, [r4, #48]	; 0x30
    2a8c:	e5845034 	str	r5, [r4, #52]	; 0x34
    2a90:	e5845044 	str	r5, [r4, #68]	; 0x44
    2a94:	e5845048 	str	r5, [r4, #72]	; 0x48
    2a98:	e1a00004 	mov	r0, r4
    2a9c:	e8bd4070 	pop	{r4, r5, r6, lr}
    2aa0:	e12fff1e 	bx	lr
    2aa4:	e5950000 	ldr	r0, [r5]
    2aa8:	e3500000 	cmp	r0, #0
    2aac:	0a000004 	beq	2ac4 <__sfp+0xc8>
    2ab0:	e1a05000 	mov	r5, r0
    2ab4:	eaffffd8 	b	2a1c <__sfp+0x20>
    2ab8:	e1a00005 	mov	r0, r5
    2abc:	ebffff74 	bl	2894 <__sinit>
    2ac0:	eaffffd4 	b	2a18 <__sfp+0x1c>
    2ac4:	e1a00006 	mov	r0, r6
    2ac8:	e3a01004 	mov	r1, #4
    2acc:	ebffff5a 	bl	283c <__sfmoreglue>
    2ad0:	e3500000 	cmp	r0, #0
    2ad4:	e5850000 	str	r0, [r5]
    2ad8:	1afffff4 	bne	2ab0 <__sfp+0xb4>
    2adc:	e3a0300c 	mov	r3, #12
    2ae0:	e5863000 	str	r3, [r6]
    2ae4:	e1a04000 	mov	r4, r0
    2ae8:	eaffffea 	b	2a98 <__sfp+0x9c>
    2aec:	0000343c 	.word	0x0000343c

00002af0 <__sfp_lock_acquire>:
    2af0:	e12fff1e 	bx	lr

00002af4 <__sfp_lock_release>:
    2af4:	e12fff1e 	bx	lr

00002af8 <__sinit_lock_acquire>:
    2af8:	e12fff1e 	bx	lr

00002afc <__sinit_lock_release>:
    2afc:	e12fff1e 	bx	lr

00002b00 <__fp_lock_all>:
    2b00:	e92d4008 	push	{r3, lr}
    2b04:	e59f3010 	ldr	r3, [pc, #16]	; 2b1c <__fp_lock_all+0x1c>
    2b08:	e59f1010 	ldr	r1, [pc, #16]	; 2b20 <__fp_lock_all+0x20>
    2b0c:	e5930000 	ldr	r0, [r3]
    2b10:	eb0000e4 	bl	2ea8 <_fwalk>
    2b14:	e8bd4008 	pop	{r3, lr}
    2b18:	e12fff1e 	bx	lr
    2b1c:	40000000 	.word	0x40000000
    2b20:	00002814 	.word	0x00002814

00002b24 <__fp_unlock_all>:
    2b24:	e92d4008 	push	{r3, lr}
    2b28:	e59f3010 	ldr	r3, [pc, #16]	; 2b40 <__fp_unlock_all+0x1c>
    2b2c:	e59f1010 	ldr	r1, [pc, #16]	; 2b44 <__fp_unlock_all+0x20>
    2b30:	e5930000 	ldr	r0, [r3]
    2b34:	eb0000db 	bl	2ea8 <_fwalk>
    2b38:	e8bd4008 	pop	{r3, lr}
    2b3c:	e12fff1e 	bx	lr
    2b40:	40000000 	.word	0x40000000
    2b44:	0000281c 	.word	0x0000281c

00002b48 <_malloc_trim_r>:
    2b48:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    2b4c:	e59f50e4 	ldr	r5, [pc, #228]	; 2c38 <_malloc_trim_r+0xf0>
    2b50:	e1a07001 	mov	r7, r1
    2b54:	e1a04000 	mov	r4, r0
    2b58:	ebfffc17 	bl	1bbc <__malloc_lock>
    2b5c:	e5953008 	ldr	r3, [r5, #8]
    2b60:	e5936004 	ldr	r6, [r3, #4]
    2b64:	e3c66003 	bic	r6, r6, #3
    2b68:	e2863efe 	add	r3, r6, #4064	; 0xfe0
    2b6c:	e283300f 	add	r3, r3, #15
    2b70:	e0677003 	rsb	r7, r7, r3
    2b74:	e1a07627 	lsr	r7, r7, #12
    2b78:	e2477001 	sub	r7, r7, #1
    2b7c:	e1a07607 	lsl	r7, r7, #12
    2b80:	e3570a01 	cmp	r7, #4096	; 0x1000
    2b84:	ba000006 	blt	2ba4 <_malloc_trim_r+0x5c>
    2b88:	e1a00004 	mov	r0, r4
    2b8c:	e3a01000 	mov	r1, #0
    2b90:	ebfff7c3 	bl	aa4 <_sbrk_r>
    2b94:	e5953008 	ldr	r3, [r5, #8]
    2b98:	e0833006 	add	r3, r3, r6
    2b9c:	e1500003 	cmp	r0, r3
    2ba0:	0a000004 	beq	2bb8 <_malloc_trim_r+0x70>
    2ba4:	e1a00004 	mov	r0, r4
    2ba8:	ebfffc04 	bl	1bc0 <__malloc_unlock>
    2bac:	e3a00000 	mov	r0, #0
    2bb0:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
    2bb4:	e12fff1e 	bx	lr
    2bb8:	e1a00004 	mov	r0, r4
    2bbc:	e2671000 	rsb	r1, r7, #0
    2bc0:	ebfff7b7 	bl	aa4 <_sbrk_r>
    2bc4:	e3700001 	cmn	r0, #1
    2bc8:	0a00000b 	beq	2bfc <_malloc_trim_r+0xb4>
    2bcc:	e59f3068 	ldr	r3, [pc, #104]	; 2c3c <_malloc_trim_r+0xf4>
    2bd0:	e5931000 	ldr	r1, [r3]
    2bd4:	e5952008 	ldr	r2, [r5, #8]
    2bd8:	e0676006 	rsb	r6, r7, r6
    2bdc:	e3866001 	orr	r6, r6, #1
    2be0:	e0677001 	rsb	r7, r7, r1
    2be4:	e1a00004 	mov	r0, r4
    2be8:	e5826004 	str	r6, [r2, #4]
    2bec:	e5837000 	str	r7, [r3]
    2bf0:	ebfffbf2 	bl	1bc0 <__malloc_unlock>
    2bf4:	e3a00001 	mov	r0, #1
    2bf8:	eaffffec 	b	2bb0 <_malloc_trim_r+0x68>
    2bfc:	e1a00004 	mov	r0, r4
    2c00:	e3a01000 	mov	r1, #0
    2c04:	ebfff7a6 	bl	aa4 <_sbrk_r>
    2c08:	e5953008 	ldr	r3, [r5, #8]
    2c0c:	e0632000 	rsb	r2, r3, r0
    2c10:	e352000f 	cmp	r2, #15
    2c14:	daffffe2 	ble	2ba4 <_malloc_trim_r+0x5c>
    2c18:	e59f1020 	ldr	r1, [pc, #32]	; 2c40 <_malloc_trim_r+0xf8>
    2c1c:	e5911000 	ldr	r1, [r1]
    2c20:	e0610000 	rsb	r0, r1, r0
    2c24:	e59f1010 	ldr	r1, [pc, #16]	; 2c3c <_malloc_trim_r+0xf4>
    2c28:	e3822001 	orr	r2, r2, #1
    2c2c:	e5810000 	str	r0, [r1]
    2c30:	e5832004 	str	r2, [r3, #4]
    2c34:	eaffffda 	b	2ba4 <_malloc_trim_r+0x5c>
    2c38:	40000430 	.word	0x40000430
    2c3c:	40000844 	.word	0x40000844
    2c40:	40000838 	.word	0x40000838

00002c44 <_free_r>:
    2c44:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    2c48:	e2515000 	subs	r5, r1, #0
    2c4c:	e1a04000 	mov	r4, r0
    2c50:	0a00005c 	beq	2dc8 <_free_r+0x184>
    2c54:	ebfffbd8 	bl	1bbc <__malloc_lock>
    2c58:	e2452008 	sub	r2, r5, #8
    2c5c:	e5920004 	ldr	r0, [r2, #4]
    2c60:	e59fc22c 	ldr	ip, [pc, #556]	; 2e94 <_free_r+0x250>
    2c64:	e3c03001 	bic	r3, r0, #1
    2c68:	e0821003 	add	r1, r2, r3
    2c6c:	e59c6008 	ldr	r6, [ip, #8]
    2c70:	e591e004 	ldr	lr, [r1, #4]
    2c74:	e1560001 	cmp	r6, r1
    2c78:	e3cee003 	bic	lr, lr, #3
    2c7c:	0a000060 	beq	2e04 <_free_r+0x1c0>
    2c80:	e2100001 	ands	r0, r0, #1
    2c84:	e581e004 	str	lr, [r1, #4]
    2c88:	13a00000 	movne	r0, #0
    2c8c:	1a000009 	bne	2cb8 <_free_r+0x74>
    2c90:	e5156008 	ldr	r6, [r5, #-8]
    2c94:	e0662002 	rsb	r2, r6, r2
    2c98:	e5925008 	ldr	r5, [r2, #8]
    2c9c:	e28c7008 	add	r7, ip, #8
    2ca0:	e1550007 	cmp	r5, r7
    2ca4:	e0833006 	add	r3, r3, r6
    2ca8:	1592600c 	ldrne	r6, [r2, #12]
    2cac:	1585600c 	strne	r6, [r5, #12]
    2cb0:	15865008 	strne	r5, [r6, #8]
    2cb4:	03a00001 	moveq	r0, #1
    2cb8:	e081500e 	add	r5, r1, lr
    2cbc:	e5955004 	ldr	r5, [r5, #4]
    2cc0:	e3150001 	tst	r5, #1
    2cc4:	1a00000a 	bne	2cf4 <_free_r+0xb0>
    2cc8:	e3500000 	cmp	r0, #0
    2ccc:	e083300e 	add	r3, r3, lr
    2cd0:	1591e008 	ldrne	lr, [r1, #8]
    2cd4:	1a000003 	bne	2ce8 <_free_r+0xa4>
    2cd8:	e591e008 	ldr	lr, [r1, #8]
    2cdc:	e59f51b4 	ldr	r5, [pc, #436]	; 2e98 <_free_r+0x254>
    2ce0:	e15e0005 	cmp	lr, r5
    2ce4:	0a00005c 	beq	2e5c <_free_r+0x218>
    2ce8:	e591100c 	ldr	r1, [r1, #12]
    2cec:	e58e100c 	str	r1, [lr, #12]
    2cf0:	e581e008 	str	lr, [r1, #8]
    2cf4:	e3831001 	orr	r1, r3, #1
    2cf8:	e3500000 	cmp	r0, #0
    2cfc:	e5821004 	str	r1, [r2, #4]
    2d00:	e7823003 	str	r3, [r2, r3]
    2d04:	1a00002d 	bne	2dc0 <_free_r+0x17c>
    2d08:	e3530c02 	cmp	r3, #512	; 0x200
    2d0c:	3a00002f 	bcc	2dd0 <_free_r+0x18c>
    2d10:	e1a014a3 	lsr	r1, r3, #9
    2d14:	e3510004 	cmp	r1, #4
    2d18:	91a00323 	lsrls	r0, r3, #6
    2d1c:	92800038 	addls	r0, r0, #56	; 0x38
    2d20:	91a0e180 	lslls	lr, r0, #3
    2d24:	9a000014 	bls	2d7c <_free_r+0x138>
    2d28:	e3510014 	cmp	r1, #20
    2d2c:	9281005b 	addls	r0, r1, #91	; 0x5b
    2d30:	91a0e180 	lslls	lr, r0, #3
    2d34:	9a000010 	bls	2d7c <_free_r+0x138>
    2d38:	e3510054 	cmp	r1, #84	; 0x54
    2d3c:	91a00623 	lsrls	r0, r3, #12
    2d40:	9280006e 	addls	r0, r0, #110	; 0x6e
    2d44:	91a0e180 	lslls	lr, r0, #3
    2d48:	9a00000b 	bls	2d7c <_free_r+0x138>
    2d4c:	e3510f55 	cmp	r1, #340	; 0x154
    2d50:	91a007a3 	lsrls	r0, r3, #15
    2d54:	92800077 	addls	r0, r0, #119	; 0x77
    2d58:	91a0e180 	lslls	lr, r0, #3
    2d5c:	9a000006 	bls	2d7c <_free_r+0x138>
    2d60:	e59f0134 	ldr	r0, [pc, #308]	; 2e9c <_free_r+0x258>
    2d64:	e1510000 	cmp	r1, r0
    2d68:	91a00923 	lsrls	r0, r3, #18
    2d6c:	9280007c 	addls	r0, r0, #124	; 0x7c
    2d70:	91a0e180 	lslls	lr, r0, #3
    2d74:	83a0ee3f 	movhi	lr, #1008	; 0x3f0
    2d78:	83a0007e 	movhi	r0, #126	; 0x7e
    2d7c:	e08ce00e 	add	lr, ip, lr
    2d80:	e59e1008 	ldr	r1, [lr, #8]
    2d84:	e151000e 	cmp	r1, lr
    2d88:	1a000003 	bne	2d9c <_free_r+0x158>
    2d8c:	ea000039 	b	2e78 <_free_r+0x234>
    2d90:	e5911008 	ldr	r1, [r1, #8]
    2d94:	e15e0001 	cmp	lr, r1
    2d98:	0a000003 	beq	2dac <_free_r+0x168>
    2d9c:	e5910004 	ldr	r0, [r1, #4]
    2da0:	e3c00003 	bic	r0, r0, #3
    2da4:	e1530000 	cmp	r3, r0
    2da8:	3afffff8 	bcc	2d90 <_free_r+0x14c>
    2dac:	e591300c 	ldr	r3, [r1, #12]
    2db0:	e582300c 	str	r3, [r2, #12]
    2db4:	e5821008 	str	r1, [r2, #8]
    2db8:	e581200c 	str	r2, [r1, #12]
    2dbc:	e5832008 	str	r2, [r3, #8]
    2dc0:	e1a00004 	mov	r0, r4
    2dc4:	ebfffb7d 	bl	1bc0 <__malloc_unlock>
    2dc8:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
    2dcc:	e12fff1e 	bx	lr
    2dd0:	e59c1004 	ldr	r1, [ip, #4]
    2dd4:	e1a031a3 	lsr	r3, r3, #3
    2dd8:	e1a00143 	asr	r0, r3, #2
    2ddc:	e3a0e001 	mov	lr, #1
    2de0:	e181001e 	orr	r0, r1, lr, lsl r0
    2de4:	e08c3183 	add	r3, ip, r3, lsl #3
    2de8:	e5931008 	ldr	r1, [r3, #8]
    2dec:	e582300c 	str	r3, [r2, #12]
    2df0:	e5821008 	str	r1, [r2, #8]
    2df4:	e58c0004 	str	r0, [ip, #4]
    2df8:	e5832008 	str	r2, [r3, #8]
    2dfc:	e581200c 	str	r2, [r1, #12]
    2e00:	eaffffee 	b	2dc0 <_free_r+0x17c>
    2e04:	e3100001 	tst	r0, #1
    2e08:	e08e3003 	add	r3, lr, r3
    2e0c:	1a000006 	bne	2e2c <_free_r+0x1e8>
    2e10:	e5151008 	ldr	r1, [r5, #-8]
    2e14:	e0612002 	rsb	r2, r1, r2
    2e18:	e592000c 	ldr	r0, [r2, #12]
    2e1c:	e592e008 	ldr	lr, [r2, #8]
    2e20:	e58e000c 	str	r0, [lr, #12]
    2e24:	e580e008 	str	lr, [r0, #8]
    2e28:	e0833001 	add	r3, r3, r1
    2e2c:	e59f106c 	ldr	r1, [pc, #108]	; 2ea0 <_free_r+0x25c>
    2e30:	e5910000 	ldr	r0, [r1]
    2e34:	e3831001 	orr	r1, r3, #1
    2e38:	e1530000 	cmp	r3, r0
    2e3c:	e5821004 	str	r1, [r2, #4]
    2e40:	e58c2008 	str	r2, [ip, #8]
    2e44:	3affffdd 	bcc	2dc0 <_free_r+0x17c>
    2e48:	e59f3054 	ldr	r3, [pc, #84]	; 2ea4 <_free_r+0x260>
    2e4c:	e1a00004 	mov	r0, r4
    2e50:	e5931000 	ldr	r1, [r3]
    2e54:	ebffff3b 	bl	2b48 <_malloc_trim_r>
    2e58:	eaffffd8 	b	2dc0 <_free_r+0x17c>
    2e5c:	e3831001 	orr	r1, r3, #1
    2e60:	e58e200c 	str	r2, [lr, #12]
    2e64:	e58e2008 	str	r2, [lr, #8]
    2e68:	e582e00c 	str	lr, [r2, #12]
    2e6c:	e9824002 	stmib	r2, {r1, lr}
    2e70:	e7823003 	str	r3, [r2, r3]
    2e74:	eaffffd1 	b	2dc0 <_free_r+0x17c>
    2e78:	e59c3004 	ldr	r3, [ip, #4]
    2e7c:	e1a00140 	asr	r0, r0, #2
    2e80:	e3a0e001 	mov	lr, #1
    2e84:	e183001e 	orr	r0, r3, lr, lsl r0
    2e88:	e1a03001 	mov	r3, r1
    2e8c:	e58c0004 	str	r0, [ip, #4]
    2e90:	eaffffc6 	b	2db0 <_free_r+0x16c>
    2e94:	40000430 	.word	0x40000430
    2e98:	40000438 	.word	0x40000438
    2e9c:	00000554 	.word	0x00000554
    2ea0:	4000083c 	.word	0x4000083c
    2ea4:	40000840 	.word	0x40000840

00002ea8 <_fwalk>:
    2ea8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    2eac:	e1a06000 	mov	r6, r0
    2eb0:	e1a08001 	mov	r8, r1
    2eb4:	ebffff0d 	bl	2af0 <__sfp_lock_acquire>
    2eb8:	e2966e2e 	adds	r6, r6, #736	; 0x2e0
    2ebc:	01a07006 	moveq	r7, r6
    2ec0:	0a000015 	beq	2f1c <_fwalk+0x74>
    2ec4:	e3a07000 	mov	r7, #0
    2ec8:	e5965004 	ldr	r5, [r6, #4]
    2ecc:	e2555001 	subs	r5, r5, #1
    2ed0:	e5964008 	ldr	r4, [r6, #8]
    2ed4:	5a000001 	bpl	2ee0 <_fwalk+0x38>
    2ed8:	ea00000c 	b	2f10 <_fwalk+0x68>
    2edc:	e2844068 	add	r4, r4, #104	; 0x68
    2ee0:	e1d430fc 	ldrsh	r3, [r4, #12]
    2ee4:	e3530000 	cmp	r3, #0
    2ee8:	0a000006 	beq	2f08 <_fwalk+0x60>
    2eec:	e1d430fe 	ldrsh	r3, [r4, #14]
    2ef0:	e3730001 	cmn	r3, #1
    2ef4:	e1a00004 	mov	r0, r4
    2ef8:	0a000002 	beq	2f08 <_fwalk+0x60>
    2efc:	e1a0e00f 	mov	lr, pc
    2f00:	e12fff18 	bx	r8
    2f04:	e1877000 	orr	r7, r7, r0
    2f08:	e2555001 	subs	r5, r5, #1
    2f0c:	5afffff2 	bpl	2edc <_fwalk+0x34>
    2f10:	e5966000 	ldr	r6, [r6]
    2f14:	e3560000 	cmp	r6, #0
    2f18:	1affffea 	bne	2ec8 <_fwalk+0x20>
    2f1c:	ebfffef4 	bl	2af4 <__sfp_lock_release>
    2f20:	e1a00007 	mov	r0, r7
    2f24:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    2f28:	e12fff1e 	bx	lr

00002f2c <_fwalk_reent>:
    2f2c:	e92d45f8 	push	{r3, r4, r5, r6, r7, r8, sl, lr}
    2f30:	e1a07000 	mov	r7, r0
    2f34:	e1a0a001 	mov	sl, r1
    2f38:	ebfffeec 	bl	2af0 <__sfp_lock_acquire>
    2f3c:	e2976e2e 	adds	r6, r7, #736	; 0x2e0
    2f40:	01a08006 	moveq	r8, r6
    2f44:	0a000016 	beq	2fa4 <_fwalk_reent+0x78>
    2f48:	e3a08000 	mov	r8, #0
    2f4c:	e5965004 	ldr	r5, [r6, #4]
    2f50:	e2555001 	subs	r5, r5, #1
    2f54:	e5964008 	ldr	r4, [r6, #8]
    2f58:	5a000001 	bpl	2f64 <_fwalk_reent+0x38>
    2f5c:	ea00000d 	b	2f98 <_fwalk_reent+0x6c>
    2f60:	e2844068 	add	r4, r4, #104	; 0x68
    2f64:	e1d430fc 	ldrsh	r3, [r4, #12]
    2f68:	e3530000 	cmp	r3, #0
    2f6c:	0a000007 	beq	2f90 <_fwalk_reent+0x64>
    2f70:	e1d430fe 	ldrsh	r3, [r4, #14]
    2f74:	e3730001 	cmn	r3, #1
    2f78:	e1a01004 	mov	r1, r4
    2f7c:	e1a00007 	mov	r0, r7
    2f80:	0a000002 	beq	2f90 <_fwalk_reent+0x64>
    2f84:	e1a0e00f 	mov	lr, pc
    2f88:	e12fff1a 	bx	sl
    2f8c:	e1888000 	orr	r8, r8, r0
    2f90:	e2555001 	subs	r5, r5, #1
    2f94:	5afffff1 	bpl	2f60 <_fwalk_reent+0x34>
    2f98:	e5966000 	ldr	r6, [r6]
    2f9c:	e3560000 	cmp	r6, #0
    2fa0:	1affffe9 	bne	2f4c <_fwalk_reent+0x20>
    2fa4:	ebfffed2 	bl	2af4 <__sfp_lock_release>
    2fa8:	e1a00008 	mov	r0, r8
    2fac:	e8bd45f8 	pop	{r3, r4, r5, r6, r7, r8, sl, lr}
    2fb0:	e12fff1e 	bx	lr

00002fb4 <__smakebuf_r>:
    2fb4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    2fb8:	e1d130bc 	ldrh	r3, [r1, #12]
    2fbc:	e3130002 	tst	r3, #2
    2fc0:	e24dd044 	sub	sp, sp, #68	; 0x44
    2fc4:	e1a04001 	mov	r4, r1
    2fc8:	e1a02003 	mov	r2, r3
    2fcc:	e1a05000 	mov	r5, r0
    2fd0:	1a000033 	bne	30a4 <__smakebuf_r+0xf0>
    2fd4:	e1d110fe 	ldrsh	r1, [r1, #14]
    2fd8:	e3510000 	cmp	r1, #0
    2fdc:	ba000011 	blt	3028 <__smakebuf_r+0x74>
    2fe0:	e28d2004 	add	r2, sp, #4
    2fe4:	ebfff6aa 	bl	a94 <_fstat_r>
    2fe8:	e3500000 	cmp	r0, #0
    2fec:	ba00000b 	blt	3020 <__smakebuf_r+0x6c>
    2ff0:	e59d3008 	ldr	r3, [sp, #8]
    2ff4:	e2033a0f 	and	r3, r3, #61440	; 0xf000
    2ff8:	e2432a02 	sub	r2, r3, #8192	; 0x2000
    2ffc:	e2727000 	rsbs	r7, r2, #0
    3000:	e0a77002 	adc	r7, r7, r2
    3004:	e3530902 	cmp	r3, #32768	; 0x8000
    3008:	0a00002b 	beq	30bc <__smakebuf_r+0x108>
    300c:	e1d430bc 	ldrh	r3, [r4, #12]
    3010:	e3833b02 	orr	r3, r3, #2048	; 0x800
    3014:	e1c430bc 	strh	r3, [r4, #12]
    3018:	e3a06b01 	mov	r6, #1024	; 0x400
    301c:	ea000007 	b	3040 <__smakebuf_r+0x8c>
    3020:	e1d430bc 	ldrh	r3, [r4, #12]
    3024:	e1a02003 	mov	r2, r3
    3028:	e3833b02 	orr	r3, r3, #2048	; 0x800
    302c:	e3120080 	tst	r2, #128	; 0x80
    3030:	e1c430bc 	strh	r3, [r4, #12]
    3034:	13a06040 	movne	r6, #64	; 0x40
    3038:	03a06b01 	moveq	r6, #1024	; 0x400
    303c:	e3a07000 	mov	r7, #0
    3040:	e1a00005 	mov	r0, r5
    3044:	e1a01006 	mov	r1, r6
    3048:	ebfff822 	bl	10d8 <_malloc_r>
    304c:	e3500000 	cmp	r0, #0
    3050:	0a000023 	beq	30e4 <__smakebuf_r+0x130>
    3054:	e1d430bc 	ldrh	r3, [r4, #12]
    3058:	e59f20b0 	ldr	r2, [pc, #176]	; 3110 <__smakebuf_r+0x15c>
    305c:	e3833080 	orr	r3, r3, #128	; 0x80
    3060:	e3570000 	cmp	r7, #0
    3064:	e585203c 	str	r2, [r5, #60]	; 0x3c
    3068:	e1c430bc 	strh	r3, [r4, #12]
    306c:	e5840000 	str	r0, [r4]
    3070:	e5840010 	str	r0, [r4, #16]
    3074:	e5846014 	str	r6, [r4, #20]
    3078:	0a000006 	beq	3098 <__smakebuf_r+0xe4>
    307c:	e1a00005 	mov	r0, r5
    3080:	e1d410fe 	ldrsh	r1, [r4, #14]
    3084:	eb0000dd 	bl	3400 <_isatty_r>
    3088:	e3500000 	cmp	r0, #0
    308c:	11d430bc 	ldrhne	r3, [r4, #12]
    3090:	13833001 	orrne	r3, r3, #1
    3094:	11c430bc 	strhne	r3, [r4, #12]
    3098:	e28dd044 	add	sp, sp, #68	; 0x44
    309c:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
    30a0:	e12fff1e 	bx	lr
    30a4:	e2813043 	add	r3, r1, #67	; 0x43
    30a8:	e5813000 	str	r3, [r1]
    30ac:	e5813010 	str	r3, [r1, #16]
    30b0:	e3a03001 	mov	r3, #1
    30b4:	e5813014 	str	r3, [r1, #20]
    30b8:	eafffff6 	b	3098 <__smakebuf_r+0xe4>
    30bc:	e5942028 	ldr	r2, [r4, #40]	; 0x28
    30c0:	e59f304c 	ldr	r3, [pc, #76]	; 3114 <__smakebuf_r+0x160>
    30c4:	e1520003 	cmp	r2, r3
    30c8:	1affffcf 	bne	300c <__smakebuf_r+0x58>
    30cc:	e1d430bc 	ldrh	r3, [r4, #12]
    30d0:	e3a06b01 	mov	r6, #1024	; 0x400
    30d4:	e1833006 	orr	r3, r3, r6
    30d8:	e1c430bc 	strh	r3, [r4, #12]
    30dc:	e584604c 	str	r6, [r4, #76]	; 0x4c
    30e0:	eaffffd6 	b	3040 <__smakebuf_r+0x8c>
    30e4:	e1d430bc 	ldrh	r3, [r4, #12]
    30e8:	e3130c02 	tst	r3, #512	; 0x200
    30ec:	1affffe9 	bne	3098 <__smakebuf_r+0xe4>
    30f0:	e3833002 	orr	r3, r3, #2
    30f4:	e2842043 	add	r2, r4, #67	; 0x43
    30f8:	e1c430bc 	strh	r3, [r4, #12]
    30fc:	e3a03001 	mov	r3, #1
    3100:	e5842000 	str	r2, [r4]
    3104:	e5842010 	str	r2, [r4, #16]
    3108:	e5843014 	str	r3, [r4, #20]
    310c:	eaffffe1 	b	3098 <__smakebuf_r+0xe4>
    3110:	00002824 	.word	0x00002824
    3114:	000032ac 	.word	0x000032ac

00003118 <memset>:
    3118:	e3520003 	cmp	r2, #3
    311c:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
    3120:	e20110ff 	and	r1, r1, #255	; 0xff
    3124:	8a000008 	bhi	314c <memset+0x34>
    3128:	e3520000 	cmp	r2, #0
    312c:	0a000004 	beq	3144 <memset+0x2c>
    3130:	e1a03000 	mov	r3, r0
    3134:	e0822000 	add	r2, r2, r0
    3138:	e4c31001 	strb	r1, [r3], #1
    313c:	e1530002 	cmp	r3, r2
    3140:	1afffffc 	bne	3138 <memset+0x20>
    3144:	e49d4004 	pop	{r4}		; (ldr r4, [sp], #4)
    3148:	e12fff1e 	bx	lr
    314c:	e0802002 	add	r2, r0, r2
    3150:	e1a0c000 	mov	ip, r0
    3154:	ea000000 	b	315c <memset+0x44>
    3158:	e4cc1001 	strb	r1, [ip], #1
    315c:	e31c0003 	tst	ip, #3
    3160:	1afffffc 	bne	3158 <memset+0x40>
    3164:	e0813401 	add	r3, r1, r1, lsl #8
    3168:	e0833803 	add	r3, r3, r3, lsl #16
    316c:	ea00000f 	b	31b0 <memset+0x98>
    3170:	e50c3040 	str	r3, [ip, #-64]	; 0xffffffc0
    3174:	e50c303c 	str	r3, [ip, #-60]	; 0xffffffc4
    3178:	e50c3038 	str	r3, [ip, #-56]	; 0xffffffc8
    317c:	e50c3034 	str	r3, [ip, #-52]	; 0xffffffcc
    3180:	e50c3030 	str	r3, [ip, #-48]	; 0xffffffd0
    3184:	e50c302c 	str	r3, [ip, #-44]	; 0xffffffd4
    3188:	e50c3028 	str	r3, [ip, #-40]	; 0xffffffd8
    318c:	e50c3024 	str	r3, [ip, #-36]	; 0xffffffdc
    3190:	e50c3020 	str	r3, [ip, #-32]	; 0xffffffe0
    3194:	e50c301c 	str	r3, [ip, #-28]	; 0xffffffe4
    3198:	e50c3018 	str	r3, [ip, #-24]	; 0xffffffe8
    319c:	e50c3014 	str	r3, [ip, #-20]	; 0xffffffec
    31a0:	e50c3010 	str	r3, [ip, #-16]
    31a4:	e50c300c 	str	r3, [ip, #-12]
    31a8:	e50c3008 	str	r3, [ip, #-8]
    31ac:	e50c3004 	str	r3, [ip, #-4]
    31b0:	e06c4002 	rsb	r4, ip, r2
    31b4:	e354003f 	cmp	r4, #63	; 0x3f
    31b8:	e1a0400c 	mov	r4, ip
    31bc:	e28cc040 	add	ip, ip, #64	; 0x40
    31c0:	caffffea 	bgt	3170 <memset+0x58>
    31c4:	e1a0c004 	mov	ip, r4
    31c8:	ea000003 	b	31dc <memset+0xc4>
    31cc:	e50c3010 	str	r3, [ip, #-16]
    31d0:	e50c300c 	str	r3, [ip, #-12]
    31d4:	e50c3008 	str	r3, [ip, #-8]
    31d8:	e50c3004 	str	r3, [ip, #-4]
    31dc:	e06c4002 	rsb	r4, ip, r2
    31e0:	e354000f 	cmp	r4, #15
    31e4:	e1a0400c 	mov	r4, ip
    31e8:	e28cc010 	add	ip, ip, #16
    31ec:	cafffff6 	bgt	31cc <memset+0xb4>
    31f0:	ea000000 	b	31f8 <memset+0xe0>
    31f4:	e4843004 	str	r3, [r4], #4
    31f8:	e064c002 	rsb	ip, r4, r2
    31fc:	e35c0003 	cmp	ip, #3
    3200:	cafffffb 	bgt	31f4 <memset+0xdc>
    3204:	ea000000 	b	320c <memset+0xf4>
    3208:	e4c41001 	strb	r1, [r4], #1
    320c:	e1540002 	cmp	r4, r2
    3210:	3afffffc 	bcc	3208 <memset+0xf0>
    3214:	eaffffca 	b	3144 <memset+0x2c>

00003218 <__sread>:
    3218:	e92d4010 	push	{r4, lr}
    321c:	e1a04001 	mov	r4, r1
    3220:	e1d110fe 	ldrsh	r1, [r1, #14]
    3224:	ebfff5eb 	bl	9d8 <_read_r>
    3228:	e3500000 	cmp	r0, #0
    322c:	a5943050 	ldrge	r3, [r4, #80]	; 0x50
    3230:	b1d430bc 	ldrhlt	r3, [r4, #12]
    3234:	a0833000 	addge	r3, r3, r0
    3238:	b3c33a01 	biclt	r3, r3, #4096	; 0x1000
    323c:	a5843050 	strge	r3, [r4, #80]	; 0x50
    3240:	b1c430bc 	strhlt	r3, [r4, #12]
    3244:	e8bd4010 	pop	{r4, lr}
    3248:	e12fff1e 	bx	lr

0000324c <__seofread>:
    324c:	e3a00000 	mov	r0, #0
    3250:	e12fff1e 	bx	lr

00003254 <__swrite>:
    3254:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    3258:	e1a04001 	mov	r4, r1
    325c:	e1d110bc 	ldrh	r1, [r1, #12]
    3260:	e3110c01 	tst	r1, #256	; 0x100
    3264:	e1a07000 	mov	r7, r0
    3268:	e1a06002 	mov	r6, r2
    326c:	e1a05003 	mov	r5, r3
    3270:	0a000004 	beq	3288 <__swrite+0x34>
    3274:	e1d410fe 	ldrsh	r1, [r4, #14]
    3278:	e3a02000 	mov	r2, #0
    327c:	e3a03002 	mov	r3, #2
    3280:	ebfff601 	bl	a8c <_lseek_r>
    3284:	e1d410bc 	ldrh	r1, [r4, #12]
    3288:	e3c11a01 	bic	r1, r1, #4096	; 0x1000
    328c:	e1c410bc 	strh	r1, [r4, #12]
    3290:	e1a00007 	mov	r0, r7
    3294:	e1d410fe 	ldrsh	r1, [r4, #14]
    3298:	e1a02006 	mov	r2, r6
    329c:	e1a03005 	mov	r3, r5
    32a0:	ebfff5e4 	bl	a38 <_write_r>
    32a4:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
    32a8:	e12fff1e 	bx	lr

000032ac <__sseek>:
    32ac:	e92d4010 	push	{r4, lr}
    32b0:	e1a04001 	mov	r4, r1
    32b4:	e1d110fe 	ldrsh	r1, [r1, #14]
    32b8:	ebfff5f3 	bl	a8c <_lseek_r>
    32bc:	e1d430bc 	ldrh	r3, [r4, #12]
    32c0:	e3700001 	cmn	r0, #1
    32c4:	03c33a01 	biceq	r3, r3, #4096	; 0x1000
    32c8:	13833a01 	orrne	r3, r3, #4096	; 0x1000
    32cc:	01c430bc 	strheq	r3, [r4, #12]
    32d0:	11c430bc 	strhne	r3, [r4, #12]
    32d4:	15840050 	strne	r0, [r4, #80]	; 0x50
    32d8:	e8bd4010 	pop	{r4, lr}
    32dc:	e12fff1e 	bx	lr

000032e0 <__sclose>:
    32e0:	e92d4008 	push	{r3, lr}
    32e4:	e1d110fe 	ldrsh	r1, [r1, #14]
    32e8:	ebfff5e5 	bl	a84 <_close_r>
    32ec:	e8bd4008 	pop	{r3, lr}
    32f0:	e12fff1e 	bx	lr

000032f4 <_fclose_r>:
    32f4:	e92d4070 	push	{r4, r5, r6, lr}
    32f8:	e2514000 	subs	r4, r1, #0
    32fc:	e1a05000 	mov	r5, r0
    3300:	01a06004 	moveq	r6, r4
    3304:	0a00002b 	beq	33b8 <_fclose_r+0xc4>
    3308:	ebfffdf8 	bl	2af0 <__sfp_lock_acquire>
    330c:	e3550000 	cmp	r5, #0
    3310:	0a000002 	beq	3320 <_fclose_r+0x2c>
    3314:	e5953038 	ldr	r3, [r5, #56]	; 0x38
    3318:	e3530000 	cmp	r3, #0
    331c:	0a000028 	beq	33c4 <_fclose_r+0xd0>
    3320:	e1d460fc 	ldrsh	r6, [r4, #12]
    3324:	e3560000 	cmp	r6, #0
    3328:	0a000021 	beq	33b4 <_fclose_r+0xc0>
    332c:	e1a00005 	mov	r0, r5
    3330:	e1a01004 	mov	r1, r4
    3334:	ebfffc90 	bl	257c <_fflush_r>
    3338:	e594302c 	ldr	r3, [r4, #44]	; 0x2c
    333c:	e3530000 	cmp	r3, #0
    3340:	e1a06000 	mov	r6, r0
    3344:	0a000005 	beq	3360 <_fclose_r+0x6c>
    3348:	e1a00005 	mov	r0, r5
    334c:	e594101c 	ldr	r1, [r4, #28]
    3350:	e1a0e00f 	mov	lr, pc
    3354:	e12fff13 	bx	r3
    3358:	e3500000 	cmp	r0, #0
    335c:	b3e06000 	mvnlt	r6, #0
    3360:	e1d430bc 	ldrh	r3, [r4, #12]
    3364:	e3130080 	tst	r3, #128	; 0x80
    3368:	1a00001b 	bne	33dc <_fclose_r+0xe8>
    336c:	e5941030 	ldr	r1, [r4, #48]	; 0x30
    3370:	e3510000 	cmp	r1, #0
    3374:	0a000005 	beq	3390 <_fclose_r+0x9c>
    3378:	e2843040 	add	r3, r4, #64	; 0x40
    337c:	e1510003 	cmp	r1, r3
    3380:	11a00005 	movne	r0, r5
    3384:	1bfffe2e 	blne	2c44 <_free_r>
    3388:	e3a03000 	mov	r3, #0
    338c:	e5843030 	str	r3, [r4, #48]	; 0x30
    3390:	e5941044 	ldr	r1, [r4, #68]	; 0x44
    3394:	e3510000 	cmp	r1, #0
    3398:	0a000003 	beq	33ac <_fclose_r+0xb8>
    339c:	e1a00005 	mov	r0, r5
    33a0:	ebfffe27 	bl	2c44 <_free_r>
    33a4:	e3a03000 	mov	r3, #0
    33a8:	e5843044 	str	r3, [r4, #68]	; 0x44
    33ac:	e3a03000 	mov	r3, #0
    33b0:	e1c430bc 	strh	r3, [r4, #12]
    33b4:	ebfffdce 	bl	2af4 <__sfp_lock_release>
    33b8:	e1a00006 	mov	r0, r6
    33bc:	e8bd4070 	pop	{r4, r5, r6, lr}
    33c0:	e12fff1e 	bx	lr
    33c4:	e1a00005 	mov	r0, r5
    33c8:	ebfffd31 	bl	2894 <__sinit>
    33cc:	e1d460fc 	ldrsh	r6, [r4, #12]
    33d0:	e3560000 	cmp	r6, #0
    33d4:	1affffd4 	bne	332c <_fclose_r+0x38>
    33d8:	eafffff5 	b	33b4 <_fclose_r+0xc0>
    33dc:	e1a00005 	mov	r0, r5
    33e0:	e5941010 	ldr	r1, [r4, #16]
    33e4:	ebfffe16 	bl	2c44 <_free_r>
    33e8:	eaffffdf 	b	336c <_fclose_r+0x78>

000033ec <fclose>:
    33ec:	e59f3008 	ldr	r3, [pc, #8]	; 33fc <fclose+0x10>
    33f0:	e1a01000 	mov	r1, r0
    33f4:	e5930000 	ldr	r0, [r3]
    33f8:	eaffffbd 	b	32f4 <_fclose_r>
    33fc:	40000000 	.word	0x40000000

00003400 <_isatty_r>:
    3400:	e92d4038 	push	{r3, r4, r5, lr}
    3404:	e59f402c 	ldr	r4, [pc, #44]	; 3438 <_isatty_r+0x38>
    3408:	e3a03000 	mov	r3, #0
    340c:	e1a05000 	mov	r5, r0
    3410:	e1a00001 	mov	r0, r1
    3414:	e5843000 	str	r3, [r4]
    3418:	ebfff5ac 	bl	ad0 <_isatty>
    341c:	e3700001 	cmn	r0, #1
    3420:	1a000002 	bne	3430 <_isatty_r+0x30>
    3424:	e5943000 	ldr	r3, [r4]
    3428:	e3530000 	cmp	r3, #0
    342c:	15853000 	strne	r3, [r5]
    3430:	e8bd4038 	pop	{r3, r4, r5, lr}
    3434:	e12fff1e 	bx	lr
    3438:	40000928 	.word	0x40000928

0000343c <_global_impure_ptr>:
    343c:	40000008 67616161 666f6800 69540067     ...@aaag.hofg.Ti
    344c:	2072656d 656d2032 67617373 79680065     mer 2 message.hy
    345c:	6c65682c 77206f6c 646c726f 00000021     ,hello world!...
    346c:	0000000a 00000043                       ....C...
